bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||!undefinedRight)  {	  }    else    if(lhType    ==    Token.VOID    &&!undefinedRight)    {    	non-compiled	[CE]  	39	None	replace
2	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VOID  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.VOID    &&!undefinedRight)    {    	non-compiled	[CE]  	39	None	replace
3	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!undefinedRight)    {    	non-compiled	[CE]  	39	None	replace
4	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!undefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.VOID    &&!undefinedRight)    {    	non-compiled	[CE]  	39	None	replace
5	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!undefinedRight)    {    	non-compiled	[CE]  	39	None	replace
6	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getFirstChild()!=  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getFirstChild()!=  left.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  right.getFirstChild()!=  left.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
7	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
8	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
9	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
10	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
11	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
12	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(lhType!=    Token.NAME)    {    	non-compiled	[CE]  	85	None	replace
13	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VOID)  {	  }    else    if(lhType!=    Token.NAME)    {    	non-compiled	[CE]  	85	None	replace
14	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.FUNCTION)  {	  }    else    if(lhType!=    Token.NAME)    {    	non-compiled	[CE]  	85	None	replace
15	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
16	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
17	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
18	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
19	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
20	[BUG]  [BUGGY]  int  op  =  left.getLastChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getLastChild().getNext();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getLastChild().getNext();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
21	[BUG]  [BUGGY]  int  op  =  right.getFirstChild().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  right.getFirstChild().getNext();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  right.getFirstChild().getNext();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
22	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getOpcode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getOpcode();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getOpcode();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
23	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getNext()  -  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getNext()  -  1;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getNext()  -  1;	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
24	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getNext()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getNext()  +  1;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getNext()  +  1;	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
25	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getLastChild();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
26	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	96	None	replace
27	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	96	None	replace
28	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	96	None	replace
29	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.NAME)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
30	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||  lhType  ==  Token.NAME)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||  lhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  ||  lhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
31	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VAR  ||  rhType  ==  Token.NAME)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.VAR  ||  rhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VAR  ||  rhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
32	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType!=  Token.NAME)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType!=  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType!=  Token.NAME)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
33	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.NAME)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
34	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()!=    Token.NAME    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	53	None	replace
35	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()!=    Token.NAME    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	53	None	replace
36	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VAR  &&!undefinedRight)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.VAR  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VAR  &&!undefinedRight)  {	  }    else    if(lhType!=    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	97	None	replace
37	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.VAR  &&!rightLiteral)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.VAR  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.VAR  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	97	None	replace
38	[BUG]  [BUGGY]  Node  op  =  right.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  right.getFirstChild();	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	56	None	replace
39	[BUG]  [BUGGY]  Node  op  =  right.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  right.getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  right.getLastChild();	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	56	None	replace
40	[BUG]  [BUGGY]  Node  op  =  left.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.removeFirstChild();	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	56	None	replace
41	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.VAR  &&!undefinedRight)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral  ==  Token.VAR  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.VAR  &&!undefinedRight)  {	  }    else    if(rightLiteral    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	72	None	replace
42	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||!rightLiteral)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  ||!rightLiteral)  {	  }    else    if(rightLiteral    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	72	None	replace
43	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rightType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rightType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rightType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rightType    ==    Token.VAR)    {    	non-compiled	[CE]  	69	None	replace
44	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rightType    ==    Token.VAR)    {    	non-compiled	[CE]  	69	None	replace
45	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rightType    ==    Token.VAR)    {    	non-compiled	[CE]  	69	None	replace
46	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftType  ==  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  leftType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rightType    ==    Token.VAR)    {    	non-compiled	[CE]  	69	None	replace
47	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
48	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
49	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
50	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||  lhType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  ||  lhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
51	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.EMPTY)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
52	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VAR)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	35	None	replace
53	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VAR)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	35	None	replace
54	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
55	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  left.getString().equals( "undefined "))  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
56	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||!undefinedLeft)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||!undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||!undefinedLeft)  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
57	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  left.getType()  ==  Token.FUNCTION)  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&!undefinedRight)  {	  }    else    if(right.getType()    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	16	None	replace
59	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral)  {	  }    else    if(right.getType()    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	16	None	replace
60	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  ||!rightLiteral)  {	  }    else    if(right.getType()    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	16	None	replace
61	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&!undefinedRight)  {	  }    else    if(right.getType()    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	16	None	replace
62	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!UndefinedRight)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&!UndefinedRight)  {	  }    else    if(right.getType()    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	16	None	replace
63	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getString().equals( "null "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
64	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "null "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
65	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
66	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
67	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&  left.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
68	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VOID  ||!rightLiteral)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VOID  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VOID  ||!rightLiteral)  {	  }    else    if(rhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	40	None	replace
69	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.VOID  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.VOID  &&!rightLiteral)  {	  }    else    if(rhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	40	None	replace
70	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.VOID  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.VOID  &&!rightLiteral)  {	  }    else    if(rhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	40	None	replace
71	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	44	None	replace
72	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.NAME  ||!rightLiteral)  {	  }    else    if(rhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	44	None	replace
73	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  ||!rightLiteral)  {	  }    else    if(rhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	44	None	replace
74	[BUG]  [BUGGY]  }  else  if(!rightLiteral.equals(lhType))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!rightLiteral.equals(lhType))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!rightLiteral.equals(lhType))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
75	[BUG]  [BUGGY]  }  else  if(!rightLiteral.equals(op))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!rightLiteral.equals(op))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!rightLiteral.equals(op))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
76	[BUG]  [BUGGY]  }  else  if(lhType  ==  rhType)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  rhType)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  rhType)  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
77	[BUG]  [BUGGY]  }  else  if(lhType!=  rhType)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  rhType)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  rhType)  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
78	[BUG]  [BUGGY]  }  else  if(rhType.equals(rightLiteral))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType.equals(rightLiteral))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType.equals(rightLiteral))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
79	[BUG]  [BUGGY]  }  else  if(!rightLiteral.equals(rightLiteral))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!rightLiteral.equals(rightLiteral))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!rightLiteral.equals(rightLiteral))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
80	[BUG]  [BUGGY]  }  else  if(!rightLiteral.equals(left))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!rightLiteral.equals(left))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!rightLiteral.equals(left))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
81	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||!undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||!undefinedRight)  {	  }    else    if(lhType!=    Token.VAR    ||!rightLiteral)    {    	non-compiled	[CE]  	64	None	replace
82	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VAR  ||!undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.VAR  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VAR  ||!undefinedRight)  {	  }    else    if(lhType!=    Token.VAR    ||!rightLiteral)    {    	non-compiled	[CE]  	64	None	replace
83	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.VAR  ||!rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.VAR  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.VAR  ||!rightLiteral)  {	  }    else    if(lhType!=    Token.VAR    ||!rightLiteral)    {    	non-compiled	[CE]  	64	None	replace
84	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VOID  &&!undefinedRight)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.VOID  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VOID  &&!undefinedRight)  {	  }    else    if(lhType!=    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	102	None	replace
85	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.VOID  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.VOID  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	102	None	replace
86	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	11	None	replace
87	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	11	None	replace
88	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "false   "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "false   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "false   "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
89	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
90	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  &&  undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VAR  &&  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  &&  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
91	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||  undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
92	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.VAR  &&  undefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.VAR  &&  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.VAR  &&  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
93	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VAR  ||  undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.VAR  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VAR  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
94	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
95	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedRight  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedRight  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  undefinedRight  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
96	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	34	None	replace
97	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  lhType  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  lhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&  lhType  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	34	None	replace
98	[BUG]  [BUGGY]  }  else  if(op  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(op  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(op  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	34	None	replace
99	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  right.getString().equals( "null "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  right.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  right.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "null   "))    {    	non-compiled	[CE]  	98	None	replace
100	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  right.getString().equals( "null "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  right.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  right.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "null   "))    {    	non-compiled	[CE]  	98	None	replace
101	[BUG]  [BUGGY]  }  else  if(undefinedRight  ||  right.getString().equals( "null "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ||  right.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ||  right.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "null   "))    {    	non-compiled	[CE]  	98	None	replace
102	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  ||!rightLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY  ||!rightLiteral)  {	  }    else    if(lhType    ==    Token.EMPTY    &&!rightLiteral)    {    	non-compiled	[CE]  	41	None	replace
103	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.EMPTY  &&!rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.EMPTY  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.EMPTY  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.EMPTY    &&!rightLiteral)    {    	non-compiled	[CE]  	41	None	replace
104	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.EMPTY  &&!undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.EMPTY  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.EMPTY  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.EMPTY    &&!rightLiteral)    {    	non-compiled	[CE]  	41	None	replace
105	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!undefinedLeft)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY  &&!undefinedLeft)  {	  }    else    if(lhType    ==    Token.EMPTY    &&!rightLiteral)    {    	non-compiled	[CE]  	41	None	replace
106	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
107	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  lhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&  lhType  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
108	[BUG]  [BUGGY]  }  else  if(op  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(op  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(op  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
109	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.NAME  ||  lhType  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
110	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    &&!undefinedRight)    {    	non-compiled	[CE]  	14	None	replace
111	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedLeft)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!undefinedLeft)  {	  }    else    if(lhType    ==    Token.NAME    &&!undefinedRight)    {    	non-compiled	[CE]  	14	None	replace
112	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!undefinedRight)    {    	non-compiled	[CE]  	14	None	replace
113	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!undefinedRight)    {    	non-compiled	[CE]  	14	None	replace
114	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.EMPTY)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
115	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.EMPTY)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
116	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.EMPTY)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
117	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EXPR_RESULT)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EXPR_RESULT)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
118	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.EMPTY)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
119	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.EMPTY)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
120	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
121	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
122	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  null)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
123	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  null)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  op  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
124	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  null)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
125	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  undefinedRight)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
126	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||  undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
127	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||  undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
128	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
129	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||  undefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
130	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedLeft)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedLeft)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
131	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  undefinedRight  ||  rhType  ==  Token.VOID)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  undefinedRight  ||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  undefinedRight  ||  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
132	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
133	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  n.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
134	[BUG]  [BUGGY]  Node  right  =  right.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  right.getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  right.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
135	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
136	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  right.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
137	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.VOID  ||!rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.VOID  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.VOID  ||!rightLiteral)  {	  }    else    if(lhType!=    Token.VOID    ||!rightLiteral)    {    	non-compiled	[CE]  	42	None	replace
138	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VOID  ||!undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.VOID  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VOID  ||!undefinedRight)  {	  }    else    if(lhType!=    Token.VOID    ||!rightLiteral)    {    	non-compiled	[CE]  	42	None	replace
139	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  &&!undefinedRight)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VAR  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&!undefinedRight)    {    	non-compiled	[CE]  	62	None	replace
140	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||!undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VAR  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  ||!undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&!undefinedRight)    {    	non-compiled	[CE]  	62	None	replace
141	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.VOID)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	28	None	replace
142	[BUG]  [BUGGY]  }  else  if(right.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	30	None	replace
143	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
144	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  ||  undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
145	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "undefined "))  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
146	[BUG]  [BUGGY]  }  else  if(right  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right  ==  Token.FUNCTION  ||  undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
147	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.NAME)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
148	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "false "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "false "))  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
149	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.GETELEM)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
150	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.GETELEM)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
151	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
152	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.GETELEM)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
153	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.GETELEM)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
154	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.GETELEM)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
155	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  &&  right.getString().equals( "false "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  &&  right.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  &&  right.getString().equals( "false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    &&    right.getString().equals(   "false       "))    {    	non-compiled	[CE]  	5	None	replace
156	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  &&  right.getString().equals( "false "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  &&  right.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  &&  right.getString().equals( "false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    &&    right.getString().equals(   "false       "))    {    	non-compiled	[CE]  	5	None	replace
157	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "false "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    &&    right.getString().equals(   "false       "))    {    	non-compiled	[CE]  	5	None	replace
158	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	3	None	replace
159	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	3	None	replace
160	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	3	None	replace
161	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	3	None	replace
162	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	3	None	replace
163	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||!undefinedRight)    {    	non-compiled	[CE]  	22	None	replace
164	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||!undefinedRight)    {    	non-compiled	[CE]  	22	None	replace
165	[BUG]  [BUGGY]  }  else  if(right  ==  null  ||  rhType  ==  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right  ==  null  ||  rhType  ==  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right  ==  null  ||  rhType  ==  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||!undefinedRight)    {    	non-compiled	[CE]  	22	None	replace
166	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||!undefinedRight)    {    	non-compiled	[CE]  	22	None	replace
167	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	92	None	replace
168	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	92	None	replace
169	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	92	None	replace
170	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	92	None	replace
171	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	9	None	replace
172	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	9	None	replace
173	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  &&  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	9	None	replace
174	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "false   "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "false   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "false   "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "false   "))    {    	non-compiled	[CE]  	84	None	replace
175	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "true "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "true "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getString().equals( "true "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	21	None	replace
176	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "false "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getString().equals( "false "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	21	None	replace
177	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  right.getString().equals( "false "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  right.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  right.getString().equals( "false "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	21	None	replace
178	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  right.getString().equals( "false "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  right.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  right.getString().equals( "false "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	21	None	replace
179	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	86	None	replace
180	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	86	None	replace
181	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	86	None	replace
182	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	86	None	replace
183	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	1	None	replace
184	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  left.getString().equals( "undefined   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  left.getString().equals( "undefined   "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	20	None	replace
185	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	2	None	replace
186	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.VAR    ||!rightLiteral)    {    	non-compiled	[CE]  	61	None	replace
187	[BUG]  [BUGGY]  Node  op  =  right.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  right.getNext();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  right.getNext();	  Node    op    =    left.getNext();    	non-compiled	[CE]  	55	None	replace
188	[BUG]  [BUGGY]  Node  op  =  left.getNext()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.getNext()  +  1;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getNext()  +  1;	  Node    op    =    left.getNext();    	non-compiled	[CE]  	55	None	replace
189	[BUG]  [BUGGY]  Node  op  =  left.getNext()  ||  undefinedRight;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.getNext()  ||  undefinedRight;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getNext()  ||  undefinedRight;	  Node    op    =    left.getNext();    	non-compiled	[CE]  	55	None	replace
190	[BUG]  [BUGGY]  Node  op  =  left.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.getParent();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getParent();	  Node    op    =    left.getNext();    	non-compiled	[CE]  	55	None	replace
191	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    rightLiteral)    {    	non-compiled	[CE]  	45	None	replace
192	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightLiteral  ==  undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightLiteral  ==  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightLiteral  ==  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    rightLiteral)    {    	non-compiled	[CE]  	45	None	replace
193	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    rightLiteral)    {    	non-compiled	[CE]  	45	None	replace
194	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
195	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
196	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
197	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
198	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined   "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined   "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
199	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
200	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
201	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
202	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
203	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
204	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  rightLiteral)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||  rhType  ==  rightLiteral)  {	  }    else    if(lhType    ==    Token.VOID    ||!rightLiteral)    {    	non-compiled	[CE]  	38	None	replace
205	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	89	None	replace
206	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.GETELEM)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	89	None	replace
207	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.BLOCK)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
208	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.BLOCK)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
209	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.BLOCK)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
210	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.BLOCK)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
211	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.BLOCK)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
212	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
213	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.NAME  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.NAME  ||!rightLiteral)  {	  }    else    if(lhType!=    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	94	None	replace
214	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType!=    Token.VAR)    {    	non-compiled	[CE]  	36	None	replace
215	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType!=  Token.VAR)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType!=  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType!=  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType!=    Token.VAR)    {    	non-compiled	[CE]  	36	None	replace
216	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	76	None	replace
217	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	76	None	replace
218	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	76	None	replace
219	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	76	None	replace
220	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedLeft)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedLeft)  {	  }    else    if(undefinedLeft)    {    	non-compiled	[CE]  	87	None	replace
221	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.FUNCTION)  {	  }    else    if(undefinedLeft)    {    	non-compiled	[CE]  	87	None	replace
222	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	50	None	replace
223	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.CALL)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.CALL)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.CALL)  {	  }    else    if(rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	50	None	replace
224	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FALSE)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FALSE)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.FALSE)  {	  }    else    if(rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	50	None	replace
225	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	47	None	replace
226	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.EMPTY)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.EMPTY)  {	  }    else    if(rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	47	None	replace
227	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.GETELEM)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||  rhType  ==  Token.GETELEM)  {	  }    else    if(rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	47	None	replace
228	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getType()  ==  Token.FUNCTION)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
229	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
230	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()!=  Token.FUNCTION)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
231	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
232	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	18	None	replace
233	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!undefinedRight  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!undefinedRight  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&!undefinedRight  &&  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	18	None	replace
234	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	83	None	replace
235	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	83	None	replace
236	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	83	None	replace
237	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.NAME  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.NAME  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	95	None	replace
238	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&!undefinedRight)  {	  }    else    if(lhType!=    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	95	None	replace
239	[BUG]  [BUGGY]  Node  op  =  left.getOwnerChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.getOwnerChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getOwnerChild();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	54	None	replace
240	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  left.getString().equals( "null "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  left.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	99	None	replace
241	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  left.getString().equals( "null "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  left.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	99	None	replace
242	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "true   "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "true   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "true   "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "true   "))    {    	non-compiled	[CE]  	7	None	replace
243	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "true   "))    {    	non-compiled	[CE]  	7	None	replace
244	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.NAME)  {	  }    else    if(rhType!=    Token.NAME)    {    	non-compiled	[CE]  	49	None	replace
245	[BUG]  [BUGGY]  }  else  if(right.getType()!=  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()!=  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()!=  Token.NAME)  {	  }    else    if(rhType!=    Token.NAME)    {    	non-compiled	[CE]  	49	None	replace
246	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.FUNCTION)  {	  }    else    if(rhType!=    Token.NAME)    {    	non-compiled	[CE]  	49	None	replace
247	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType!=  Token.VOID)  {	  }    else    if(rhType!=    Token.NAME)    {    	non-compiled	[CE]  	49	None	replace
248	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!leftLiteral)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!leftLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!leftLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
249	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!leftLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!leftLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||!leftLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
250	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  leftLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
251	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	10	None	replace
252	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!UndefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!UndefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
253	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!UndefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||!UndefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
254	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  UndefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  UndefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  UndefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
255	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Undefined)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Undefined)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Undefined)  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
256	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	24	None	replace
257	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType!=  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	24	None	replace
258	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
259	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
260	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
261	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
262	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getLastChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
263	[BUG]  [BUGGY]  op  =  left.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  left.getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.getLastChild();	  op    =    left.getFirstChild();    	non-compiled	[CE]  	58	None	replace
264	[BUG]  [BUGGY]  op  =  right.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  right.getFirstChild();	  op    =    left.getFirstChild();    	non-compiled	[CE]  	58	None	replace
265	[BUG]  [BUGGY]  op  =  right.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  right.getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  right.getLastChild();	  op    =    left.getFirstChild();    	non-compiled	[CE]  	58	None	replace
266	[BUG]  [BUGGY]  op  =  right.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  right.getNext();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  right.getNext();	  op    =    left.getFirstChild();    	non-compiled	[CE]  	58	None	replace
267	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  &&  left.getString().equals( "undefined   "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	12	None	replace
268	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  left.getString().equals( "undefined   "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  left.getString().equals( "undefined   "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	12	None	replace
269	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	65	None	replace
270	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	65	None	replace
271	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION)  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
272	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
273	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.EXPR_RESULT)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.EXPR_RESULT)  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
274	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION)  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
275	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.GETELEM)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.GETELEM)  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
276	[BUG]  [BUGGY]  }  else  if(right.getType()!=  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()!=  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()!=  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {	  }    else    if(right.getType()!=    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	104	None	replace
277	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()!=    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	104	None	replace
278	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "true "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "true "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "true "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "false   "))    {    	non-compiled	[CE]  	8	None	replace
279	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
280	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
281	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
282	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
283	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  op  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
284	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.UNKNOWN)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
285	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.CALL  &&  rhType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.CALL  &&  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.CALL  &&  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.CALL    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	101	None	replace
286	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.CALL  ||  lhType  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.CALL  ||  lhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.CALL  ||  lhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.CALL    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	101	None	replace
287	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.CALL  ||  undefinedRight  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.CALL  ||  undefinedRight  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.CALL  ||  undefinedRight  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.CALL    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	101	None	replace
288	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.CALL  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.CALL  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.CALL  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.CALL    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	101	None	replace
289	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	60	None	replace
290	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	60	None	replace
291	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	60	None	replace
292	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  n  =  left.getNext();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	n  =  left.getNext();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	60	None	replace
293	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.VAR  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.VAR  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.VAR  &&!rightLiteral)  {	  }    else    if(rhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	63	None	replace
294	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	67	None	replace
295	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  undefinedRight;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getNext()  &&  undefinedRight;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getNext()  &&  undefinedRight;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	67	None	replace
296	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  lhType);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getNext(),  lhType);  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getNext(),  lhType);	  Node    right    =    left.getNext();    	non-compiled	[CE]  	67	None	replace
297	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  undefinedRight;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getNext(),  undefinedRight;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getNext(),  undefinedRight;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	67	None	replace
298	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedLeft)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!undefinedLeft)  {	  }    else    if(lhType    ==    Token.NAME    ||!undefinedRight)    {    	non-compiled	[CE]  	43	None	replace
299	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	13	None	replace
300	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	13	None	replace
301	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
302	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  left.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
303	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  left.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
304	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
305	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()!=  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()!=  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()!=  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
306	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
307	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getType()  ==  Token.VAR)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
308	[BUG]  [BUGGY]  }  else  if(!undefinedLeft  &&  left.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedLeft  &&  left.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft  &&  left.getType()  ==  Token.VAR)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
309	[BUG]  [BUGGY]  }  else  if(!undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
310	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.VOID)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
311	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  &&!undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  &&!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.NAME  &&!undefinedRight)  {	  }    else    if(rightLiteral    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	78	None	replace
312	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	33	None	replace
313	[BUG]  [BUGGY]  op  =  left.getNext()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  left.getNext()  +  1;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.getNext()  +  1;	  op    =    left.getNext();    	non-compiled	[CE]  	59	None	replace
314	[BUG]  [BUGGY]  op  =  left.getNext()  ||  undefinedRight;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  left.getNext()  ||  undefinedRight;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.getNext()  ||  undefinedRight;	  op    =    left.getNext();    	non-compiled	[CE]  	59	None	replace
315	[BUG]  [BUGGY]  op  =  left.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  left.getParent();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.getParent();	  op    =    left.getNext();    	non-compiled	[CE]  	59	None	replace
316	[BUG]  [BUGGY]  }  else  if(rightType!=  Token.NAME)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType!=  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType!=  Token.NAME)  {	  }    else    if(lhType!=    Token.NAME)    {    	non-compiled	[CE]  	85	None	replace
317	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.NAME)  {	  }    else    if(lhType!=    Token.NAME)    {    	non-compiled	[CE]  	85	None	replace
318	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!left.getType().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!left.getType().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&!left.getType().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	16	None	replace
319	[BUG]  [BUGGY]  }  else  if(leftLiteral  ==  Token.NAME  ||  lhType  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(leftLiteral  ==  Token.NAME  ||  lhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(leftLiteral  ==  Token.NAME  ||  lhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
320	[BUG]  [BUGGY]  }  else  if(leftLiteral  ==  Token.NAME  ||!leftLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(leftLiteral  ==  Token.NAME  ||!leftLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(leftLiteral  ==  Token.NAME  ||!leftLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
321	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  ||!leftLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  ||!leftLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.NAME  ||!leftLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
322	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||!leftLiteral)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||!leftLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  ||!leftLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
323	[BUG]  [BUGGY]  op  =  left.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.removeFirstChild();	  op    =    left.getFirstChild();    	non-compiled	[CE]  	58	None	replace
324	[BUG]  [BUGGY]  op  =  left.cloneTree();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  left.cloneTree();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.cloneTree();	  op    =    left.getFirstChild();    	non-compiled	[CE]  	58	None	replace
325	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	34	None	replace
326	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	34	None	replace
327	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	76	None	replace
328	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  &&  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    &&    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	9	None	replace
329	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
330	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	65	None	replace
331	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.VAR  ||!rightLiteral)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral  ==  Token.VAR  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.VAR  ||!rightLiteral)  {	  }    else    if(rightLiteral    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	72	None	replace
332	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
333	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  rhType  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
334	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftType  ==  null)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftType  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  leftType  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    null)    {    	non-compiled	[CE]  	46	None	replace
335	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
336	[BUG]  [BUGGY]  }  else  if(undefinedRight  ||  left.getString().equals( "null "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ||  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ||  left.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	99	None	replace
337	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.BLOCK)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
338	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!undefinedRight  &&  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.VOID    &&!undefinedRight)    {    	non-compiled	[CE]  	39	None	replace
339	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	3	None	replace
340	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETPROP)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETPROP)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETPROP)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
341	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.GETELEM)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
342	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral  ==  Token.VOID  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.VOID  &&!rightLiteral)  {	  }    else    if(rhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	40	None	replace
343	[BUG]  [BUGGY]  Node  op  =  left.cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.cloneTree();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.cloneTree();	  Node    op    =    left.getNext();    	non-compiled	[CE]  	55	None	replace
344	[BUG]  [BUGGY]  }  else  if(undefinedRight  ||  right.getString().equals( "false "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ||  right.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ||  right.getString().equals( "false "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	21	None	replace
345	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(rhType    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	66	None	replace
346	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  leftType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  leftType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	92	None	replace
347	[BUG]  [BUGGY]  Node  op  =  left.getfirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.getfirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getfirstChild();	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	56	None	replace
348	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getParent();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	67	None	replace
349	[BUG]  [BUGGY]  }  else  if(rightType!=  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType!=  Token.VOID  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType!=  Token.VOID  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	102	None	replace
350	[BUG]  [BUGGY]  }  else  if(rightLiteral!=  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral!=  Token.VOID  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral!=  Token.VOID  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	102	None	replace
351	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||  undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VOID  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
352	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR  ||  undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR  ||  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    undefinedRight)    {    	non-compiled	[CE]  	26	None	replace
353	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
354	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
355	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
356	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VOID)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
357	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "true "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "true "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "true "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "true   "))    {    	non-compiled	[CE]  	7	None	replace
358	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getOpcodes();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getOpcodes();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getOpcodes();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
359	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getStart();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getStart();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getStart();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
360	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getOpcoder();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getOpcoder();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getOpcoder();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
361	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||!undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||!undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    &&!undefinedRight)    {    	non-compiled	[CE]  	14	None	replace
362	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.FUNCTION  ||  right.getString().equals( "false "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	83	None	replace
363	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  left.getType()  ==  Token.VOID)  {	  }    else    if(left.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	29	None	replace
364	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
365	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(left,  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.replaceChild(left,  n);  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.replaceChild(left,  n);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
366	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(left,  newNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.replaceChild(left,  newNode);  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.replaceChild(left,  newNode);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
367	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  }    else    if(rhType    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	32	None	replace
368	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(rhType    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	32	None	replace
369	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||!undefinedRight)    {    	non-compiled	[CE]  	22	None	replace
370	[BUG]  [BUGGY]  }  else  if(rightLiteral!=  Token.VAR  &&!rightLiteral)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral!=  Token.VAR  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral!=  Token.VAR  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	97	None	replace
371	[BUG]  [BUGGY]  }  else  if(rightType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	28	None	replace
372	[BUG]  [BUGGY]  }  else  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VOID)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	28	None	replace
373	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.VAR    &&!undefinedRight)    {    	non-compiled	[CE]  	62	None	replace
374	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
375	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
376	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
377	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
378	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
379	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType!=  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType!=  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  rhType!=  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType!=    Token.VAR)    {    	non-compiled	[CE]  	36	None	replace
380	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()!=    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	104	None	replace
381	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
382	[BUG]  [BUGGY]  }  else  if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ||  left.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
383	[BUG]  [BUGGY]  }  else  if(!left.getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!left.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
384	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
385	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightLiteral  ==  rhType)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightLiteral  ==  rhType)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightLiteral  ==  rhType)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    rightLiteral)    {    	non-compiled	[CE]  	45	None	replace
386	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.EMPTY)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
387	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.EMPTY)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  left.getType()  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.EMPTY)    {    	non-compiled	[CE]  	27	None	replace
388	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.NAME  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.NAME  &&!rightLiteral)  {	  }    else    if(rhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
389	[BUG]  [BUGGY]  }  else  if(rightType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	35	None	replace
390	[BUG]  [BUGGY]  }  else  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  >=  Token.NAME  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	35	None	replace
391	[BUG]  [BUGGY]  }  else  if(op!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(op!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(op!=  Token.NAME  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType!=    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	35	None	replace
392	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "null "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "null "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "false   "))    {    	non-compiled	[CE]  	8	None	replace
393	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.EMPTY    &&!rightLiteral)    {    	non-compiled	[CE]  	41	None	replace
394	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!result)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!result)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY  &&!result)  {	  }    else    if(lhType    ==    Token.EMPTY    &&!rightLiteral)    {    	non-compiled	[CE]  	41	None	replace
395	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.EMPTY    &&!rightLiteral)    {    	non-compiled	[CE]  	41	None	replace
396	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
397	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
398	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	71	None	replace
399	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	33	None	replace
400	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.EMPTY)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	86	None	replace
401	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
402	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	96	None	replace
403	[BUG]  [BUGGY]  }  else  if(undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
404	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getType()  ==  Token.VAR)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
405	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.VAR)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
406	[BUG]  [BUGGY]  }  else  if(result  ==  null  ||!rightLiteral.equals(rhType))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(result  ==  null  ||!rightLiteral.equals(rhType))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(result  ==  null  ||!rightLiteral.equals(rhType))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
407	[BUG]  [BUGGY]  }  else  if(rhType!=  null  &&!rightLiteral.equals(rhType))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  null  &&!rightLiteral.equals(rhType))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  null  &&!rightLiteral.equals(rhType))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
408	[BUG]  [BUGGY]  }  else  if(!rightLiteral.equals(right))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!rightLiteral.equals(right))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!rightLiteral.equals(right))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
409	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	60	None	replace
410	[BUG]  [BUGGY]  }  else  if(rightLiteral!=  Token.VOID  ||!rightLiteral)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral!=  Token.VOID  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral!=  Token.VOID  ||!rightLiteral)  {	  }    else    if(lhType!=    Token.VOID    ||!rightLiteral)    {    	non-compiled	[CE]  	42	None	replace
411	[BUG]  [BUGGY]  }  else  if(rightType!=  Token.VOID  ||!rightLiteral)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType!=  Token.VOID  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType!=  Token.VOID  ||!rightLiteral)  {	  }    else    if(lhType!=    Token.VOID    ||!rightLiteral)    {    	non-compiled	[CE]  	42	None	replace
412	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  rhType  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
413	[BUG]  [BUGGY]  }  else  if(rightType  ==  Token.VAR  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType  ==  Token.VAR  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType  ==  Token.VAR  &&!rightLiteral)  {	  }    else    if(rhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	63	None	replace
414	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  left.getType()  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
415	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getType()  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&  left.getType()  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	24	None	replace
416	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  rhType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	24	None	replace
417	[BUG]  [BUGGY]  }  else  if(rightLiteral!=  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral!=  Token.NAME  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral!=  Token.NAME  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	95	None	replace
418	[BUG]  [BUGGY]  }  else  if(rightType!=  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightType!=  Token.NAME  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightType!=  Token.NAME  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	95	None	replace
419	[BUG]  [BUGGY]  }  else  if(undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ||  left.getType()  ==  Token.FUNCTION)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
420	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getType()  ==  Token.FUNCTION)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
421	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!leftLiteral)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!leftLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||!leftLiteral)  {	  }    else    if(lhType    ==    Token.VOID    ||!rightLiteral)    {    	non-compiled	[CE]  	38	None	replace
422	[BUG]  [BUGGY]  }  else  if(rightLiteral!=  Token.NAME  ||  lhType!=  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral!=  Token.NAME  ||  lhType!=  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral!=  Token.NAME  ||  lhType!=  Token.NAME)  {	  }    else    if(lhType!=    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	94	None	replace
423	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Undefined.NULL)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Undefined.NULL)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Undefined.NULL)  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
424	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.GETELEM  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.CALL    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	101	None	replace
425	[BUG]  [BUGGY]  }  else  if(undefinedRight  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ||  left.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	20	None	replace
426	[BUG]  [BUGGY]  }  else  if(!left.getType().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!left.getType().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!left.getType().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	20	None	replace
427	[BUG]  [BUGGY]  }  else  if(undefinedRight  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(undefinedRight  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedRight  ==  Token.FUNCTION  ||  rhType  ==  Token.FUNCTION)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
428	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
429	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.VOID)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
430	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.EMPTY)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getType()  ==  Token.EMPTY)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
431	[BUG]  [BUGGY]  }  else  if(result  ==  null  ||!undefinedRight  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(result  ==  null  ||!undefinedRight  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(result  ==  null  ||!undefinedRight  &&  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	18	None	replace
432	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(rhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	44	None	replace
433	[BUG]  [BUGGY]  }  else  if(rightLiteral!=  Token.VAR  ||!lhType)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral!=  Token.VAR  ||!lhType)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral!=  Token.VAR  ||!lhType)  {	  }    else    if(lhType!=    Token.VAR    ||!rightLiteral)    {    	non-compiled	[CE]  	64	None	replace
434	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getFirstChild()  ==  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getFirstChild()  ==  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getFirstChild()  ==  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
435	[BUG]  [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()!=  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()!=  Token.FUNCTION  ||  left.getString().equals( "false "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "false   "))    {    	non-compiled	[CE]  	8	None	replace
436	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
437	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
438	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
439	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||!leftLiteral)    {    	non-compiled	[CE]  	75	None	replace
440	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
441	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	70	None	replace
442	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VALUE)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VALUE)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VALUE)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	3	None	replace
443	[BUG]  [BUGGY]  }  else  if(!rightLiteral.equals(lhType)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!rightLiteral.equals(lhType)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!rightLiteral.equals(lhType)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
444	[BUG]  [BUGGY]  }  else  if(!lhType.equals(rhType))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!lhType.equals(rhType))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!lhType.equals(rhType))  {	  }    else    if(!rightLiteral.equals(rhType))    {    	non-compiled	[CE]  	19	None	replace
445	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedLeft)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  undefinedLeft)  {	  }    else    if(undefinedLeft)    {    	non-compiled	[CE]  	87	None	replace
446	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  n.getString().equals( "undefined "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  n.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  n.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	13	None	replace
447	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	13	None	replace
448	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==   "undefined ")  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==   "undefined ")  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==   "undefined ")  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	13	None	replace
449	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  	13	None	replace
450	[BUG]  [BUGGY]  }  else  if(right.getType()!=  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(right.getType()!=  Token.NAME  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()!=  Token.NAME  &&!rightLiteral)  {	  }    else    if(right.getType()    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	16	None	replace
451	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VAR  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	90	None	replace
452	[BUG]  [BUGGY]  Node  op  =  left.replaceChild(left,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.replaceChild(left,  n);  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.replaceChild(left,  n);	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	56	None	replace
453	[BUG]  [BUGGY]  Node  op  =  left.replaceChild(n,  newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  op  =  left.replaceChild(n,  newNode);  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.replaceChild(n,  newNode);	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	56	None	replace
454	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
455	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR  &&  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
456	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getType()  ==  Token.VOID)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	81	None	replace
457	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType!=    Token.NAME)    {    	non-compiled	[CE]  	85	None	replace
458	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType!=    Token.NAME)    {    	non-compiled	[CE]  	85	None	replace
459	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
460	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	91	None	replace
461	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
462	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
463	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getFirstChild()))  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	25	None	replace
464	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.VAR  &&!undefinedRight  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.VAR  &&!undefinedRight  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.VAR  &&!undefinedRight  &&  left.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	20	None	replace
465	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rightType  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rightType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rightType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    ||    rightType    ==    Token.VAR)    {    	non-compiled	[CE]  	69	None	replace
466	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
467	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.BLOCK)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.BLOCK)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
468	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.BLOCK)    {    	non-compiled	[CE]  	100	None	replace
469	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "true "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "true "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getString().equals( "true "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	21	None	replace
470	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.UNKNOWN)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
471	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.CATCH)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.CATCH)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.CATCH)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
472	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType!=    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	95	None	replace
473	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType!=    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	95	None	replace
474	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&!rightLiteral  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType!=    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	95	None	replace
475	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	80	None	replace
476	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "null "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight  ||  left.getString().equals( "null "))  {	  }    else    if(rhType    ==    Token.FUNCTION    ||    undefinedRight)    {    	non-compiled	[CE]  	48	None	replace
477	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedRight  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedRight  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  undefinedRight  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
478	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VAR  &&  undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.VAR  &&  undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VAR  &&  undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&    undefinedRight)    {    	non-compiled	[CE]  	88	None	replace
479	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	76	None	replace
480	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!leftLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	76	None	replace
481	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  lhType  ==  Token.VOID;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getNext()  &&  lhType  ==  Token.VOID;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getNext()  &&  lhType  ==  Token.VOID;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	67	None	replace
482	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &&  lhType  ==  Token.VAR;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.getNext()  &&  lhType  ==  Token.VAR;  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getNext()  &&  lhType  ==  Token.VAR;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	67	None	replace
483	[BUG]  [BUGGY]  }  else  if(rightLiteral!=  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral!=  Token.NAME  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral!=  Token.NAME  ||!rightLiteral)  {	  }    else    if(lhType!=    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	94	None	replace
484	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!UndefinedRight)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||!UndefinedRight)  {	  }    else    if(lhType    ==    Token.VOID    ||!rightLiteral)    {    	non-compiled	[CE]  	38	None	replace
485	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.replaceChild(n,  newNode);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	57	None	replace
486	[BUG]  [BUGGY]  }  else  if(op  ==  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(op  ==  Token.NAME  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(op  ==  Token.NAME  &&!rightLiteral)  {	  }    else    if(rhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
487	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.CALL)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.CALL)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.CALL)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    rightLiteral)    {    	non-compiled	[CE]  	45	None	replace
488	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.CALL  &&  rhType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.CALL  &&  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.CALL  &&  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.CALL    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	101	None	replace
489	[BUG]  [BUGGY]  }  else  if(op  ==  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(op  ==  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(op  ==  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||!undefinedRight)    {    	non-compiled	[CE]  	22	None	replace
490	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(rhType    ==    Token.FUNCTION    ||!undefinedRight)    {    	non-compiled	[CE]  	22	None	replace
491	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( ".false "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( ".false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( ".false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "false   "))    {    	non-compiled	[CE]  	84	None	replace
492	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
493	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
494	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
495	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
496	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "infinity "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "infinity "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "infinity "))  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
497	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "null "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!UndefinedRight  &&  left.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.NAME    ||!UndefinedRight)    {    	non-compiled	[CE]  	93	None	replace
498	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	1	None	replace
499	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	1	None	replace
500	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  rhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	1	None	replace
501	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	2	None	replace
502	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  rhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	2	None	replace
503	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  rhType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	2	None	replace
504	[BUG]  [BUGGY]  }  else  if(op  ==  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(op  ==  Token.NAME  ||!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(op  ==  Token.NAME  ||!rightLiteral)  {	  }    else    if(rhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	44	None	replace
505	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(rhType!=    Token.NAME)    {    	non-compiled	[CE]  	49	None	replace
506	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "null "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "null "))  {	  }    else    if(left.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
507	[BUG]  [BUGGY]  op  =  right.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  op  =  right.getParent();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  right.getParent();	  op    =    left.getNext();    	non-compiled	[CE]  	59	None	replace
508	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(rhType    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	32	None	replace
509	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null ")||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
510	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null ")||  rhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null ")||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null ")||  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	74	None	replace
511	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.EMPTY  &&!rightLiteral)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.EMPTY  &&!rightLiteral)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.EMPTY  &&!rightLiteral)  {	  }    else    if(lhType!=    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	102	None	replace
512	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    ||!undefinedRight)    {    	non-compiled	[CE]  	43	None	replace
513	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||!undefinedRight)    {    	non-compiled	[CE]  	43	None	replace
514	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	92	None	replace
515	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getString()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getString()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	92	None	replace
516	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getString()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&    NodeUtil.isLiteralValue(left.getFirstChild()))    {    	non-compiled	[CE]  	77	None	replace
517	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {	  }    else    if(rhType    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	66	None	replace
518	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.GETELEM)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.GETELEM)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.GETELEM)    {    	non-compiled	[CE]  	68	None	replace
519	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
520	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
521	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedLeft  &&!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
522	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedLeft)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedLeft)  {	  }    else    if(!undefinedLeft)    {    	non-compiled	[CE]  	17	None	replace
523	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.EMPTY)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.EMPTY)  {	  }    else    if(rhType    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	23	None	replace
524	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.CALL  &&  rhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.CALL  &&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.CALL  &&  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	24	None	replace
525	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  rhType  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&  rhType  ==  Token.NAME)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&  rhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    &&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	24	None	replace
526	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  ||  rightLiteral  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  ||  rightLiteral  ==  null)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.NAME  ||  rightLiteral  ==  null)  {	  }    else    if(rightLiteral    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	78	None	replace
527	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.DO)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.DO)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.DO)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	65	None	replace
528	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.TYPE)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.TYPE)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.TYPE)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	65	None	replace
529	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( ".undefined "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( ".undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( ".undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	12	None	replace
530	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getFirstChild()  ==  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getFirstChild()  ==  left.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  right.getFirstChild()  ==  left.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
531	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  left.getFirstChild()  ==  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType!=  Token.NAME  &&  left.getFirstChild()  ==  right.getLastChild())  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&  left.getFirstChild()  ==  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME    &&    left.getFirstChild()!=    right.getLastChild())    {    	non-compiled	[CE]  	73	None	replace
532	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	89	None	replace
533	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
534	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
535	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VAR    ||    rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	37	None	replace
536	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VAR    &&!undefinedRight)    {    	non-compiled	[CE]  	62	None	replace
537	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VAR    &&!undefinedRight)    {    	non-compiled	[CE]  	62	None	replace
538	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedRight  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VAR    &&!undefinedRight)    {    	non-compiled	[CE]  	62	None	replace
539	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {	  }    else    if(rhType    ==    Token.NAME    ||    lhType    ==    Token.VAR)    {    	non-compiled	[CE]  	34	None	replace
540	[BUG]  [BUGGY]  }  else  if(result  ==  null  ||!undefinedRight  &&  right.getString().equals( "null "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(result  ==  null  ||!undefinedRight  &&  right.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(result  ==  null  ||!undefinedRight  &&  right.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    right.getString().equals(   "null   "))    {    	non-compiled	[CE]  	98	None	replace
541	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.CATCH)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.CATCH)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.CATCH)  {	  }    else    if(rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	50	None	replace
542	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.VAR  &&!undefinedRight  &&  left.getString().equals( "null "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(left.getType()  ==  Token.VAR  &&!undefinedRight  &&  left.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.VAR  &&!undefinedRight  &&  left.getString().equals( "null "))  {	  }    else    if(!undefinedRight    &&    left.getString().equals(   "null   "))    {    	non-compiled	[CE]  	99	None	replace
543	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==   "false ")  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==   "false ")  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  rhType  ==   "false ")  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	83	None	replace
544	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  n.getString().equals( "false "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  n.getString().equals( "false "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  n.getString().equals( "false "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	83	None	replace
545	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "null "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "null "))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	83	None	replace
546	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getType()!=  Token.FUNCTION)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
547	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.EMPTY)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.EMPTY)  {	  }    else    if(!undefinedRight    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	79	None	replace
548	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	96	None	replace
549	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getString(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getString(),  false))  {  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getString(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral    &&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	96	None	replace
550	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getParent();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getParent();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
551	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getOffset();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;      [BUGGY]  int  op  =  left.getFirstChild().getOffset();  [BUGGY]      return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getOffset();	  int    op    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	103	None	replace
