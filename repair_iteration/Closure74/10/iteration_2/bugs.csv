bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME)    {    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME)    {    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.FUNCTION)  {	  }    else    if(lhType    ==    Token.NAME)    {    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.UNKNOWN)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.UNKNOWN)  {	  }    else    if(lhType    ==    Token.NAME)    {    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "false   "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "false   "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "false   "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "true "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  &&  right.getString().equals( "undefined   "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "undefined   "))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "undefined   "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "undefined   "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  }  else  if(!undefinedLeft)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedLeft)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedLeft)  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  }  else  if(!rightLiteral.equals(rhType))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!rightLiteral.equals(rhType))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!rightLiteral.equals(rhType))  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getString().equals( "undefined "))  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "false "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "false "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getString().equals( "false "))  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||!undefinedRight)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||!undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||!undefinedRight)  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION)  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EMPTY)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EMPTY)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.EMPTY)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	12	None	replace
34	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||  lhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	12	None	replace
35	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	12	None	replace
36	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType!=  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	12	None	replace
37	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.NAME)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	12	None	replace
38	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!rightLiteral)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VOID  ||!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  ||!rightLiteral)  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
39	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
40	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.VOID  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VOID  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
41	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.EMPTY  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
42	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VOID  ||!rightLiteral)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.VOID  ||!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VOID  ||!rightLiteral)  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
43	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedRight)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!undefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	11	None	replace
44	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.NAME  ||!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  ||!rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	11	None	replace
45	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  rightLiteral)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  null)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  null)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  null)  {	  }    else    if(lhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	11	None	replace
47	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VOID)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VOID)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
48	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.FUNCTION  ||  undefinedRight)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
49	[BUG]  [BUGGY]  }  else  if(rhType!=  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType!=  Token.NAME)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType!=  Token.NAME)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
50	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(left.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(left.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  }  else  if(right.getType()!=  Token.NAME  &&  right.getString().equals( "undefined   "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()!=  Token.NAME  &&  right.getString().equals( "undefined   "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()!=  Token.NAME  &&  right.getString().equals( "undefined   "))  {	  }    else    if(right.getType()    ==    Token.NAME    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  Node  op  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  Node  op  =  left.getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  Node  op  =  left.getNext();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  Node  op  =  left.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  Node  op  =  left.getLastChild();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  op  =  left.getLastChild();	      	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  op  =  left.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  op  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  op  =  left.getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  op  =  left.getNext();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	op  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||!rightLiteral)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||!rightLiteral)  {	  }    else    if(lhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	13	None	replace
62	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&!undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&!undefinedRight)  {	  }    else    if(lhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	13	None	replace
63	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.VAR  &&!rightLiteral)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.VAR  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.VAR  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	13	None	replace
64	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VAR  ||!rightLiteral)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.VAR  ||!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VAR  ||!rightLiteral)  {	  }    else    if(lhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.NAME)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.NAME)  {	  }    else    if(rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
66	[BUG]  [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rhType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rhType  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  }    else    if(rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
68	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.GETELEM)  {	  }    else    if(rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
69	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rightType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	12	None	replace
70	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
72	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.VAR  &&!rightLiteral)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rightLiteral  ==  Token.VAR  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.VAR  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	13	None	replace
73	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {	  }    else    if(lhType    ==    Token.NAME)    {    	non-compiled	[CE]  	9	None	replace
74	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&  left.getString().equals( "null "))  {	  }    else    if(lhType    ==    Token.NAME)    {    	non-compiled	[CE]  	9	None	replace
75	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!leftLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!leftLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	11	None	replace
76	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
77	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&  NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
78	[BUG]  [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(rightLiteral  ==  Token.NAME  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(rightLiteral  ==  Token.NAME  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
79	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.FUNCTION)  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
80	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.NAME)  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
81	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getType()  ==  Token.VAR)  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
82	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.NAME    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	4	None	replace
83	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.FUNCTION  ||  right.getString().equals( "false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
84	[BUG]  [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "false "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "false   "))    {    	non-compiled	[CE]  	6	None	replace
85	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.NAME)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
86	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VOID)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VOID)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
87	[BUG]  [BUGGY]  }  else  if(undefinedLeft)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(undefinedLeft)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(undefinedLeft)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
88	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedRight)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VAR  &&  undefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  &&  undefinedRight)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR)  {	  }    else    if(undefinedRight)    {    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||  left.getString().equals( "undefined "))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
91	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.VAR  ||  rhType  ==  Token.VOID)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
92	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild()))  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	8	None	replace
93	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||!UndefinedRight)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||!UndefinedRight)  {	  }    else    if(lhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	11	None	replace
94	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  ||!rightLiteral)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.NAME  ||!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  ||!rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    ||!rightLiteral)    {    	non-compiled	[CE]  	11	None	replace
95	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.NAME  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.NAME  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
96	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  &&!rightLiteral  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  }    else    if(lhType    ==    Token.NAME    &&!rightLiteral)    {    	non-compiled	[CE]  	15	None	replace
97	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VAR  &&!rightLiteral)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.VAR  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VAR  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.VAR    &&!rightLiteral)    {    	non-compiled	[CE]  	13	None	replace
98	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "null "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  right.getString().equals( "null "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  right.getString().equals( "null "))  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "null "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(!undefinedRight  &&  left.getString().equals( "null "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(!undefinedRight  &&  left.getString().equals( "null "))  {	  }    else    if(!undefinedRight)    {    	non-compiled	[CE]  	2	None	replace
100	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.NAME  ||  rhType  ==  Token.BLOCK)  {	  }    else    if(rhType    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
101	[BUG]  [BUGGY]  }  else  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.VAR)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType  ==  Token.CALL  ||  rhType  ==  Token.VAR)  {	  }    else    if(lhType    ==    Token.NAME    ||    rhType    ==    Token.VAR)    {    	non-compiled	[CE]  	12	None	replace
102	[BUG]  [BUGGY]  }  else  if(lhType!=  Token.VOID  &&!rightLiteral)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(lhType!=  Token.VOID  &&!rightLiteral)  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(lhType!=  Token.VOID  &&!rightLiteral)  {	  }    else    if(lhType    ==    Token.VOID    &&!rightLiteral)    {    	non-compiled	[CE]  	14	None	replace
103	[BUG]  [BUGGY]  int  op  =  left.getFirstChild().getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  int  op  =  left.getFirstChild().getNext();  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	int  op  =  left.getFirstChild().getNext();	      	non-compiled	[CE]  	7	None	replace
104	[BUG]  [BUGGY]  }  else  if(right.getType()!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;    [BUGGY]  }  else  if(right.getType()!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {  [BUGGY]    return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  case  Token.FALSE:  if  (undefinedRight)  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	913	913	3	replace	}  else  if(right.getType()!=  Token.FUNCTION  ||  right.getString().equals( "undefined "))  {	  }    else    if(right.getType()    ==    Token.FUNCTION    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  	5	None	replace
