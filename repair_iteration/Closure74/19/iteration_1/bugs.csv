bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  valueNull;  [CE]  case,  default,  or  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
2	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
3	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueNull);  [CE]  case,  default,  or  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueNull);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueNull);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
4	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
5	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
6	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(valueNull);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(valueNull);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
7	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(value);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(value);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
8	[BUG]  [BUGGY]    [CE]  case,  default,  or  [FE]                  AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]    [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	  	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
9	[BUG]  [BUGGY]  return  valueNull?  equal  :  valueNull;  [CE]  case,  default,  or  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equal  :  valueNull;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  valueNull;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
10	[BUG]  [BUGGY]  return  valueNull  ||  valueNull;  [CE]  case,  default,  or  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull  ||  valueNull;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  valueNull;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
11	[BUG]  [BUGGY]  return  valueNull  &&  equal;  [CE]  case,  default,  or  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull  &&  equal;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
12	[BUG]  [BUGGY]  return  valueNull?  equivalent  :  valueNull;  [CE]  case,  default,  or  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equivalent  :  valueNull;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equivalent  :  valueNull;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
13	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  equalizer;  [CE]  case,  default,  or  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  equalizer  :  equalizer;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer  :  equalizer;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
14	[BUG]  [BUGGY]  return  valueNull  ||  equal;  [CE]  case,  default,  or  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull  ||  equal;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  equal;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
15	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
16	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value);  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value);	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
17	[BUG]  [BUGGY]  return  valueNull  &&  valueNull;  [CE]  case,  default,  or  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals( "undefined "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:    [BUGGY]  return  valueNull  &&  valueNull;  [BUGGY]  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  valueNull;	return  equivalent;  	non-compiled	[CE]  case,  default,  or  	37	None	replace
