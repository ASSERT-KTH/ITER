bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  valueNull;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer  :  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer  :  valueNull;	  return    valueNull?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
2	[BUG]  [BUGGY]  return  valueNull?  equality  :  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equality  :  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equality  :  valueNull;	  return    valueNull?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
3	[BUG]  [BUGGY]  return  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.compare(value,  op);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op);	  return    valueNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
4	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  1;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  1;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  1;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
5	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op);	  return    valueNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
6	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op));  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op));  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op));	  return    valueNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
7	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
8	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
9	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equalsIgnoreCase(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equalsIgnoreCase(value);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
10	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(value);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
11	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
12	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
13	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
14	[BUG]  [BUGGY]  return  equalizer.equals(value):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(value):  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
15	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
16	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
17	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
18	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
19	[BUG]  [BUGGY]  return  equal?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equal?  valueNull  :  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal?  valueNull  :  valueNull;	  return    valueNull?    equal    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
20	[BUG]  [BUGGY]  return  equal,  valueNull?  valueNull  :  equal;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equal,  valueNull?  valueNull  :  equal;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal,  valueNull?  valueNull  :  equal;	  return    valueNull?    equal    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
21	[BUG]  [BUGGY]  return  valueNull?  equal  :  valueUndefined;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equal  :  valueUndefined;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  valueUndefined;	  return    valueNull?    equal    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
22	[BUG]  [BUGGY]  return  valueNull  &&  equivalent;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  equivalent;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equivalent;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
23	[BUG]  [BUGGY]  return  equal;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equal;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
24	[BUG]  [BUGGY]  return  equal  &&  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equal  &&  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
25	[BUG]  [BUGGY]  return  valueNull  &&  equal.equivalent;  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  equal.equivalent;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal.equivalent;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
26	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
27	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
28	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueNull);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
29	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  op);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  op);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
30	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  valueUndefined);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
31	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
32	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
33	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
34	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
35	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(valueUndefined);	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
36	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer;	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
37	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compareTo(value,  op);	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
38	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  op);	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
39	[BUG]  [BUGGY]  return  equal  ||  valueNull;  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equal  ||  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  ||  valueNull;	  return    valueNull    ||    equal;    	non-compiled	[CE]  case,  default,  or  	14	None	replace
40	[BUG]  [BUGGY]  return  valueNull  ||  op;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  ||  op;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  op;	  return    valueNull    ||    equal;    	non-compiled	[CE]  case,  default,  or  	14	None	replace
41	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equal;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equal;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equal;	  return    valueNull    ||    equal;    	non-compiled	[CE]  case,  default,  or  	14	None	replace
42	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(value);	  return    valueNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
43	[BUG]  [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value));  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value));  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value));	  return    valueNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
44	[BUG]  [BUGGY]  return  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull);	  return    valueNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
45	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizerNull?  valueNull  :  equalizer;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
46	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer?  valueNull  :  equalizer;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
47	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer  null?  valueNull  :  equalizer;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  null?  valueNull  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
48	[BUG]  [BUGGY]  return  equalizer.equalizer?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equalizer?  valueNull  :  equalizer;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equalizer?  valueNull  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
49	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	10	None	replace
50	[BUG]  [BUGGY]  return  valueUndefined  ||  valueNull;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueUndefined  ||  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  ||  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	10	None	replace
51	[BUG]  [BUGGY]  return  equalizer  ||  valueNull;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer  ||  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  ||  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	10	None	replace
52	[BUG]  [BUGGY]  case  Token.EQ:  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  case  Token.EQ:  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
53	[BUG]  [BUGGY]  case  Token.EQ:  return!equivalent;  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  case  Token.EQ:  return!equivalent;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!equivalent;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
54	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull;  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  case  Token.EQ:  return  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
55	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  Node  value  =  value.getFirstChild();  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getFirstChild();	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
56	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  break;  [CE]  case,  default,  or  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  Node  value  =  value.getFirstChild();  break;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getFirstChild();  break;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
57	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull  ||  valueNull;  [CE]  case,  default,  or  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  case  Token.EQ:  return  valueNull  ||  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull  ||  valueNull;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
58	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  [CE]  case,  default,  or  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  case  Token.EXPR_RESULT:  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EXPR_RESULT:	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
59	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(value,  valueNull):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueNull):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
60	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
61	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
62	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  valueNull):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
63	[BUG]  [BUGGY]  return  equalizer  &&  valueNull;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer  &&  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull;	  return    valueNull    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
64	[BUG]  [BUGGY]  return  valueUndefined  &&  valueNull;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueUndefined  &&  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  valueNull;	  return    valueNull    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
65	[BUG]  [BUGGY]  return  valueNull  &&  equalizer;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  equalizer;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer;	  return    valueNull    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
66	[BUG]  [BUGGY]  return  equivalent  &&  valueNull;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equivalent  &&  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  valueNull;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
67	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.compare(value,  op);	  return    valueNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
68	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equals(value);	  return    valueNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
69	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  null?  valueNull  :  equalizer.equals(value);	  return    valueNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
70	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer);	  return    valueNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
71	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
72	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
73	[BUG]  [BUGGY]  if(valueNull)  {  return  valueNull;  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(valueNull)  {  return  valueNull;  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
74	[BUG]  [BUGGY]  Node  value  =  value.getNext();  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  Node  value  =  value.getNext();  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getNext();	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
75	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueUndefined;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  valueUndefined;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  valueUndefined;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	10	None	replace
76	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer?  valueNull  :  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  valueNull;	  return    valueNull?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
77	[BUG]  [BUGGY]  return  equalityNull?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalityNull?  valueNull  :  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalityNull?  valueNull  :  valueNull;	  return    valueNull?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
78	[BUG]  [BUGGY]  return  equivalent?  equivalent  :  valueNull;  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equivalent?  equivalent  :  valueNull;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent?  equivalent  :  valueNull;	  return    valueNull?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
79	[BUG]  [BUGGY]  return  equalizer.equals(value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(value):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
80	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(value;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(value;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(value;	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
81	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull,  equalizer);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
82	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull,  equalizer);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
83	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  ==  Token.FUNCTION;	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
84	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NAME;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NAME;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  ==  Token.NAME;	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
85	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  value.getType()!=  Token.FUNCTION;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()!=  Token.FUNCTION;	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
86	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EQUIPMENT;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  ==  Token.EQUIPMENT;	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
87	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  ==  Token.GETELEM;	  return    valueNull;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
88	[BUG]  [BUGGY]  return  valueNull  &&  valueUndefined;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  valueUndefined;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  valueUndefined;	  return    valueNull    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
89	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
90	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
91	[BUG]  [BUGGY]  return  valueNull?  equal  :  value;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equal  :  value;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  value;	  return    valueNull?    equal    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
92	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(value);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.contains(value);	  return    valueNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
93	[BUG]  [BUGGY]  case  Token.EQ:  return!valueUndefined;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  case  Token.EQ:  return!valueUndefined;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!valueUndefined;	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
94	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)-  1;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)-  1;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)-  1;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
95	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op).equivalent;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op).equivalent;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op).equivalent;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
96	[BUG]  [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compareTo(value):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
97	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
98	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueNull,  valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueNull);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
99	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  op);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  op);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
100	[BUG]  [BUGGY]  return  valueNull  -  equal;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  -  equal;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  equal;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
101	[BUG]  [BUGGY]  return  equivalent  &&  equal;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equivalent  &&  equal;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  equal;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
102	[BUG]  [BUGGY]  return  valueNull  &&  this.equivalent;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  this.equivalent;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  this.equivalent;	  return    valueNull    &&    equal;    	non-compiled	[CE]  case,  default,  or  	11	None	replace
103	[BUG]  [BUGGY]  return  valueNull  &&  equality;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  equality;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equality;	  return    valueNull    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
104	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull  &&  equalizer.equals(value);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equals(value);	  return    valueNull    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
105	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
106	[BUG]  [BUGGY]  return  equalizer.equals(value,  op):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(value,  op):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  op):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
107	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(valueNull);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
108	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  valueNull?  equalizer  :  equalizer.equivalent;  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer  :  equalizer.equivalent;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
109	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:      [BUGGY]  return  equalizer.equals(valueUndefined);  [BUGGY]    case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
