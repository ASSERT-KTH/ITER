bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  equivalent?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent?  valueNull  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent?  valueNull  :  valueNull;	  return    equalizer?    valueNull    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	76	None	replace
2	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
3	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equalsIgnoreCase(value);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
4	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.getLastChild();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getLastChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
5	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  break;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  op.getFirstChild();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  op.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
6	[BUG]  [BUGGY]  Node  value  =  value.getNext();  break;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.getNext();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getNext();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
7	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  break;  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  this.value.getFirstChild();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  this.value.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
8	[BUG]  [BUGGY]  Node  value  =  this.value.getLastChild();  break;  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  this.value.getLastChild();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  this.value.getLastChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
9	[BUG]  [BUGGY]  Node  value  =  op.getLastChild();  break;  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  op.getLastChild();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  op.getLastChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
10	[BUG]  [BUGGY]  return  valueNull.equals(value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value):  equalizer.equals(valueNull);	  return    equalizer.equals(value):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
11	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(value):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(value):  equalizer.equals(valueNull);	  return    equalizer.equals(value):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
12	[BUG]  [BUGGY]  return  valueUndefined.equals(value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(value):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(value):  equalizer.equals(valueNull);	  return    equalizer.equals(value):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
13	[BUG]  [BUGGY]  return  valueNull.equals(value);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value);	  return    equalizer.equals(value):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
14	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
15	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
16	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()!=  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()!=  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
17	[BUG]  [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
18	[BUG]  [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
19	[BUG]  [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
20	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueUndefined);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
21	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  equalizer);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  equalizer);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
22	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
23	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  op);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
24	[BUG]  [BUGGY]  return  valueNull.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
25	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(value;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(value;	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value;    	non-compiled	[CE]  case,  default,  or  	80	None	replace
26	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueUndefined;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(valueUndefined;	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value;    	non-compiled	[CE]  case,  default,  or  	80	None	replace
27	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value;	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value;    	non-compiled	[CE]  case,  default,  or  	80	None	replace
28	[BUG]  [BUGGY]  return  equal?  valueNull  :  valueUndefined;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal?  valueNull  :  valueUndefined;	  return    equal?    valueNull    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	19	None	replace
29	[BUG]  [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compareTo(value):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
30	[BUG]  [BUGGY]  return  equalizer.compareTo(valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compareTo(valueNull):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compareTo(valueNull):  equalizer.equals(value);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
31	[BUG]  [BUGGY]  return  equalizer.compareTo(value):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compareTo(value):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compareTo(value):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
32	[BUG]  [BUGGY]  return  equalizer.compareTo(value):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compareTo(value):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compareTo(value):  equalizer.equals(value);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
33	[BUG]  [BUGGY]  return  op;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op;	  return    equal;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
34	[BUG]  [BUGGY]  return  valueNull?  equal.equals(valueNull):  equal;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal.equals(valueNull):  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal.equals(valueNull):  equal;	  return    equal;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
35	[BUG]  [BUGGY]  return  valueNull?  equal  :  valueNull.compareTo(value,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :  valueNull.compareTo(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  valueNull.compareTo(value,  op);	  return    equal;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
36	[BUG]  [BUGGY]  return  valueNull?  equal  :(valueNull  ||  valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :(valueNull  ||  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :(valueNull  ||  valueNull);	  return    equal;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
37	[BUG]  [BUGGY]  return  valueNull?  equal  :(valueNull?  equal  :  valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :(valueNull?  equal  :  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :(valueNull?  equal  :  valueNull);	  return    equal;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
38	[BUG]  [BUGGY]  case  Token.EQ:  return!valueNull;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!valueNull;	  case    Token.EQ:    return!valueUndefined;    	non-compiled	[CE]  case,  default,  or  	93	None	replace
39	[BUG]  [BUGGY]  case  Token.EQ:  return  equivalent;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  equivalent;	  case    Token.EQ:    return!valueUndefined;    	non-compiled	[CE]  case,  default,  or  	93	None	replace
40	[BUG]  [BUGGY]  case  Token.EQ:  return!equal;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!equal;	  case    Token.EQ:    return!valueUndefined;    	non-compiled	[CE]  case,  default,  or  	93	None	replace
41	[BUG]  [BUGGY]  case  Token.EQ:  return!equalquivalent;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!equalquivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!equalquivalent;	  case    Token.EQ:    return!valueUndefined;    	non-compiled	[CE]  case,  default,  or  	93	None	replace
42	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer.equivalent);    	non-compiled	[CE]  case,  default,  or  	97	None	replace
43	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer.equivalent);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer.equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer.equivalent);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer.equivalent);    	non-compiled	[CE]  case,  default,  or  	97	None	replace
44	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer.equivalent):  equalizer.equals(valueNull,  equalizer.equivalent);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer.equivalent):  equalizer.equals(valueNull,  equalizer.equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer.equivalent):  equalizer.equals(valueNull,  equalizer.equivalent);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer.equivalent);    	non-compiled	[CE]  case,  default,  or  	97	None	replace
45	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer.equivalent);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer.equivalent);    	non-compiled	[CE]  case,  default,  or  	97	None	replace
46	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueUndefined);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
47	[BUG]  [BUGGY]  return  valueNull.equals(value,  equalizer):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value,  equalizer):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value,  equalizer):  equalizer.equals(valueUndefined);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
48	[BUG]  [BUGGY]  return  equalizer.equals(value,  op):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  op):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  op):  equalizer.equals(valueUndefined);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
49	[BUG]  [BUGGY]  return  valueUndefined.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(value,  valueNull):  equalizer.equals(valueUndefined);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
50	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueNull)&&  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  valueNull)&&  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueNull)&&  equalizer.equals(valueUndefined);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
51	[BUG]  [BUGGY]  return  valueNull  ||  equality;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  equality;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  equality;	  return    valueNull    &&    equality;    	non-compiled	[CE]  case,  default,  or  	103	None	replace
52	[BUG]  [BUGGY]  return  equality  &&  valueNull;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equality  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equality  &&  valueNull;	  return    valueNull    &&    equality;    	non-compiled	[CE]  case,  default,  or  	103	None	replace
53	[BUG]  [BUGGY]  return  equal,  valueNull  &&  value;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal,  valueNull  &&  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal,  valueNull  &&  value;	  return    valueNull    &&    equality;    	non-compiled	[CE]  case,  default,  or  	103	None	replace
54	[BUG]  [BUGGY]  return  equalities  &&  valueNull;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalities  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalities  &&  valueNull;	  return    valueNull    &&    equality;    	non-compiled	[CE]  case,  default,  or  	103	None	replace
55	[BUG]  [BUGGY]  return  valueNull.equals(valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueUndefined):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueUndefined):  equalizer.equals(valueNull);	  return    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
56	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);	  return    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
57	[BUG]  [BUGGY]  return  valueUndefined.equals(valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueUndefined):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueUndefined):  equalizer.equals(valueNull);	  return    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
58	[BUG]  [BUGGY]  return  valueUndefined.equals(valueUndefined):  valueNull.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueUndefined):  valueNull.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueUndefined):  valueNull.equals(valueUndefined);	  return    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
59	[BUG]  [BUGGY]  return  valueNull.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueUndefined);	  return    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
60	[BUG]  [BUGGY]  return  equalizer  <  null?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  <  null?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  <  null?  valueNull  :  equalizer;	  return    equalizer    null?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	47	None	replace
61	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
62	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
63	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  valueNull.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  valueNull.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  valueNull.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
64	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
65	[BUG]  [BUGGY]  return  valueNull.equals(equivalent):  valueNull.equals(valueNull);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent):  valueNull.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent):  valueNull.equals(valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
66	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  valueNull.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  valueNull.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  valueNull.equals(valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
67	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
68	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
69	[BUG]  [BUGGY]  return  equivalent  ||  valueNull;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent  ||  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  ||  valueNull;	  return    equal    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
70	[BUG]  [BUGGY]  return  equalNull  ||  valueNull;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalNull  ||  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalNull  ||  valueNull;	  return    equal    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
71	[BUG]  [BUGGY]  return  equal  ||  op;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  ||  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  ||  op;	  return    equal    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
72	[BUG]  [BUGGY]  return  equalizer.compareTo(value,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compareTo(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compareTo(value,  op);	  return    valueNull?    valueNull    :    equalizer.compareTo(value,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
73	[BUG]  [BUGGY]  return  valueNull?  equalizer.compareTo(value,  op):  equalizer.compareTo(value,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compareTo(value,  op):  equalizer.compareTo(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compareTo(value,  op):  equalizer.compareTo(value,  op);	  return    valueNull?    valueNull    :    equalizer.compareTo(value,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
74	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compareTo(value,  op));	  return    valueNull?    valueNull    :    equalizer.compareTo(value,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
75	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)+  1;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)+  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)+  1;	  return    valueNull?    valueNull    :    equalizer.compareTo(value,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
76	[BUG]  [BUGGY]  case  Token.EQUENCE:  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQUENCE:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQUENCE:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
77	[BUG]  [BUGGY]  case  Token.NE:  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.NE:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.NE:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
78	[BUG]  [BUGGY]  case  Token.EQUIvalent:  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQUIvalent:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQUIvalent:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
79	[BUG]  [BUGGY]  case  Token.EQUALS:  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQUALS:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQUALS:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
80	[BUG]  [BUGGY]  case  Token.NAME:  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.NAME:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.NAME:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
81	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
82	[BUG]  [BUGGY]  return  valueNull.equals(valueNull,  valueNull):  valueNull.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull,  valueNull):  valueNull.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull,  valueNull):  valueNull.equals(valueNull);	  return    equalizer.equals(valueNull,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
83	[BUG]  [BUGGY]  return  valueNull.equals(valueNull,  valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull,  valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull,  valueNull):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
84	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer.equals(valueNull))  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer.equals(valueNull))  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer.equals(valueNull))  :  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
85	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
86	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
87	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
88	[BUG]  [BUGGY]  return  equalance?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalance?  valueNull  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalance?  valueNull  :  valueNull;	  return    equalityNull?    valueNull    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	77	None	replace
89	[BUG]  [BUGGY]  case  Token.EQ:  return!valueEquivalent;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!valueEquivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!valueEquivalent;	  case    Token.EQ:    return!equivalent;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
90	[BUG]  [BUGGY]  case  Token.EQ:  return!valueEqual;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!valueEqual;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!valueEqual;	  case    Token.EQ:    return!equivalent;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
91	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.NAME;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  value.getType()  ==  Token.NAME;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
92	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.NAME;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()!=  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()!=  Token.NAME;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
93	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.NAME;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.NAME;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
94	[BUG]  [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.NAME;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  value.getType()  ==  Token.NAME;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
95	[BUG]  [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.NAME;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  value.getType()  ==  Token.NAME;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
96	[BUG]  [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.NAME;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  value.getType()  ==  Token.NAME;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
97	[BUG]  [BUGGY]  return  valueNull?  equalizerNull  :  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizerNull  :  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizerNull  :  equalizer.compare(value,  op);	  return    equalizerNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
98	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)+  1;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)+  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)+  1;	  return    equalizerNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
99	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op));  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.compare(value,  op));	  return    equalizerNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
100	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)-  1;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)-  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)-  1;	  return    equalizerNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
101	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  equalizer.equalsIgnoreCase(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
102	[BUG]  [BUGGY]  return  value.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(valueNull):  equalizer.equalsIgnoreCase(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
103	[BUG]  [BUGGY]  return  valueNull.equals(value):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value):  equalizer.equalsIgnoreCase(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
104	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull):  equalizer.equalsIgnoreCase(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
105	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equalsIgnoreCase(valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
106	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equals(valueUndefined);	  return    valueNull?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
107	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)+  1;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)+  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)+  1;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)+    1;    	non-compiled	[CE]  case,  default,  or  	4	None	replace
108	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  2;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  2;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  2;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)+    1;    	non-compiled	[CE]  case,  default,  or  	4	None	replace
109	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op)+  1;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op)+  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op)+  1;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)+    1;    	non-compiled	[CE]  case,  default,  or  	4	None	replace
110	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)/  1;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)/  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)/  1;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)+    1;    	non-compiled	[CE]  case,  default,  or  	4	None	replace
111	[BUG]  [BUGGY]  return  valueNull  ||  equalizer;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  equalizer;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	51	None	replace
112	[BUG]  [BUGGY]  return  valueUndefined  ||  equalizer;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  ||  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  ||  equalizer;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	51	None	replace
113	[BUG]  [BUGGY]  return  valueNull.equals(valueUndefined):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueUndefined):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueUndefined):  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
114	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
115	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull):  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
116	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(valueNull);	  return    valueUndefined?    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	10	None	replace
117	[BUG]  [BUGGY]  return  equalise  &&  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalise  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalise  &&  valueNull;	  return    equivalent    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	66	None	replace
118	[BUG]  [BUGGY]  return  equalized  &&  valueNull;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalized  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalized  &&  valueNull;	  return    equivalent    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	66	None	replace
119	[BUG]  [BUGGY]  Case  Token.EXPR_RESULT:  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Case  Token.EXPR_RESULT:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Case  Token.EXPR_RESULT:	  case    Token.EXPR_RESULT:    	non-compiled	[CE]  case,  default,  or  	58	None	replace
120	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:case  Token.EXPR_RESULT:  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EXPR_RESULT:case  Token.EXPR_RESULT:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EXPR_RESULT:case  Token.EXPR_RESULT:	  case    Token.EXPR_RESULT:    	non-compiled	[CE]  case,  default,  or  	58	None	replace
121	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return!equivalent;  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EXPR_RESULT:  return!equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EXPR_RESULT:  return!equivalent;	  case    Token.EXPR_RESULT:    	non-compiled	[CE]  case,  default,  or  	58	None	replace
122	[BUG]  [BUGGY]  case  TOken.EXPR_RESULT:  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  TOken.EXPR_RESULT:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  TOken.EXPR_RESULT:	  case    Token.EXPR_RESULT:    	non-compiled	[CE]  case,  default,  or  	58	None	replace
123	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  equalizer.equivalent;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	46	None	replace
124	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.valueUndefined;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer?  valueNull  :  equalizer.valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  equalizer.valueUndefined;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	46	None	replace
125	[BUG]  [BUGGY]  return  op.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op.equals(valueUndefined);	  return    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	109	None	replace
126	[BUG]  [BUGGY]  return  equivalent.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent.equals(valueUndefined);	  return    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	109	None	replace
127	[BUG]  [BUGGY]  return  valueUndefined.equals(equivalent);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(equivalent);	  return    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	109	None	replace
128	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  op);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
129	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  op);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
130	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull,  op);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
131	[BUG]  [BUGGY]  return  equalizer.compare(value,  op):  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op):  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op):  equalizer.compare(value,  op);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
132	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  0);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  0);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  0);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
133	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  equivalent);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  equivalent);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
134	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.compare(value,  op):  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.compare(value,  op):  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.compare(value,  op):  equalizer.compare(value,  op);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
135	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  i);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  i);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
136	[BUG]  [BUGGY]  if(equivalent)  {  return  valueNull;  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  if(equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(equivalent)  {  return  valueNull;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
137	[BUG]  [BUGGY]  if(valueUndefined)  {  return  valueNull;  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  if(valueUndefined)  {  return  valueNull;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(valueUndefined)  {  return  valueNull;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
138	[BUG]  [BUGGY]  if(valueNull)  {  return  valueUndefined;  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
139	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return  valueNull;  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  if(valueNull  ||  equal)  {  return  valueNull;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(valueNull  ||  equal)  {  return  valueNull;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
140	[BUG]  [BUGGY]  if(valueNull)  {  return  null;  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(valueNull)  {  return  null;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
141	[BUG]  [BUGGY]  return  valueNull,  valueNull?  valueNull  :  equal;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull,  valueNull?  valueNull  :  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull,  valueNull?  valueNull  :  equal;	  return    equal,    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
142	[BUG]  [BUGGY]  return  equal,  valueNull?  valueNull  :  valueUndefined;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal,  valueNull?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal,  valueNull?  valueNull  :  valueUndefined;	  return    equal,    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
143	[BUG]  [BUGGY]  return  valueUndefined  &&  equalizer;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  equalizer;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
144	[BUG]  [BUGGY]  return  equalizer  &&  valueUndefined;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueUndefined;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
145	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||  equalizer;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||  equalizer;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
146	[BUG]  [BUGGY]  return  valueNull?  equalities  :  valueNull;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalities  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalities  :  valueNull;	  return    valueNull?    equality    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	2	None	replace
147	[BUG]  [BUGGY]  return  valueNull?  equality  :  equal;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equality  :  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equality  :  equal;	  return    valueNull?    equality    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	2	None	replace
148	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)-  1;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)-  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)-  1;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)-    1;    	non-compiled	[CE]  case,  default,  or  	94	None	replace
149	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op)-  1:  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op)-  1:  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op)-  1:  equalizer.compare(value,  op);	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)-    1;    	non-compiled	[CE]  case,  default,  or  	94	None	replace
150	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op)-  1;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op)-  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op)-  1;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)-    1;    	non-compiled	[CE]  case,  default,  or  	94	None	replace
151	[BUG]  [BUGGY]  return  valueNull?  equalizerNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizerNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizerNull  :  equalizer.equals(value);	  return    equalizerNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	68	None	replace
152	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value));  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equals(value));	  return    equalizerNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	68	None	replace
153	[BUG]  [BUGGY]  return  valueNull?  equalizerNull  :  equalizer;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizerNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizerNull  :  equalizer;	  return    equalizerNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	45	None	replace
154	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equivalent;	  return    equalizerNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	45	None	replace
155	[BUG]  [BUGGY]  return  equalizerNull?  valueUndefined  :  equalizer;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueUndefined  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueUndefined  :  equalizer;	  return    equalizerNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	45	None	replace
156	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.null;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.null;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.null;	  return    equalizerNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	45	None	replace
157	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
158	[BUG]  [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
159	[BUG]  [BUGGY]  return  valueNull.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
160	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull)?  valueNull  :  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
161	[BUG]  [BUGGY]  return  equalizer.equals(value)?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value)?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value)?  valueNull  :  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
162	[BUG]  [BUGGY]  return  valueNull  ||  valueUndefined;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  valueUndefined;	  return    valueNull    &&    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	88	None	replace
163	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  valueNull;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueUndefined  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueUndefined  :  valueNull;	  return    valueNull    &&    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	88	None	replace
164	[BUG]  [BUGGY]  return  equalise  &&  valueUndefined;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalise  &&  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalise  &&  valueUndefined;	  return    valueNull    &&    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	88	None	replace
165	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  null?  valueNull  :  equalizer.equals(valueUndefined);	  return    equalizer    null?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
166	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  op);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
167	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  equalizer);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
168	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
169	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  valueNull):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueNull):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	62	None	replace
170	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  valueUndefined):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  valueUndefined):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  valueUndefined):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	62	None	replace
171	[BUG]  [BUGGY]  return  equalizer.equivalent?  valueNull  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equivalent?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equivalent?  valueNull  :  equalizer.equivalent;	  return    valueNull?    equalizer    :    equalizer.equivalent;    	non-compiled	[CE]  case,  default,  or  	108	None	replace
172	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  null?  valueNull  :  equalizer.equivalent;	  return    valueNull?    equalizer    :    equalizer.equivalent;    	non-compiled	[CE]  case,  default,  or  	108	None	replace
173	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
174	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
175	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  equalizer.equals(value);	  return    equalizer.equals(valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
176	[BUG]  [BUGGY]  return  valueNull.equals(value):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value):  equalizer.equals(value);	  return    equalizer.equals(valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
177	[BUG]  [BUGGY]  return  value.equals(valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(valueNull):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(valueNull):  equalizer.equals(value);	  return    equalizer.equals(valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
178	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull):  equalizer.equals(value);	  return    equalizer.equals(valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
179	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueUndefined):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
180	[BUG]  [BUGGY]  return  valueNull?  equalizer.contains(valueUndefined):  equalizer.contains(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.contains(valueUndefined):  equalizer.contains(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.contains(valueUndefined):  equalizer.contains(valueUndefined);	  return    valueNull?    equalizer.equals(valueUndefined):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
181	[BUG]  [BUGGY]  return  valueNull.equals(value,  op):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value,  op):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value,  op):  equalizer.equals(valueNull);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
182	[BUG]  [BUGGY]  return  equalizer.equals(value,  op)&&  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  op)&&  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  op)&&  equalizer.equals(valueNull);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
183	[BUG]  [BUGGY]  return  equalizer.equals(value,  op)||  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  op)||  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  op)||  equalizer.equals(valueNull);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
184	[BUG]  [BUGGY]  return  valueUndefined.equals(value,  op):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(value,  op):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(value,  op):  equalizer.equals(valueNull);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
185	[BUG]  [BUGGY]  return  value.equals(value,  op):  value.equals(valueNull);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(value,  op):  value.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(value,  op):  value.equals(valueNull);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
186	[BUG]  [BUGGY]  return  equal  &&  valueUndefined;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueUndefined;	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
187	[BUG]  [BUGGY]  return  valueUndefined  &&  equal;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  equal;	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
188	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull  &&  valueNull;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull  &&  valueNull;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
189	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull  ||  equal;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull  ||  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull  ||  equal;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
190	[BUG]  [BUGGY]  case  Token.EQ:  return  valueUndefined  ||  valueNull;  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueUndefined  ||  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueUndefined  ||  valueNull;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
191	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull  ||  op;  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull  ||  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull  ||  op;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
192	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull?  valueNull  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull?  valueNull  :  valueNull;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
193	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  equalizer):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  equalizer):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  equalizer):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
194	[BUG]  [BUGGY]  return  valueNull.equals(valueNull,  equalizer):  valueNull.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull,  equalizer):  valueNull.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull,  equalizer):  valueNull.equals(valueNull);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
195	[BUG]  [BUGGY]  return  equalizer.equals(value,  equalizer):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  equalizer):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  equalizer):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
196	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
197	[BUG]  [BUGGY]  return  valueNull.equals(equivalent,  equalizer):  valueNull.equals(valueNull);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent,  equalizer):  valueNull.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent,  equalizer):  valueNull.equals(valueNull);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
198	[BUG]  [BUGGY]  return  valueUndefined  &&  equivalent;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  equivalent;	  return    valueUndefined    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	64	None	replace
199	[BUG]  [BUGGY]  return  this.equivalent  &&  valueNull;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  this.equivalent  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  this.equivalent  &&  valueNull;	  return    valueNull    &&    this.equivalent;    	non-compiled	[CE]  case,  default,  or  	102	None	replace
200	[BUG]  [BUGGY]  return  valueNull  ||  this.equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  this.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  this.equivalent;	  return    valueNull    &&    this.equivalent;    	non-compiled	[CE]  case,  default,  or  	102	None	replace
201	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  this.equivalent;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  this.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  this.equivalent;	  return    valueNull    &&    this.equivalent;    	non-compiled	[CE]  case,  default,  or  	102	None	replace
202	[BUG]  [BUGGY]  return  this.valueNull  &&  this.equivalent;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  this.valueNull  &&  this.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  this.valueNull  &&  this.equivalent;	  return    valueNull    &&    this.equivalent;    	non-compiled	[CE]  case,  default,  or  	102	None	replace
203	[BUG]  [BUGGY]  return  op  &&  this.equivalent;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op  &&  this.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op  &&  this.equivalent;	  return    valueNull    &&    this.equivalent;    	non-compiled	[CE]  case,  default,  or  	102	None	replace
204	[BUG]  [BUGGY]  return  equalizer  ||  valueNull?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  ||  valueNull?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  ||  valueNull?  valueNull  :  equalizer;	  return    valueNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	36	None	replace
205	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equivalent;	  return    valueNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	36	None	replace
206	[BUG]  [BUGGY]  Node  value  =  op.getNext();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  op.getNext();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  op.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  case,  default,  or  	74	None	replace
207	[BUG]  [BUGGY]  Node  value  =  this.value.getNext();  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  this.value.getNext();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  this.value.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  case,  default,  or  	74	None	replace
208	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.getLastChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getLastChild();	  Node    value    =    value.getNext();    	non-compiled	[CE]  case,  default,  or  	74	None	replace
209	[BUG]  [BUGGY]  Node  value  =  value.getNext(),  op);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.getNext(),  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getNext(),  op);	  Node    value    =    value.getNext();    	non-compiled	[CE]  case,  default,  or  	74	None	replace
210	[BUG]  [BUGGY]  Node  value  =  node.getNext();  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  node.getNext();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  node.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  case,  default,  or  	74	None	replace
211	[BUG]  [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value,  equalizer);	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
212	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equals(value,  equalizer);	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
213	[BUG]  [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value,  equalizer));  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value,  equalizer));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(value,  equalizer));	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
214	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer));  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer));	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
215	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)?  valueNull  :  equalizer.compare(value,  op));  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)?  valueNull  :  equalizer.compare(value,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)?  valueNull  :  equalizer.compare(value,  op));	  return    valueNull?    valueNull    :    equalizer.compare(value,    op));    	non-compiled	[CE]  case,  default,  or  	6	None	replace
216	[BUG]  [BUGGY]  return  equalizer.compare(value,  op));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op));	  return    valueNull?    valueNull    :    equalizer.compare(value,    op));    	non-compiled	[CE]  case,  default,  or  	6	None	replace
217	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op));  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op));	  return    valueNull?    valueNull    :    equalizer.compare(value,    op));    	non-compiled	[CE]  case,  default,  or  	6	None	replace
218	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  1);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  1);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  1);	  return    valueNull?    valueNull    :    equalizer.compare(value,    op));    	non-compiled	[CE]  case,  default,  or  	6	None	replace
219	[BUG]  [BUGGY]  return  equalizer.compare(value,  op).equivalent;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op).equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op).equivalent;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
220	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op).equals(equivalent);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op).equals(equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op).equals(equivalent);	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
221	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op).equivalent  :  equalizer.compare(value,  op).equivalent;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op).equivalent  :  equalizer.compare(value,  op).equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op).equivalent  :  equalizer.compare(value,  op).equivalent;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
222	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op).equivalence;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op).equivalence;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op).equivalence;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
223	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op).equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op).equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op).equivalent;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
224	[BUG]  [BUGGY]  return  valueNull.equals(value,  equalizer):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value,  equalizer):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value,  equalizer):  equalizer.equals(valueNull);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
225	[BUG]  [BUGGY]  return  valueUndefined.equals(value,  valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(value,  valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(value,  valueNull):  equalizer.equals(valueNull);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
226	[BUG]  [BUGGY]  return  value.equals(value,  valueNull):  value.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(value,  valueNull):  value.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(value,  valueNull):  value.equals(valueNull);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
227	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op));  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  op));	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
228	[BUG]  [BUGGY]  return  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  op);	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
229	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  op):  equalizer.equals(value,  op);	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
230	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)+  1;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)+  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  op)+  1;	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
231	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined):  equalizer.equals(valueNull,  valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueUndefined);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
232	[BUG]  [BUGGY]  return  valueNull.equals(valueUndefined):  equalizer.equals(valueNull,  valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueUndefined):  equalizer.equals(valueNull,  valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueUndefined):  equalizer.equals(valueNull,  valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueUndefined);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
233	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equals(valueNull,  valueUndefined);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull):  equalizer.equals(valueNull,  valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull):  equalizer.equals(valueNull,  valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueUndefined);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
234	[BUG]  [BUGGY]  return  equalizer.equals(value):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
235	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  valueNull  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  valueNull  :  valueNull;	  return    valueNull?    valueNull    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	49	None	replace
236	[BUG]  [BUGGY]  return  valueNull?  equalizer.equalizer  :  equalizer;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equalizer  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equalizer  :  equalizer;	  return    equalizer.equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
237	[BUG]  [BUGGY]  return  equalizer.equivalent?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equivalent?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equivalent?  valueNull  :  equalizer;	  return    equalizer.equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
238	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equalizer  :  equalizer;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equalizer  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equalizer  :  equalizer;	  return    equalizer.equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
239	[BUG]  [BUGGY]  return  equalizer.equalizer?  valueUndefined  :  equalizer;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equalizer?  valueUndefined  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equalizer?  valueUndefined  :  equalizer;	  return    equalizer.equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
240	[BUG]  [BUGGY]  return  valueNull  ||  equivalent;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  equivalent;	  return    valueNull    &&    equivalent;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
241	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  valueUndefined;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  valueNull  :  valueUndefined;	  return    valueUndefined    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	50	None	replace
242	[BUG]  [BUGGY]  return  equalise  ||  valueNull;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalise  ||  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalise  ||  valueNull;	  return    valueUndefined    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	50	None	replace
243	[BUG]  [BUGGY]  return  valueUndefined  ||  op;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  ||  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  ||  op;	  return    valueUndefined    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	50	None	replace
244	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equivalent;	  return    valueNull    &&    equalizer;    	non-compiled	[CE]  case,  default,  or  	65	None	replace
245	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.booleanValue();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.booleanValue();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.booleanValue();	  return    valueNull    &&    equalizer;    	non-compiled	[CE]  case,  default,  or  	65	None	replace
246	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equals(valueUndefined);	  return    valueNull    &&    equalizer;    	non-compiled	[CE]  case,  default,  or  	65	None	replace
247	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
248	[BUG]  [BUGGY]  return  valueNull  &&  op;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  op;	  return    valueNull    ||    op;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
249	[BUG]  [BUGGY]  return  op  ||  valueNull;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op  ||  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op  ||  valueNull;	  return    valueNull    ||    op;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
250	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  op;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  op;	  return    valueNull    ||    op;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
251	[BUG]  [BUGGY]  return  valueNull  ||  op  +  1;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  op  +  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  op  +  1;	  return    valueNull    ||    op;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
252	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  equalizer.equals(valueNull,  op);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
253	[BUG]  [BUGGY]  return  valueNull.equals(valueNull):  valueNull.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull):  valueNull.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull):  valueNull.equals(valueNull,  op);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
254	[BUG]  [BUGGY]  return  equal  -  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  -  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  -  valueNull;	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
255	[BUG]  [BUGGY]  return  op  -  equal;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op  -  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op  -  equal;	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
256	[BUG]  [BUGGY]  return  valueNull  -  value;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  -  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  value;	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
257	[BUG]  [BUGGY]  return  valueNull  -  equal,  valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  -  equal,  valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  equal,  valueUndefined);	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
258	[BUG]  [BUGGY]  return  valueNull  -  equivalent;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  -  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  equivalent;	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
259	[BUG]  [BUGGY]  return  equalizer  &&  valueNull.equals(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull.equals(value);	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
260	[BUG]  [BUGGY]  return  valueNull  ||  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  equalizer.equals(value);	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
261	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(value)||  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.equals(value)||  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equals(value)||  equalizer.equals(value);	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
262	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(value)&&  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.equals(value)&&  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equals(value)&&  equalizer.equals(value);	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
263	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.equals(value,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equals(value,  equalizer);	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
264	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.EQUIPMENT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  value.getType()  ==  Token.EQUIPMENT;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
265	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()!=  Token.EQUIPMENT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()!=  Token.EQUIPMENT;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
266	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.EQUIPMENT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.EQUIPMENT;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
267	[BUG]  [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.EQUIPMENT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  value.getType()  ==  Token.EQUIPMENT;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
268	[BUG]  [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.EQUIPMENT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  value.getType()  ==  Token.EQUIPMENT;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
269	[BUG]  [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.EQUIPMENT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  value.getType()  ==  Token.EQUIPMENT;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
270	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  null;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  null;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  null;	  return    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
271	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
272	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
273	[BUG]  [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
274	[BUG]  [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
275	[BUG]  [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
276	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  valueUndefined;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer  :  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer  :  valueUndefined;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	75	None	replace
277	[BUG]  [BUGGY]  return  valueNull?  equivalent  :  valueUndefined;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equivalent  :  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equivalent  :  valueUndefined;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	75	None	replace
278	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
279	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
280	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(value,  valueUndefined):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
281	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(value,  valueNull):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
282	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  null):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  null):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  null):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
283	[BUG]  [BUGGY]  return  equalizer.equals(value,  null):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  null):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  null):  equalizer.equals(valueUndefined);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
284	[BUG]  [BUGGY]  return  equal.equivalent  &&  valueNull;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal.equivalent  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal.equivalent  &&  valueNull;	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
285	[BUG]  [BUGGY]  return  valueNull  ||  equal.equivalent;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  equal.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  equal.equivalent;	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
286	[BUG]  [BUGGY]  return  valueNull  &&  equal.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equal.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal.equals(valueUndefined);	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
287	[BUG]  [BUGGY]  return  valueNull  &&  equal.equals(value);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equal.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal.equals(value);	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
288	[BUG]  [BUGGY]  return  valueNull  &&  equal.equals(valueNull);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equal.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal.equals(valueNull);	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
289	[BUG]  [BUGGY]  return  valueNull  &&  equal.getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equal.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal.getType()  ==  Token.EXPR_RESULT;	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
290	[BUG]  [BUGGY]  return  valueNull?  equalizer.contains(value):  equalizer.contains(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.contains(value):  equalizer.contains(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.contains(value):  equalizer.contains(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
291	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(value,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.contains(value,  op);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
292	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.containsValue(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.containsValue(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.containsValue(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
293	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.contains(valueUndefined);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
294	[BUG]  [BUGGY]  return  equalizer.contains(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.contains(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.contains(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
295	[BUG]  [BUGGY]  return  value.equals(value):  value.equals(equivalent);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(value):  value.equals(equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(value):  value.equals(equivalent);	  return    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
296	[BUG]  [BUGGY]  return  value.equals(value):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(value):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(value):  equalizer.equals(value);	  return    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
297	[BUG]  [BUGGY]  return  valueNull.equals(value):  value.equals(value);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value):  value.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value):  value.equals(value);	  return    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
298	[BUG]  [BUGGY]  return  value.equals(equivalent):  value.equals(equivalent);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(equivalent):  value.equals(equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(equivalent):  value.equals(equivalent);	  return    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
299	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  op.getFirstChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  op.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	55	None	replace
300	[BUG]  [BUGGY]  Node  value  =  this.value.getLastChild();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  this.value.getLastChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  this.value.getLastChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	55	None	replace
301	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  this.value.getFirstChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  this.value.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	55	None	replace
302	[BUG]  [BUGGY]  Node  value  =  node.getFirstChild();  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  node.getFirstChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  node.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	55	None	replace
303	[BUG]  [BUGGY]  case  Token.EQ:  return  valueUndefined;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueUndefined;	  case    Token.EQ:    return    valueNull;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
304	[BUG]  [BUGGY]  case  Token.EQ:  return  op;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  op;	  case    Token.EQ:    return    valueNull;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
305	[BUG]  [BUGGY]  case  Token.EQ:  return  valueValue;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueValue;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueValue;	  case    Token.EQ:    return    valueNull;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
306	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()!=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  value.getType()!=  Token.FUNCTION;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
307	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()!=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getType()!=  Token.FUNCTION;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
308	[BUG]  [BUGGY]  return  equalizer  &&  value.getType()!=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  value.getType()!=  Token.FUNCTION;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
309	[BUG]  [BUGGY]  return  equivalent  &&  value.getType()!=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent  &&  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  value.getType()!=  Token.FUNCTION;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
310	[BUG]  [BUGGY]  return  valueUndefined  &&  value.getType()!=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  value.getType()!=  Token.FUNCTION;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
311	[BUG]  [BUGGY]  return  valueNull.equals(equivalent);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	44	None	replace
312	[BUG]  [BUGGY]  return  valueNull.equals(equalizer);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equalizer);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	44	None	replace
313	[BUG]  [BUGGY]  return  op.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op.equals(valueNull);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	44	None	replace
314	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	44	None	replace
315	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(value);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	42	None	replace
316	[BUG]  [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(value);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	42	None	replace
317	[BUG]  [BUGGY]  return  equalizer.equals(value)?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value)?  valueNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value)?  valueNull  :  equalizer.equals(value);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	42	None	replace
318	[BUG]  [BUGGY]  return  valueNull.equals(value)?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(value)?  valueNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(value)?  valueNull  :  equalizer.equals(value);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	42	None	replace
319	[BUG]  [BUGGY]  return  value.equals(valueNull)?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(valueNull)?  valueNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(valueNull)?  valueNull  :  equalizer.equals(value);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	42	None	replace
320	[BUG]  [BUGGY]  return  valueNull.equals(equivalent,  valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent,  valueNull);	  return    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	98	None	replace
321	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  valueNull);	  return    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	98	None	replace
322	[BUG]  [BUGGY]  return  valueNull.equals(equalizer,  valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equalizer,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equalizer,  valueNull);	  return    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	98	None	replace
323	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueNull);	  return    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	98	None	replace
324	[BUG]  [BUGGY]  return  equal?  valueNull  :  value;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal?  valueNull  :  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal?  valueNull  :  value;	  return    valueNull?    equal    :    value;    	non-compiled	[CE]  case,  default,  or  	91	None	replace
325	[BUG]  [BUGGY]  return  valueNull?  equal  :  value.equivalent;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :  value.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  value.equivalent;	  return    valueNull?    equal    :    value;    	non-compiled	[CE]  case,  default,  or  	91	None	replace
326	[BUG]  [BUGGY]  return  valueNull?  equal  :  value.getType();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :  value.getType();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  value.getType();	  return    valueNull?    equal    :    value;    	non-compiled	[CE]  case,  default,  or  	91	None	replace
327	[BUG]  [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(valueUndefined));  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(valueUndefined));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(valueUndefined));	  return    equalizer.equals(valueNull?    valueNull    :    equalizer.equals(value));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
328	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined?  valueNull  :  equalizer.equals(value));  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined?  valueNull  :  equalizer.equals(value));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined?  valueNull  :  equalizer.equals(value));	  return    equalizer.equals(valueNull?    valueNull    :    equalizer.equals(value));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
329	[BUG]  [BUGGY]  return  valueNull.equals(valueNull?  valueNull  :  equalizer.equals(value));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull?  valueNull  :  equalizer.equals(value));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull?  valueNull  :  equalizer.equals(value));	  return    equalizer.equals(valueNull?    valueNull    :    equalizer.equals(value));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
330	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
331	[BUG]  [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
332	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull)?  valueNull  :  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
333	[BUG]  [BUGGY]  return  equal?  valueUndefined  :  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal?  valueUndefined  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal?  valueUndefined  :  valueNull;	  return    valueNull?    equal    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
334	[BUG]  [BUGGY]  return  equivalent?  valueNull  :  equal;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent?  valueNull  :  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent?  valueNull  :  equal;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
335	[BUG]  [BUGGY]  return  equal?  valueNull  :  equivalent;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal?  valueNull  :  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal?  valueNull  :  equivalent;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
336	[BUG]  [BUGGY]  return  equivalent?  valueNull  :  equivalent;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent?  valueNull  :  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent?  valueNull  :  equivalent;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
337	[BUG]  [BUGGY]  return  valueNull?  equivalent  :  equal;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equivalent  :  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equivalent  :  equal;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
338	[BUG]  [BUGGY]  return  equivalent?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent?  valueNull  :  equalizer;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
339	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equivalent;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer?  valueNull  :  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  equivalent;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
340	[BUG]  [BUGGY]  return  equalizer.equals(value):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value):  equalizer.equalsIgnoreCase(value);	  return    valueNull?    equalizer.equals(value):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
341	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equalsIgnoreCase(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equalsIgnoreCase(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equalsIgnoreCase(valueUndefined);	  return    valueNull?    equalizer.equals(value):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
342	[BUG]  [BUGGY]  return  value.compareTo(value,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.compareTo(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.compareTo(value,  op);	  return    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
343	[BUG]  [BUGGY]  return  equalizer.compare(value,  op,  valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op,  valueNull);	  return    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
344	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)||  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)||  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)||  equalizer.compare(value,  op);	  return    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
345	[BUG]  [BUGGY]  return  valueNull.compareTo(value,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.compareTo(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.compareTo(value,  op);	  return    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
346	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)||  equalizer.compare(valueNull,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)||  equalizer.compare(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)||  equalizer.compare(valueNull,  op);	  return    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
347	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  equalizer):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  equalizer):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  equalizer):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
348	[BUG]  [BUGGY]  return  valueNull.equals(valueNull,  equalizer):  valueNull.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueNull,  equalizer):  valueNull.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueNull,  equalizer):  valueNull.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
349	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
350	[BUG]  [BUGGY]  return  equalizer.equals(value,  equalizer):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  equalizer):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  equalizer):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
351	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  valueNull):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
352	[BUG]  [BUGGY]  return  valueUndefined.equals(valueNull,  equalizer):  valueUndefined.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined.equals(valueNull,  equalizer):  valueUndefined.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined.equals(valueNull,  equalizer):  valueUndefined.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
353	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  value):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  value):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  value):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	62	None	replace
354	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.FUNCTION;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  >=  Token.FUNCTION;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
355	[BUG]  [BUGGY]  case  Token.EQ:  return!nequivalent;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!nequivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!nequivalent;	  case    Token.EQ:    return!valueUndefined;    	non-compiled	[CE]  case,  default,  or  	93	None	replace
356	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
357	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer?  valueNull  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  equalizer.equals(valueUndefined);	  return    valueNull?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
358	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equality;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equality;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equality;	  return    equalityNull?    valueNull    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	77	None	replace
359	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compareTo(value,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compareTo(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.compareTo(value,  op);	  return    valueNull?    valueNull    :    equalizer.compareTo(value,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
360	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)-  1;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)-  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)-  1;	  return    valueNull?    valueNull    :    equalizer.compareTo(value,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
361	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  valueUndefined);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
362	[BUG]  [BUGGY]  Case  Token.EQ:  return  valueNull;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Case  Token.EQ:  return  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Case  Token.EQ:  return  valueNull;	  case    Token.EQ:    return    valueNull;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
363	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull  -  valueUndefined;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull  -  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull  -  valueUndefined;	  case    Token.EQ:    return    valueNull;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
364	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  3;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  3;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)+  3;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)+    1;    	non-compiled	[CE]  case,  default,  or  	4	None	replace
365	[BUG]  [BUGGY]  return  equalivalent?  valueNull  :  equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalivalent?  valueNull  :  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalivalent?  valueNull  :  equivalent;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
366	[BUG]  [BUGGY]  return  equality?  valueNull  :  equivalent;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equality?  valueNull  :  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equality?  valueNull  :  equivalent;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
367	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)&&  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
368	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  equalizer.equals(valueUndefined):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
369	[BUG]  [BUGGY]  Node  value  =  value.removeFirstChild();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.removeFirstChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.removeFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	55	None	replace
370	[BUG]  [BUGGY]  Node  value  =  value.cloneTree();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.cloneTree();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.cloneTree();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	55	None	replace
371	[BUG]  [BUGGY]  return  equalizer  ||  equivalent;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  ||  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  ||  equivalent;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	51	None	replace
372	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equals(value,  op);	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
373	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  null?  valueNull  :  equalizer.equals(value,  op);	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
374	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getLastChild().getString().equals( "EQ "));  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getLastChild().getString().equals( "EQ "));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getLastChild().getString().equals( "EQ "));	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
375	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ ")));  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ ")));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ ")));	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
376	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(value.getFirstChild()));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(value.getFirstChild()));	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
377	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ "));  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ "));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ "));	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
378	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsToUndefined(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsToUndefined(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equalsToUndefined(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
379	[BUG]  [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsEquivalent(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull):  equalizer.equalsEquivalent(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull):  equalizer.equalsEquivalent(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
380	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
381	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)&&  equalizer.equals(value);	  return    equalizer.equals(valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
382	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.value;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer?  valueNull  :  equalizer.value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  equalizer.value;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	46	None	replace
383	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op).equivalent;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op).equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.compare(value,  op).equivalent;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
384	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op).equivalent;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op).equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op).equivalent;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
385	[BUG]  [BUGGY]  return  op?  valueNull  :  equalizer.compare(value,  op).equivalent;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op?  valueNull  :  equalizer.compare(value,  op).equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op?  valueNull  :  equalizer.compare(value,  op).equivalent;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
386	[BUG]  [BUGGY]  Case  Token.EQ:  return  valueNull  &&  valueNull;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Case  Token.EQ:  return  valueNull  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Case  Token.EQ:  return  valueNull  &&  valueNull;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
387	[BUG]  [BUGGY]  Case  Token.EQ:  return  valueNull  ||  valueNull;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Case  Token.EQ:  return  valueNull  ||  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Case  Token.EQ:  return  valueNull  ||  valueNull;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
388	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull  -  valueNull;  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull  -  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull  -  valueNull;	  case    Token.EQ:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	57	None	replace
389	[BUG]  [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(value.getFirstChild()));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(value.getFirstChild()));	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
390	[BUG]  [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getLastChild().getString().equals( "EQ "));  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getLastChild().getString().equals( "EQ "));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getLastChild().getString().equals( "EQ "));	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
391	[BUG]  [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ ")));  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ ")));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ ")));	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
392	[BUG]  [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ "));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")||  value.getString().equals( "EQ "));	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
393	[BUG]  [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ "));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ "));	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
394	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)||  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)||  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)||  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	44	None	replace
395	[BUG]  [BUGGY]  return  equivalent  &&  valueUndefined;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent  &&  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent  &&  valueUndefined;	  return    valueNull    &&    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	88	None	replace
396	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.NAME;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  >=  Token.NAME;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
397	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NAME  +  1;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NAME  +  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  ==  Token.NAME  +  1;	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
398	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined,  op):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined,  op):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined,  op):  equalizer.equals(valueNull);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
399	[BUG]  [BUGGY]  return  equalNull  &&  value.equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalNull  &&  value.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalNull  &&  value.equivalent;	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
400	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return!valueUndefined;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EXPR_RESULT:  return!valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EXPR_RESULT:  return!valueUndefined;	  case    Token.EXPR_RESULT:    	non-compiled	[CE]  case,  default,  or  	58	None	replace
401	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  valueUndefined;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  valueUndefined;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	75	None	replace
402	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	75	None	replace
403	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  value):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  value):  equalizer.equals(valueNull);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
404	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueNull)&&  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  valueNull)&&  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueNull)&&  equalizer.equals(valueNull);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
405	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  value);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  value);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
406	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
407	[BUG]  [BUGGY]  Node  value  =  value.getNext()  -  1;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.getNext()  -  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getNext()  -  1;	  Node    value    =    value.getNext();    	non-compiled	[CE]  case,  default,  or  	74	None	replace
408	[BUG]  [BUGGY]  Node  value  =  value.getNext(),  op;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.getNext(),  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.getNext(),  op;	  Node    value    =    value.getNext();    	non-compiled	[CE]  case,  default,  or  	74	None	replace
409	[BUG]  [BUGGY]  return  valueNull  &&  this.value;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  this.value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  this.value;	  return    valueNull    &&    this.equivalent;    	non-compiled	[CE]  case,  default,  or  	102	None	replace
410	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.value;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.value;	  return    valueNull    &&    equalizer;    	non-compiled	[CE]  case,  default,  or  	65	None	replace
411	[BUG]  [BUGGY]  return  equivalent?  equal  :  valueUndefined;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equivalent?  equal  :  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equivalent?  equal  :  valueUndefined;	  return    valueNull?    equal    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
412	[BUG]  [BUGGY]  return  equalizer.compare(value,  op):  equalizer.compare(value,  equivalent);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op):  equalizer.compare(value,  equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op):  equalizer.compare(value,  equivalent);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
413	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  valueNull;  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  if(valueNull  ||  valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(valueNull  ||  valueNull)  {  return  valueNull;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
414	[BUG]  [BUGGY]  changed(value,  op)  {  return  valueNull;  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  changed(value,  op)  {  return  valueNull;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	changed(value,  op)  {  return  valueNull;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
415	[BUG]  [BUGGY]  valueNull  =  valueUndefined?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  valueNull  =  valueUndefined?  valueNull  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	valueNull  =  valueUndefined?  valueNull  :  valueNull;	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
416	[BUG]  [BUGGY]  return  equal  =  valueNull  ||  valueNull;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  =  valueNull  ||  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  =  valueNull  ||  valueNull;	  return    equal    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
417	[BUG]  [BUGGY]  return  equal  ||  valueNull  +  1;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  ||  valueNull  +  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  ||  valueNull  +  1;	  return    equal    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
418	[BUG]  [BUGGY]  return  equalizerNull  &&  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull  &&  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull  &&  equalizer.equals(value);	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
419	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(value;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.equals(value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equals(value;	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
420	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EMPTY;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EMPTY;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  ==  Token.EMPTY;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
421	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EQUOTE;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.EQUOTE;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  ==  Token.EQUOTE;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
422	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull;	  return    valueNull?    equalizer.equals(value):    equalizer.equals(value;    	non-compiled	[CE]  case,  default,  or  	80	None	replace
423	[BUG]  [BUGGY]  return  equal,  valueNull?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal,  valueNull?  valueNull  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal,  valueNull?  valueNull  :  valueNull;	  return    equal,    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
424	[BUG]  [BUGGY]  return  equal,  valueNull?  valueNull  :  value;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal,  valueNull?  valueNull  :  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal,  valueNull?  valueNull  :  value;	  return    equal,    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
425	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.value;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.value;	  return    equalizerNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	45	None	replace
426	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.valueUndefined;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.valueUndefined;	  return    equalizerNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	45	None	replace
427	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getType();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getType();	  return    valueNull?    valueNull    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	49	None	replace
428	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  value.getType()  >=  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
429	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueNull):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
430	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer)&&  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	82	None	replace
431	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueValue;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  valueValue;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  valueValue;	  return    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
432	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equals(valueNull);	  return    equalizerNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	68	None	replace
433	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
434	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)&&  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
435	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equalsEquivalent(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equalsEquivalent(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equalsEquivalent(value);	  return    valueNull?    equalizer.equals(value):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
436	[BUG]  [BUGGY]  case  Token.EQ:  return!valueValue;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!valueValue;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!valueValue;	  case    Token.EQ:    return!equivalent;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
437	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueUndefined):  equalizer.equals(valueUndefined);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
438	[BUG]  [BUGGY]  return  equalizer!=  null?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer!=  null?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer!=  null?  valueNull  :  equalizer;	  return    equalizer    null?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	47	None	replace
439	[BUG]  [BUGGY]  return  equalizer  ==  null?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  ==  null?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  ==  null?  valueNull  :  equalizer;	  return    equalizer    null?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	47	None	replace
440	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.contains(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.contains(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.contains(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
441	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.contains(value);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.contains(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  null?  valueNull  :  equalizer.contains(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
442	[BUG]  [BUGGY]  return  equalizer.contains(valueNull?  valueNull  :  equalizer.contains(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.contains(valueNull?  valueNull  :  equalizer.contains(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.contains(valueNull?  valueNull  :  equalizer.contains(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
443	[BUG]  [BUGGY]  return  valueNull.equals(valueUndefined)&&  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(valueUndefined)&&  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(valueUndefined)&&  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	109	None	replace
444	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueNull)&&  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueNull)&&  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueNull)&&  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
445	[BUG]  [BUGGY]  return  equalizer.equals(valueNull).equals(valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull).equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull).equals(valueUndefined);	  return    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
446	[BUG]  [BUGGY]  return  valueNull  -  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  -  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  valueNull;	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
447	[BUG]  [BUGGY]  return  valueNull  -  valueUndefined;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  -  valueUndefined;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  valueUndefined;	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
448	[BUG]  [BUGGY]  return  valueNull  -  value.getType();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  -  value.getType();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  value.getType();	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
449	[BUG]  [BUGGY]  Node  value  =  value.removeFirstChild();  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  value.removeFirstChild();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  value.removeFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
450	[BUG]  [BUGGY]  Node  value  =  node.getFirstChild();  break;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  node.getFirstChild();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  node.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
451	[BUG]  [BUGGY]  return  valueNull  ||  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  ||  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  ||  equalizer.compare(value,  op);	  return    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
452	[BUG]  [BUGGY]  return  equalizer.compare(value,  valueNull);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  valueNull);	  return    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	3	None	replace
453	[BUG]  [BUGGY]  return  equal  &&  ValueUtil.isEquivalentValue(value.getFirstChild());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  ValueUtil.isEquivalentValue(value.getFirstChild());  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  ValueUtil.isEquivalentValue(value.getFirstChild());	  return    equivalent    &&    equal;    	non-compiled	[CE]  case,  default,  or  	101	None	replace
454	[BUG]  [BUGGY]  return  equal  &&  ValueUtil.isEquivalentValue(value.getLastChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  ValueUtil.isEquivalentValue(value.getLastChild());  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  ValueUtil.isEquivalentValue(value.getLastChild());	  return    equivalent    &&    equal;    	non-compiled	[CE]  case,  default,  or  	101	None	replace
455	[BUG]  [BUGGY]  return  equal  &&  ValueUtil.isEqualValue(value.getLastChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  ValueUtil.isEqualValue(value.getLastChild());  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  ValueUtil.isEqualValue(value.getLastChild());	  return    equivalent    &&    equal;    	non-compiled	[CE]  case,  default,  or  	101	None	replace
456	[BUG]  [BUGGY]  return  equal  &&  ValueUtil.isEqualValue(value.getFirstChild());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  ValueUtil.isEqualValue(value.getFirstChild());  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  ValueUtil.isEqualValue(value.getFirstChild());	  return    equivalent    &&    equal;    	non-compiled	[CE]  case,  default,  or  	101	None	replace
457	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer.equivalent);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer.equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer.equivalent);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer.equivalent);    	non-compiled	[CE]  case,  default,  or  	97	None	replace
458	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull,  equalizer.equivalent);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull,  equalizer.equivalent);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value):  equalizer.equals(valueNull,  equalizer.equivalent);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer.equivalent);    	non-compiled	[CE]  case,  default,  or  	97	None	replace
459	[BUG]  [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(valueNull));  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(valueNull));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull?  valueNull  :  equalizer.equals(valueNull));	  return    equalizer.equals(valueNull?    valueNull    :    equalizer.equals(value));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
460	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueNull  ||  op;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  valueNull  ||  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  valueNull  ||  op;	  return    valueNull    ||    op;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
461	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueNull  +  op;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  valueNull  +  op;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  valueNull  +  op;	  return    valueNull    ||    op;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
462	[BUG]  [BUGGY]  return  equality?  valueNull  :  valueNull;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equality?  valueNull  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equality?  valueNull  :  valueNull;	  return    valueNull?    equality    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	2	None	replace
463	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  null?  valueNull  :  equalizer.equals(value,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  null?  valueNull  :  equalizer.equals(value,  equalizer);	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
464	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer?  valueNull  :  equalizer.equals(value,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer?  valueNull  :  equalizer.equals(value,  equalizer);	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
465	[BUG]  [BUGGY]  case  Token.EQUIPMENT:  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQUIPMENT:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQUIPMENT:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
466	[BUG]  [BUGGY]  case  Token.NUMBER:  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.NUMBER:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.NUMBER:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
467	[BUG]  [BUGGY]  Case  Token.EQ:  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Case  Token.EQ:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Case  Token.EQ:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
468	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)-  2;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)-  2;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)-  2;	  return    valueNull?    valueNull    :    equalizer.compare(value,    op)-    1;    	non-compiled	[CE]  case,  default,  or  	94	None	replace
469	[BUG]  [BUGGY]  return  equalizer.compareTo(value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compareTo(value):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compareTo(value):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
470	[BUG]  [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compareTo(value):  equalizer.equals(valueNull);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
471	[BUG]  [BUGGY]  return  valueNull?  equalizer.equivalent  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equivalent  :  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equivalent  :  equalizer.equivalent;	  return    valueNull?    equalizer    :    equalizer.equivalent;    	non-compiled	[CE]  case,  default,  or  	108	None	replace
472	[BUG]  [BUGGY]  return  equalizer.equalizer?  valueNull  :  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equalizer?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equalizer?  valueNull  :  equalizer.equivalent;	  return    valueNull?    equalizer    :    equalizer.equivalent;    	non-compiled	[CE]  case,  default,  or  	108	None	replace
473	[BUG]  [BUGGY]  return  equal  &&  valueNull  +  1;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueNull  +  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull  +  1;	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
474	[BUG]  [BUGGY]  return  equal  &&  valueNull  ||  equal;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal  &&  valueNull  ||  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal  &&  valueNull  ||  equal;	  return    equal    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
475	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.evaluate(value,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.evaluate(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.evaluate(value,  op);	  return    valueNull    &&    equalizer;    	non-compiled	[CE]  case,  default,  or  	65	None	replace
476	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.evaluate(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.evaluate(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.evaluate(value);	  return    valueNull    &&    equalizer;    	non-compiled	[CE]  case,  default,  or  	65	None	replace
477	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined,  equalizer);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
478	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer,  equalizer);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(valueNull,  equalizer,  equalizer);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
479	[BUG]  [BUGGY]  if(valueNull)  {  return  value;  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  if(valueNull)  {  return  value;  }  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	if(valueNull)  {  return  value;  }	  if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  case,  default,  or  	73	None	replace
480	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.equals(value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.equals(value;	  return    equalizerNull?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	68	None	replace
481	[BUG]  [BUGGY]  return  valueNull.equals(equivalent)?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent)?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent)?  valueNull  :  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
482	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
483	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)&&  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)&&  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)&&  equalizer.compare(value,  op);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
484	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)?  valueNull  :  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)?  valueNull  :  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)?  valueNull  :  equalizer.compare(value,  op);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
485	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op  +  1);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op):  equalizer.compare(value,  op  +  1);	  return    valueNull?    equalizer.compare(value,    op):    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	5	None	replace
486	[BUG]  [BUGGY]  Node  value  =  op.getNext();  break;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  op.getNext();  break;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  op.getNext();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
487	[BUG]  [BUGGY]  Case.EXPR_RESULT:  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Case.EXPR_RESULT:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Case.EXPR_RESULT:	  case    Token.EXPR_RESULT:    	non-compiled	[CE]  case,  default,  or  	58	None	replace
488	[BUG]  [BUGGY]  Case  token.EXPR_RESULT:  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Case  token.EXPR_RESULT:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Case  token.EXPR_RESULT:	  case    Token.EXPR_RESULT:    	non-compiled	[CE]  case,  default,  or  	58	None	replace
489	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)|  1;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)|  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizerNull?  valueNull  :  equalizer.compare(value,  op)|  1;	  return    equalizerNull?    valueNull    :    equalizer.compare(value,    op);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
490	[BUG]  [BUGGY]  return  value.equals(equivalent):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(equivalent):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(equivalent):  equalizer.equals(valueNull);	  return    equalizer.equals(value):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
491	[BUG]  [BUGGY]  return  valueNull? "EQ "  :  equal;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull? "EQ "  :  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull? "EQ "  :  equal;	  return    equal;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
492	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.GETELEM  :  equalizer;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.GETELEM  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.GETELEM  :  equalizer;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
493	[BUG]  [BUGGY]  return  op  &&  value.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op  &&  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
494	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.GETELEM  :  equal;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.GETELEM  :  equal;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.GETELEM  :  equal;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	87	None	replace
495	[BUG]  [BUGGY]  return  equalizer  ||  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  ||  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  ||  equalizer.equals(valueNull);	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	51	None	replace
496	[BUG]  [BUGGY]  return  equalizer  ||  equalizer.equivalent;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  ||  equalizer.equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  ||  equalizer.equivalent;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	51	None	replace
497	[BUG]  [BUGGY]  return  equalizer  ||  equalizer;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  ||  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  ||  equalizer;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  case,  default,  or  	51	None	replace
498	[BUG]  [BUGGY]  return  op  &&  value.getType()  ==  Token.EQUIPMENT;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  op  &&  value.getType()  ==  Token.EQUIPMENT;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  op  &&  value.getType()  ==  Token.EQUIPMENT;	  return    valueNull    &&    value.getType()    ==    Token.EQUIPMENT;    	non-compiled	[CE]  case,  default,  or  	86	None	replace
499	[BUG]  [BUGGY]  return  value.equals(equivalent):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  value.equals(equivalent):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  value.equals(equivalent):  equalizer.equals(value);	  return    equalizer.equals(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
500	[BUG]  [BUGGY]  return  equalizer.equals(value,  op)?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  op)?  valueNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  op)?  valueNull  :  equalizer.equals(value);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
501	[BUG]  [BUGGY]  return  equalizer.equals(value,  op)?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  op)?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  op)?  valueNull  :  equalizer.equals(valueNull);	  return    equalizer.equals(value,    op):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
502	[BUG]  [BUGGY]  case  Token.EQ:  return!requivalent;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!requivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!requivalent;	  case    Token.EQ:    return!valueUndefined;    	non-compiled	[CE]  case,  default,  or  	93	None	replace
503	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueNull):  equalizer.equals(value,  op);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
504	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(valueUndefined):  equalizer.equals(value,  op);	  return    valueNull?    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
505	[BUG]  [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equals(value,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compareTo(value):  equalizer.equals(value,  equalizer);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
506	[BUG]  [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equivalent.equals(value);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compareTo(value):  equalizer.equivalent.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compareTo(value):  equalizer.equivalent.equals(value);	  return    valueNull?    equalizer.compareTo(value):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
507	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equivalent;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equivalent;	  return    valueNull    &&    equivalent;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
508	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(valueUndefined);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
509	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueUndefined  :  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueUndefined  :  value;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	75	None	replace
510	[BUG]  [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  valueUndefined);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueUndefined);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
511	[BUG]  [BUGGY]  return  equal(valueNull,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equal(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equal(valueNull,  op);	  return    equivalent    &&    equal;    	non-compiled	[CE]  case,  default,  or  	101	None	replace
512	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  valueNull  :  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  valueNull  :  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer)?  valueNull  :  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
513	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull,  equalizer);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer)?  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueNull,  equalizer);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
514	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueUndefined,  equalizer);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueUndefined,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer)?  equalizer.equals(valueNull,  equalizer):  equalizer.equals(valueUndefined,  equalizer);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
515	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.remove(value);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.remove(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.remove(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
516	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(value)||  equalizer.contains(value);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.contains(value)||  equalizer.contains(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.contains(value)||  equalizer.contains(value);	  return    valueNull?    valueNull    :    equalizer.contains(value);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
517	[BUG]  [BUGGY]  case  Token.EQ:  return!value;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return!value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return!value;	  case    Token.EQ:    return!equivalent;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
518	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.NAME  :  value.getString();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.NAME  :  value.getString();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.NAME  :  value.getString();	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
519	[BUG]  [BUGGY]  return  valueNull?  value.getType()  <  Token.NAME  :  value.getString();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  <  Token.NAME  :  value.getString();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  <  Token.NAME  :  value.getString();	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
520	[BUG]  [BUGGY]  return  valueNull?  value.getType()!=  Token.NAME  :  value.getString();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()!=  Token.NAME  :  value.getString();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()!=  Token.NAME  :  value.getString();	  return    valueNull    &&    value.getType()    ==    Token.NAME;    	non-compiled	[CE]  case,  default,  or  	84	None	replace
521	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined?  equalizer.equals(valueNull):  equalizer.equals(value);	  return    valueUndefined?    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	10	None	replace
522	[BUG]  [BUGGY]  return  valueNull?  equals  :  valueNull;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equals  :  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equals  :  valueNull;	  return    valueNull?    equality    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	2	None	replace
523	[BUG]  [BUGGY]  return  valueNull  -  valueValue;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  -  valueValue;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  -  valueValue;	  return    valueNull    -    equal;    	non-compiled	[CE]  case,  default,  or  	100	None	replace
524	[BUG]  [BUGGY]  Node  value  =  op.getLastChild();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  Node  value  =  op.getLastChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	Node  value  =  op.getLastChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	55	None	replace
525	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer)&&  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer)&&  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer)&&  equalizer.equals(valueUndefined);	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
526	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer).equivalent;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer).equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  equalizer).equivalent;	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
527	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  equalizer):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  equalizer):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  equalizer):  equalizer.equals(valueUndefined);	  return    valueNull?    valueNull    :    equalizer.equals(value,    equalizer);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
528	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equalsIgnoreCase(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
529	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)&&  equalizer.equalsIgnoreCase(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
530	[BUG]  [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent):  equalizer.equalsIgnoreCase(value);	  return    equalizer.equals(valueNull):    equalizer.equalsIgnoreCase(value);    	non-compiled	[CE]  case,  default,  or  	7	None	replace
531	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getFirstChild();  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getFirstChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getFirstChild();	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
532	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getFirstChild().getNext();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getFirstChild().getNext();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getFirstChild().getNext();	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
533	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getValue();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getValue();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getValue();	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	83	None	replace
534	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
535	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)&&  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)&&  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  op)&&  equalizer.equals(value,  op);	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
536	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)-  1;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)-  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  op)-  1;	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
537	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)||  equalizer.equals(value,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.equals(value,  op)||  equalizer.equals(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.equals(value,  op)||  equalizer.equals(value,  op);	  return    valueNull?    valueNull    :    equalizer.equals(value,    op);    	non-compiled	[CE]  case,  default,  or  	38	None	replace
538	[BUG]  [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  valueNull);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  valueNull);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    valueNull);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
539	[BUG]  [BUGGY]  return  equalizer!=  null?  valueNull  :  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer!=  null?  valueNull  :  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer!=  null?  valueNull  :  equalizer.equals(value);	  return    equalizer    null?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
540	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull?  valueNull  :  equalizer;	  case    Token.EQ:    return    valueNull;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
541	[BUG]  [BUGGY]  case  Token.EQ:  return  valueNull?  valueNull  :  value;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQ:  return  valueNull?  valueNull  :  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQ:  return  valueNull?  valueNull  :  value;	  case    Token.EQ:    return    valueNull;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
542	[BUG]  [BUGGY]  return  equalis  &&  valueNull;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalis  &&  valueNull;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalis  &&  valueNull;	  return    equivalent    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	66	None	replace
543	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(valueLabel);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equalizer.equals(valueLabel);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equalizer.equals(valueLabel);	  return    valueNull    &&    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
544	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(value;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equals(value;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	42	None	replace
545	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.EMPTY;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.EMPTY;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.EMPTY;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
546	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.NAME;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.NAME;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.NAME;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
547	[BUG]  [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.EQUIP;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.EQUIP;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  value.getType()  ==  Token.FUNCTION  :  value.getType()!=  Token.EQUIP;	  return    valueNull    &&    value.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	85	None	replace
548	[BUG]  [BUGGY]  return  equalizer.equals(valueNull?  valueUndefined  :  equalizer.equals(value));  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull?  valueUndefined  :  equalizer.equals(value));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull?  valueUndefined  :  equalizer.equals(value));	  return    equalizer.equals(valueNull?    valueNull    :    equalizer.equals(value));    	non-compiled	[CE]  case,  default,  or  	43	None	replace
549	[BUG]  [BUGGY]  return  equalizer.compare(value,  op)||  equalizer.compare(value,  op)||  equalizer.compare(valueNull,  op));  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.compare(value,  op)||  equalizer.compare(value,  op)||  equalizer.compare(valueNull,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.compare(value,  op)||  equalizer.compare(value,  op)||  equalizer.compare(valueNull,  op));	  return    valueNull?    valueNull    :    equalizer.compare(value,    op));    	non-compiled	[CE]  case,  default,  or  	6	None	replace
550	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)||  equalizer.compare(value,  op));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compare(value,  op)||  equalizer.compare(value,  op));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compare(value,  op)||  equalizer.compare(value,  op));	  return    valueNull?    valueNull    :    equalizer.compare(value,    op));    	non-compiled	[CE]  case,  default,  or  	6	None	replace
551	[BUG]  [BUGGY]  return  valueNull?  equalizer.compare(value,  op).equivalent  :  equalizer.compare(value,  op);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.compare(value,  op).equivalent  :  equalizer.compare(value,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.compare(value,  op).equivalent  :  equalizer.compare(value,  op);	  return    valueNull?    valueNull    :    equalizer.compare(value,    op).equivalent;    	non-compiled	[CE]  case,  default,  or  	95	None	replace
552	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined)&&  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueUndefined)&&  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueUndefined)&&  equalizer.equals(valueNull);	  return    equalizer.equals(valueUndefined):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
553	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)|  1;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)|  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  equalizer.compareTo(value,  op)|  1;	  return    valueNull?    valueNull    :    equalizer.compareTo(value,    op);    	non-compiled	[CE]  case,  default,  or  	37	None	replace
554	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  op)?  valueNull  :  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  op)?  valueNull  :  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  op)?  valueNull  :  equalizer.equals(valueNull,  op);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
555	[BUG]  [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equals(equivalent):  equalizer.equals(valueNull,  op);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
556	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  op)?  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  op);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  op)?  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  op);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  op)?  equalizer.equals(valueNull,  op):  equalizer.equals(valueNull,  op);	  return    equalizer.equals(valueNull):    equalizer.equals(valueNull,    op);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
557	[BUG]  [BUGGY]  return  valueNull?  equalizer.equals(value,  null):  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer.equals(value,  null):  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer.equals(value,  null):  equalizer.equals(value);	  return    valueNull?    equalizer.equals(value,    valueNull):    equalizer.equals(value);    	non-compiled	[CE]  case,  default,  or  	62	None	replace
558	[BUG]  [BUGGY]  return  valueNull?  equal  :  valueUndefined  +  1;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :  valueUndefined  +  1;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  valueUndefined  +  1;	  return    valueNull?    equal    :    valueUndefined;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
559	[BUG]  [BUGGY]  return  valueNull?  equal  :  value.getValue();  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :  value.getValue();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  value.getValue();	  return    valueNull?    equal    :    value;    	non-compiled	[CE]  case,  default,  or  	91	None	replace
560	[BUG]  [BUGGY]  return  valueNull?  equal  :  value.getFirstChild();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :  value.getFirstChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  value.getFirstChild();	  return    valueNull?    equal    :    value;    	non-compiled	[CE]  case,  default,  or  	91	None	replace
561	[BUG]  [BUGGY]  return  valueNull?  equal  :  value.getName();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equal  :  value.getName();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equal  :  value.getName();	  return    valueNull?    equal    :    value;    	non-compiled	[CE]  case,  default,  or  	91	None	replace
562	[BUG]  [BUGGY]  return  valueUndefined  &&  equality;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueUndefined  &&  equality;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueUndefined  &&  equality;	  return    valueUndefined    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	64	None	replace
563	[BUG]  [BUGGY]  case  Token.EAGER:  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EAGER:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EAGER:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
564	[BUG]  [BUGGY]  case  Token.EXPECTED:  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EXPECTED:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EXPECTED:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
565	[BUG]  [BUGGY]  case  Token.EQUIP:  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  case  Token.EQUIP:  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	case  Token.EQUIP:	  case    Token.EQ:    	non-compiled	[CE]  case,  default,  or  	52	None	replace
566	[BUG]  [BUGGY]  return  equalise?  valueNull  :  equivalent;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalise?  valueNull  :  equivalent;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalise?  valueNull  :  equivalent;	  return    equivalent?    equivalent    :    valueNull;    	non-compiled	[CE]  case,  default,  or  	78	None	replace
567	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  value;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  equalizer  :  value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  equalizer  :  value;	  return    valueNull?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	36	None	replace
568	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ "));  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ "));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ "));	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
569	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||  equalizer.equals(value);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||  equalizer.equals(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||  equalizer.equals(value);	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
570	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")));  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NAME  &&  value.getString().equals( "EQ ")));	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  case,  default,  or  	63	None	replace
571	[BUG]  [BUGGY]  return  equalizer.equals(value,  equalizer);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  equalizer);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  equalizer);	  return    equalizer.equals(valueNull,    equalizer);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
572	[BUG]  [BUGGY]  return  valueNull  &&  equal.equalsIgnoreCase(value);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equal.equalsIgnoreCase(value);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal.equalsIgnoreCase(value);	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
573	[BUG]  [BUGGY]  return  valueNull  &&  equal.equals(value;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull  &&  equal.equals(value;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull  &&  equal.equals(value;	  return    valueNull    &&    equal.equivalent;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
574	[BUG]  [BUGGY]  return  valueNull.equalizer?  valueNull  :  equalizer;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull.equalizer?  valueNull  :  equalizer;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull.equalizer?  valueNull  :  equalizer;	  return    equalizer.equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
575	[BUG]  [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  valueNull  :  equalizer.equals(valueNull);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(valueNull,  equalizer)?  valueNull  :  equalizer.equals(valueNull);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(valueNull,  equalizer)?  valueNull  :  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull,    equalizer):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
576	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getValue();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getValue();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getValue();	  return    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
577	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getFirstChild();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  value.getFirstChild();  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  value.getFirstChild();	  return    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
578	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  item;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  valueNull?  valueNull  :  item;  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  valueNull?  valueNull  :  item;	  return    valueNull?    valueNull    :    equal;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
579	[BUG]  [BUGGY]  return  equalizer.equals(value,  valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  compareToUndefined(Node  value,  int  op)  {  boolean  valueUndefined  =  ((Token.NAME  ==  value.getType()  &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:        [BUGGY]  return  equalizer.equals(value,  valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1131	1131	3	replace	return  equalizer.equals(value,  valueNull)?  equalizer.equals(valueNull):  equalizer.equals(valueUndefined);	  return    equalizer.equals(value,    valueNull):    equalizer.equals(valueNull);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
