bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(leftVal.getType()  |  Token.VAR)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  |  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  |  Token.VAR)  {	  switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
2	[BUG]  [BUGGY]  switch(leftVal.getType()  +  Token.VAR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  +  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  +  Token.VAR)  {	  switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
3	[BUG]  [BUGGY]  switch(leftVal.getType()  >  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  >  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  >  Token.VAR)  {	  switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
4	[BUG]  [BUGGY]  switch(leftVal.getType()  <  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  <  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  <  Token.VAR)  {	  switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
5	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.FALSE)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.FALSE)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.FALSE)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FALSE)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
6	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FALSE)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FALSE)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.FALSE)  {  return  leftVal;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FALSE)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
7	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.UNKNOWN)  {  return  n;  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.UNKNOWN)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.UNKNOWN)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FALSE)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
8	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FALSE)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
9	[BUG]  [BUGGY]  switch(leftVal.getType(),  leftVal)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType(),  leftVal)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType(),  leftVal)  {	  switch(left.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
10	[BUG]  [BUGGY]  switch(left.getType(),  n)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType(),  n)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType(),  n)  {	  switch(left.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
11	[BUG]  [BUGGY]  switch(left.getType(),  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType(),  null)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType(),  null)  {	  switch(left.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
12	[BUG]  [BUGGY]  switch(leftVal.getType(),  left)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType(),  left)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType(),  left)  {	  switch(left.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
13	[BUG]  [BUGGY]  switch(left.getType(),  value)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType(),  value)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType(),  value)  {	  switch(left.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
14	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION)  {  return  leftVal;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
15	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION)  {  return  null;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION)  {  return  null;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION)  {  return  null;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
16	[BUG]  [BUGGY]  case  Token.CALL:  n  =  leftVal.getType();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  n  =  leftVal.getType();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  n  =  leftVal.getType();	  case    Token.CALL:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
17	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
18	[BUG]  [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
19	[BUG]  [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &&  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
20	[BUG]  [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NAME)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
21	[BUG]  [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.getType()  ||  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
22	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()!=  Token.NAME)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
23	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
24	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
25	[BUG]  [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
26	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.VAR)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
27	[BUG]  [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
28	[BUG]  [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
29	[BUG]  [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
30	[BUG]  [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
31	[BUG]  [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.getType()  ||  leftVal.getType()  ==  Token.BLOCK)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
32	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
33	[BUG]  [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
34	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()  ==  Token.NUMBER)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
35	[BUG]  [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
36	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
37	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NOT)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NOT)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
38	[BUG]  [BUGGY]  Switch(leftVal.getType(),  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  null)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  null)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
39	[BUG]  [BUGGY]  Switch(leftVal.getType(),  n)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  n)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  n)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
40	[BUG]  [BUGGY]  Switch(left.getType(),  leftVal)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType(),  leftVal)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType(),  leftVal)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
41	[BUG]  [BUGGY]  Switch(leftVal.getType(),  left)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  left)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  left)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
42	[BUG]  [BUGGY]  Switch(leftVal.getType(),  false)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  false)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
43	[BUG]  [BUGGY]  Switch(n.getType(),  leftVal)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(n.getType(),  leftVal)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(n.getType(),  leftVal)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
44	[BUG]  [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.VAR)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
45	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()  ==  Token.VAR)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
46	[BUG]  [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  &&  leftVal.getType()  ==  Token.VAR)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
47	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.VAR)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
48	[BUG]  [BUGGY]  Switch(n.getType()  ||  leftVal.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(n.getType()  ||  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(n.getType()  ||  leftVal.getType()  ==  Token.VAR)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
49	[BUG]  [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
50	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()  ==  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
51	[BUG]  [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  &&  leftVal.getType()  ==  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
52	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
53	[BUG]  [BUGGY]  Switch(n.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(n.getType()  ||  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(n.getType()  ||  leftVal.getType()  ==  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
54	[BUG]  [BUGGY]  Switch(leftVal.getType()  +|  leftVal.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  +|  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  +|  leftVal.getType()  ==  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
55	[BUG]  [BUGGY]  switch(left.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
56	[BUG]  [BUGGY]  switch(leftVal.toBoolean()?  Token.FALSE  :  rightVal.toBoolean())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()?  Token.FALSE  :  rightVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()?  Token.FALSE  :  rightVal.toBoolean())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
57	[BUG]  [BUGGY]  switch(leftVal.toBoolean()?  Token.FUNCTION  :  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()?  Token.FUNCTION  :  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()?  Token.FUNCTION  :  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
58	[BUG]  [BUGGY]  switch(leftVal.toString()?  Token.FALSE  :  leftVal.toString())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()?  Token.FALSE  :  leftVal.toString())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()?  Token.FALSE  :  leftVal.toString())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
59	[BUG]  [BUGGY]  switch(rightVal.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(rightVal.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(rightVal.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
60	[BUG]  [BUGGY]  switch(leftVal.toBoolean()?  Token.FALSE  :  leftVal.toString())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()?  Token.FALSE  :  leftVal.toString())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()?  Token.FALSE  :  leftVal.toString())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
61	[BUG]  [BUGGY]  switch(leftVal.getType()  |  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  |  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  |  Token.NUMBER)  {	  switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
62	[BUG]  [BUGGY]  switch(leftVal.getType()  <  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  <  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  <  Token.NUMBER)  {	  switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
63	[BUG]  [BUGGY]  switch(leftVal.getType()  {  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  {  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  {  Token.NUMBER)  {	  switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
64	[BUG]  [BUGGY]  switch(leftVal.getType()  +  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  +  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  +  Token.NUMBER)  {	  switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
65	[BUG]  [BUGGY]  switch(right.getType(),  leftVal)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType(),  leftVal)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType(),  leftVal)  {	  switch(right.getType())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
66	[BUG]  [BUGGY]  switch(right.getType()  &  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  &  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  &  Token.FUNCTION)  {	  switch(right.getType())    {    	non-compiled	[CE]  orphaned  case	31	None	replace
67	[BUG]  [BUGGY]  switch(left.toString())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toString())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toString())  {	  switch(leftVal.toString())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
68	[BUG]  [BUGGY]  switch(leftVal.toString(),  false)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString(),  false)  {	  switch(leftVal.toString())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
69	[BUG]  [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(leftVal.toString())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
70	[BUG]  [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( "null "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( "null "))  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  ||  leftVal.toString().equals( "null "))  {	  switch(leftVal.toString())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
71	[BUG]  [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( " "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( " "))  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  ||  leftVal.toString().equals( " "))  {	  switch(leftVal.toString())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
72	[BUG]  [BUGGY]  switch(left.getType()  |  Token.VAR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  |  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  |  Token.VAR)  {	  switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
73	[BUG]  [BUGGY]  switch(left.getType()  <  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  <  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  <  Token.VAR)  {	  switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
74	[BUG]  [BUGGY]  switch(left.getType()  +  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +  Token.VAR)  {	  switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
75	[BUG]  [BUGGY]  switch(left.getType()  >  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >  Token.VAR)  {	  switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
76	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
77	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
78	[BUG]  [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
79	[BUG]  [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
80	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.NAME)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
81	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  rightVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  rightVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  rightVal.getType()  ==  Token.NAME)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
82	[BUG]  [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &&  leftVal.getType()!=  Token.NUMBER)  {	  switch(leftVal.getType()    ||    leftVal.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
83	[BUG]  [BUGGY]  switch(left.getType()  &&  leftVal.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &&  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &&  leftVal.getType()!=  Token.NUMBER)  {	  switch(leftVal.getType()    ||    leftVal.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
84	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {	  switch(leftVal.getType()    ||    leftVal.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
85	[BUG]  [BUGGY]  switch(leftVal.getType()  +|  leftVal.getType()!=  Token.NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  +|  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  +|  leftVal.getType()!=  Token.NUMBER)  {	  switch(leftVal.getType()    ||    leftVal.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
86	[BUG]  [BUGGY]  int  numValue  =  left.getInt();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getInt();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getInt();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
87	[BUG]  [BUGGY]  int  numValue  =  left.getNumber();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getNumber();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getNumber();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
88	[BUG]  [BUGGY]  int  numValue  =  left.getLong();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getLong();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getLong();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
89	[BUG]  [BUGGY]  int  numValue  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getLastChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getLastChild();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
90	[BUG]  [BUGGY]  numValue  =  left.getDouble();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  numValue  =  left.getDouble();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	numValue  =  left.getDouble();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
91	[BUG]  [BUGGY]  int  numValue  =  left.getFloat();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getFloat();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getFloat();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
92	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
93	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR)  {  return  leftVal;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
94	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR)  {  return  null;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR)  {  return  null;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR)  {  return  null;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
95	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  n  =  leftVal.getType();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  n  =  leftVal.getType();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  n  =  leftVal.getType();	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
96	[BUG]  [BUGGY]  case  Token.VAR:  if(left.getType()  ==  Token.EXPR_RESULT)  {  return  n;  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.VAR:  if(left.getType()  ==  Token.EXPR_RESULT)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.VAR:  if(left.getType()  ==  Token.EXPR_RESULT)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
97	[BUG]  [BUGGY]  Node  leftVal  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  right.getLastChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  right.getLastChild();  break;	  Node    leftVal    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
98	[BUG]  [BUGGY]  Node  leftVal  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.removeFirstChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.removeFirstChild();  break;	  Node    leftVal    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
99	[BUG]  [BUGGY]  Node  rightVal  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  rightVal  =  left.getLastChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  rightVal  =  left.getLastChild();  break;	  Node    leftVal    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
100	[BUG]  [BUGGY]  switch(leftVal.getType()  |  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  |  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  |  Token.FUNCTION)  {	  switch(leftVal.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
101	[BUG]  [BUGGY]  switch(leftVal.getType()  &  Token.FUNCTION  ||  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &  Token.FUNCTION  ||  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &  Token.FUNCTION  ||  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
102	[BUG]  [BUGGY]  switch(leftVal.getType()  &  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &  Token.NAME)  {	  switch(leftVal.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
103	[BUG]  [BUGGY]  switch(leftVal.getType()  +  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  +  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  +  Token.FUNCTION)  {	  switch(leftVal.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
104	[BUG]  [BUGGY]  Node  leftVal  =  left.getParent();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getParent();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getParent();  break;	  Node    leftVal    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
105	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext()  -  1;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getNext()  -  1;  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getNext()  -  1;  break;	  Node    leftVal    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
106	[BUG]  [BUGGY]  Node  leftVal  =  left.getPrevious();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getPrevious();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getPrevious();  break;	  Node    leftVal    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
107	[BUG]  [BUGGY]  Node  leftVal  =  left.getString();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getString();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getString();  break;	  Node    leftVal    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
108	[BUG]  [BUGGY]  switch(left.getType()  /  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  /  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  /  Token.VAR)  {	  switch(n.getType()    |    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
109	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
110	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
111	[BUG]  [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
112	[BUG]  [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
113	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.NUMBER)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
114	[BUG]  [BUGGY]  switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	57	None	replace
115	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
116	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
117	[BUG]  [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
118	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.FUNCTION)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
119	[BUG]  [BUGGY]  switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
120	[BUG]  [BUGGY]  switch(right.getType()  |  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  |  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  |  Token.VAR)  {	  switch(right.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
121	[BUG]  [BUGGY]  switch(right.getType()  |  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  |  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  |  Token.NUMBER)  {	  switch(right.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
122	[BUG]  [BUGGY]  switch(right.getType()  <  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  <  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  <  Token.NUMBER)  {	  switch(right.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
123	[BUG]  [BUGGY]  switch(right.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  ==  Token.NUMBER)  {	  switch(right.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
124	[BUG]  [BUGGY]  switch(right.getType()  {  case  Token.NUMBER:  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  {  case  Token.NUMBER:  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  {  case  Token.NUMBER:	  switch(right.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
125	[BUG]  [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FALSE)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
126	[BUG]  [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &&  leftVal.getType()  ==  Token.FALSE)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
127	[BUG]  [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FALSE)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
128	[BUG]  [BUGGY]  Switch(left.getDouble())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getDouble())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getDouble())  {	  Switch(left.getType())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
129	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()  ==  Token.FUNCTION)  {	  Switch(left.getType())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
130	[BUG]  [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
131	[BUG]  [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &&  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
132	[BUG]  [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ||  leftVal.getType()!=  Token.VAR)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
133	[BUG]  [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.getType()  ||  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	68	None	replace
134	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.FALSE)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
135	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.FALSE)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
136	[BUG]  [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.FALSE)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
137	[BUG]  [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.FALSE)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
138	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.FALSE)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
139	[BUG]  [BUGGY]  switch(left.getType()  |  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  |  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  |  Token.FUNCTION)  {	  switch(left.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
140	[BUG]  [BUGGY]  switch(left.getType()  +  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +  Token.FUNCTION)  {	  switch(left.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
141	[BUG]  [BUGGY]  switch(left.getType()  <  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  <  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  <  Token.FUNCTION)  {	  switch(left.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
142	[BUG]  [BUGGY]  switch(left.getType()  &  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &  Token.NAME)  {	  switch(left.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
143	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.EMPTY)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.EMPTY)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.EMPTY)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.EMPTY)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
144	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  leftVal;  }	  case    Token.CALL:    if(left.getType()    ==    Token.EMPTY)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
145	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  null;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  null;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  null;  }	  case    Token.CALL:    if(left.getType()    ==    Token.EMPTY)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
146	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  left;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  left;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.EMPTY)  {  return  left;  }	  case    Token.CALL:    if(left.getType()    ==    Token.EMPTY)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
147	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
148	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NUMBER)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NUMBER)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NUMBER)  {  return  leftVal;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
149	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()!=  Token.NUMBER)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()!=  Token.NUMBER)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()!=  Token.NUMBER)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
150	[BUG]  [BUGGY]  switch(left.getType()  &  Token.VOID)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.VOID)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &  Token.VOID)  {	  switch(parent.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
151	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.FALSE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()!=  Token.FALSE)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
152	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.FIELD)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.FIELD)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()  ==  Token.FIELD)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
153	[BUG]  [BUGGY]  Switch(left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ==  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
154	[BUG]  [BUGGY]  Switch(left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()!=  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
155	[BUG]  [BUGGY]  Switch(left.getType()  {  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  {  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  {  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
156	[BUG]  [BUGGY]  Switch(left.getType()  >>  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  >>  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  >>  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
157	[BUG]  [BUGGY]  Switch(left.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  >=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  >=  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
158	[BUG]  [BUGGY]  Switch(left.getType()  <  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  <  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  <  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
159	[BUG]  [BUGGY]  Switch(left.getType()  |  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  |  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  |  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
160	[BUG]  [BUGGY]  switch(leftVal.toLowerCase(),  false)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toLowerCase(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toLowerCase(),  false)  {	  switch(leftVal.toLowerCase())    {    	non-compiled	[CE]  ')'  expected	66	None	replace
161	[BUG]  [BUGGY]  switch(leftVal.toLowerCase(),  true)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toLowerCase(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toLowerCase(),  true)  {	  switch(leftVal.toLowerCase())    {    	non-compiled	[CE]  ')'  expected	66	None	replace
162	[BUG]  [BUGGY]  switch(leftVal.toUpperCase())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toUpperCase())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toUpperCase())  {	  switch(leftVal.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	66	None	replace
163	[BUG]  [BUGGY]  switch(left.toLowerCase())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toLowerCase())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toLowerCase())  {	  switch(leftVal.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	66	None	replace
164	[BUG]  [BUGGY]  switch(leftVal.toLowerCase(),  Double.POSITIVE_INFINITY)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toLowerCase(),  Double.POSITIVE_INFINITY)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toLowerCase(),  Double.POSITIVE_INFINITY)  {	  switch(leftVal.toLowerCase())    {    	non-compiled	[CE]  ')'  expected	66	None	replace
165	[BUG]  [BUGGY]  switch(left.getType()  |  Token.NOT)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  |  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  |  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
166	[BUG]  [BUGGY]  switch(left.getType()  <  Token.NOT)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  <  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  <  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
167	[BUG]  [BUGGY]  switch(leftVal.getType()  &  Token.NOT)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
168	[BUG]  [BUGGY]  switch(left.getType()  }  &  Token.NOT)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  }  &  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  }  &  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
169	[BUG]  [BUGGY]  switch(left.getType()  >  Token.NOT)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
170	[BUG]  [BUGGY]  Switch(leftVal.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ==  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
171	[BUG]  [BUGGY]  Switch(leftVal.getType()  |  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  |  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  |  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
172	[BUG]  [BUGGY]  Switch(leftVal.getType()  {  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  {  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  {  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
173	[BUG]  [BUGGY]  Switch(leftVal.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()!=  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
174	[BUG]  [BUGGY]  Switch(leftVal.getType()  >>  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  >>  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  >>  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
175	[BUG]  [BUGGY]  Switch(leftVal.getType()  <  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  <  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  <  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
176	[BUG]  [BUGGY]  Switch(leftVal.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  >=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  >=  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
177	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  ||  leftVal.getType()  ==  Token.STRING)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
178	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.getType()  ==  Token.STRING)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
179	[BUG]  [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  ||  leftVal.getType()  ==  Token.STRING)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
180	[BUG]  [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  &&  leftVal.getType()  ==  Token.STRING)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
181	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()!=  Token.STRING)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
182	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  rightVal.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  rightVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  rightVal.getType()  ==  Token.STRING)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	58	None	replace
183	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
184	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  leftVal;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
185	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  null;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  null;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  null;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
186	[BUG]  [BUGGY]  Case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
187	[BUG]  [BUGGY]  switch(left.getDouble(),  false)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getDouble(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getDouble(),  false)  {	  switch(left.getType(),    false)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
188	[BUG]  [BUGGY]  switch(n.getType(),  false)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.getType(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.getType(),  false)  {	  switch(left.getType(),    false)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
189	[BUG]  [BUGGY]  Switch(left.getType(),  true)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType(),  true)  {	  switch(left.getType(),    false)    {    	non-compiled	[CE]  ';'  expected	39	None	replace
190	[BUG]  [BUGGY]  switch(right.getType(),  true)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType(),  true)  {	  switch(left.getType(),    false)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
191	[BUG]  [BUGGY]  switch(leftVal.getType(),  true)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType(),  true)  {	  switch(leftVal.getType(),    false)    {    	non-compiled	[CE]  ')'  expected	16	None	replace
192	[BUG]  [BUGGY]  switch(rightVal.getType(),  true)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(rightVal.getType(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(rightVal.getType(),  true)  {	  switch(leftVal.getType(),    false)    {    	non-compiled	[CE]  ')'  expected	16	None	replace
193	[BUG]  [BUGGY]  Switch(leftVal.getType(),  true)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  true)  {	  switch(leftVal.getType(),    false)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
194	[BUG]  [BUGGY]  switch(left.getDouble(),  true)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getDouble(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getDouble(),  true)  {	  switch(left.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
195	[BUG]  [BUGGY]  switch(n.getType(),  true)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.getType(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.getType(),  true)  {	  switch(left.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
196	[BUG]  [BUGGY]  Switch(left.getType(),  false)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType(),  false)  {	  switch(left.getType(),    true)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
197	[BUG]  [BUGGY]  switch(right.getType(),  false)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType(),  false)  {	  switch(left.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
198	[BUG]  [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.CATCH)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
199	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
200	[BUG]  [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  &&  leftVal.getType()  ==  Token.CATCH)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
201	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.CATCH)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.CATCH)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
202	[BUG]  [BUGGY]  Switch(left.getType()  ||  left.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  left.getType()  ==  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  left.getType()  ==  Token.CATCH)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
203	[BUG]  [BUGGY]  Switch(n.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(n.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(n.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
204	[BUG]  [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
205	[BUG]  [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &&  leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
206	[BUG]  [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NOT)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NOT)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
207	[BUG]  [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
208	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()  ==  Token.BLOCK)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
209	[BUG]  [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  &&  leftVal.getType()  ==  Token.BLOCK)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
210	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
211	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
212	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
213	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  leftVal;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
214	[BUG]  [BUGGY]  case  Token.GETELEM:  if(left.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.GETELEM:  if(left.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.GETELEM:  if(left.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
215	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  null;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  null;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  null;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
216	[BUG]  [BUGGY]  Case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Case  Token.CALL:  if(left.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  ';'  expected	43	None	replace
217	[BUG]  [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +|  leftVal.getType()  ==  Token.BLOCK)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
218	[BUG]  [BUGGY]  int  leftVal  =  left.getInt();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getInt();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getInt();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
219	[BUG]  [BUGGY]  int  leftVal  =  left.getDouble()  -  1;  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getDouble()  -  1;  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getDouble()  -  1;  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
220	[BUG]  [BUGGY]  int  leftVal  =  left.getNumber();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getNumber();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getNumber();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
221	[BUG]  [BUGGY]  int  leftVal  =  left.getIntValue();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getIntValue();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getIntValue();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
222	[BUG]  [BUGGY]  int  leftVal  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getLastChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getLastChild();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
223	[BUG]  [BUGGY]  int  leftVal  =  left.getLong();  break;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getLong();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getLong();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
224	[BUG]  [BUGGY]  switch(left.getType()  |  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  |  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  |  Token.NUMBER)  {	  switch(parent.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
225	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
226	[BUG]  [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  ||  leftVal.toString())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
227	[BUG]  [BUGGY]  switch(leftVal.toLowerCase()  ||  leftVal.toLowerCase())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toLowerCase()  ||  leftVal.toLowerCase())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toLowerCase()  ||  leftVal.toLowerCase())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
228	[BUG]  [BUGGY]  switch(leftVal.toString()  ||  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  ||  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  ||  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
229	[BUG]  [BUGGY]  switch(n.toBoolean()  ||  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.toBoolean()  ||  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.toBoolean()  ||  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
230	[BUG]  [BUGGY]  switch(left.toBoolean()  ||  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  ||  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  ||  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
231	[BUG]  [BUGGY]  switch(leftVal.toBoolean(),  true)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean(),  true)  {	  switch(leftVal.toBoolean(),    false)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
232	[BUG]  [BUGGY]  switch(left.toBoolean(),  true)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean(),  true)  {	  switch(leftVal.toBoolean(),    false)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
233	[BUG]  [BUGGY]  switch(rightVal.toBoolean(),  true)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(rightVal.toBoolean(),  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(rightVal.toBoolean(),  true)  {	  switch(leftVal.toBoolean(),    false)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
234	[BUG]  [BUGGY]  case  Token.NAME:  if(leftVal.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.NAME:  if(leftVal.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.NAME:  if(leftVal.getType()  ==  Token.CALL)  {  return  n;  }	  case    Token.CALL:    if(leftVal.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
235	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.CALL:    if(leftVal.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
236	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(leftVal.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
237	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME)  {  return  leftVal;  }	  case    Token.CALL:    if(leftVal.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
238	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.BLOCK)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.BLOCK)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.BLOCK)  {  return  n;  }	  case    Token.CALL:    if(leftVal.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
239	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()!=  Token.VAR)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
240	[BUG]  [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +|  leftVal.getType()  ==  Token.VAR)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
241	[BUG]  [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
242	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
243	[BUG]  [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +|  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
244	[BUG]  [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.getType()  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.getType()  ||  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
245	[BUG]  [BUGGY]  Switch(left.getType()  |  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  |  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  |  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
246	[BUG]  [BUGGY]  Switch(left.getType()  {  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  {  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  {  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
247	[BUG]  [BUGGY]  Switch(left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ==  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
248	[BUG]  [BUGGY]  Switch(left.getType()  <  Token.VAR)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  <  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  <  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
249	[BUG]  [BUGGY]  Switch(left.getType()  +  Token.VAR)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  +  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  +  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
250	[BUG]  [BUGGY]  Switch(left.getType()  >  Token.VAR)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  >  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  >  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
251	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getNext();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getNext();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
252	[BUG]  [BUGGY]  Node  leftVal  =  leftVal.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  leftVal.getLastChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  leftVal.getLastChild();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
253	[BUG]  [BUGGY]  Node  leftVal  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.removeFirstChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.removeFirstChild();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
254	[BUG]  [BUGGY]  Node  leftVal  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  right.getLastChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  right.getLastChild();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
255	[BUG]  [BUGGY]  Node  leftVal  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  n.getFirstChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  n.getFirstChild();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
256	[BUG]  [BUGGY]  switch(left.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ==  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
257	[BUG]  [BUGGY]  switch(left.getType()  <  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  <  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  <  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
258	[BUG]  [BUGGY]  switch(left.getType()  }  &  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  }  &  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  }  &  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
259	[BUG]  [BUGGY]  switch(left.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()!=  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
260	[BUG]  [BUGGY]  switch(left.getType()  |  Token.STRING)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  |  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  |  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
261	[BUG]  [BUGGY]  switch(left.getType()  <  Token.STRING)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  <  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  <  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
262	[BUG]  [BUGGY]  switch(left.getType()  +  Token.STRING)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
263	[BUG]  [BUGGY]  switch(left.getType()  }  &  Token.STRING)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  }  &  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  }  &  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	42	None	replace
264	[BUG]  [BUGGY]  switch(left.getType()  >  Token.STRING)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
265	[BUG]  [BUGGY]  Switch(leftVal.getType()  |  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  |  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  |  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
266	[BUG]  [BUGGY]  Switch(leftVal.getType()  {  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  {  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  {  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
267	[BUG]  [BUGGY]  Switch(leftVal.getType()  +  Token.VAR)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  +  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  +  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
268	[BUG]  [BUGGY]  Switch(leftVal.getType()  <  Token.VAR)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  <  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  <  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
269	[BUG]  [BUGGY]  Switch(leftVal.getType()  >  Token.VAR)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  >  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  >  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
270	[BUG]  [BUGGY]  switch(left.getType(),  parent)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType(),  parent)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType(),  parent)  {	  switch(parent.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	32	None	replace
271	[BUG]  [BUGGY]  switch(leftVal.getType(),  parent)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType(),  parent)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType(),  parent)  {	  switch(parent.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	32	None	replace
272	[BUG]  [BUGGY]  switch(n.getType(),  leftVal)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.getType(),  leftVal)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.getType(),  leftVal)  {	  switch(parent.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	32	None	replace
273	[BUG]  [BUGGY]  switch(left.getType(),  parentVal)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType(),  parentVal)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType(),  parentVal)  {	  switch(parent.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	32	None	replace
274	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.NOT)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()  ==  Token.NOT)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	60	None	replace
275	[BUG]  [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.NUMBER)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +|  leftVal.getType()  ==  Token.NUMBER)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
276	[BUG]  [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
277	[BUG]  [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
278	[BUG]  [BUGGY]  Node  leftVal  =  left.getLastChild();  case  Token.UNKNOWN:  return  n;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getLastChild();  case  Token.UNKNOWN:  return  n;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getLastChild();  case  Token.UNKNOWN:  return  n;	  Node    leftVal    =    left.getFirstChild();    case    Token.UNKNOWN:    return    n;    	non-compiled	[CE]  orphaned  case	7	None	replace
279	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext();  case  Token.UNKNOWN:  return  n;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getNext();  case  Token.UNKNOWN:  return  n;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getNext();  case  Token.UNKNOWN:  return  n;	  Node    leftVal    =    left.getFirstChild();    case    Token.UNKNOWN:    return    n;    	non-compiled	[CE]  orphaned  case	7	None	replace
280	[BUG]  [BUGGY]  Node  leftVal  =  left.getLastChild();  case  Token.NAME:  return  n;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getLastChild();  case  Token.NAME:  return  n;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getLastChild();  case  Token.NAME:  return  n;	  Node    leftVal    =    left.getFirstChild();    case    Token.UNKNOWN:    return    n;    	non-compiled	[CE]  orphaned  case	7	None	replace
281	[BUG]  [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
282	[BUG]  [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
283	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
284	[BUG]  [BUGGY]  Node  leftVal  =  n.getLastChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  n.getLastChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  n.getLastChild();  break;	  Node    leftVal    =    left.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
285	[BUG]  [BUGGY]  Node  leftVal  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  right.getFirstChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  right.getFirstChild();  break;	  Node    leftVal    =    left.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
286	[BUG]  [BUGGY]  Node  rightVal  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  rightVal  =  left.getFirstChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  rightVal  =  left.getFirstChild();  break;	  Node    leftVal    =    left.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
287	[BUG]  [BUGGY]  switch(left.getType()  /  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  /  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  /  Token.NUMBER)  {	  switch(n.getType()    |    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
288	[BUG]  [BUGGY]  switch(left.getType()  -  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  -  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  -  Token.NUMBER)  {	  switch(n.getType()    |    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
289	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NAME)  {  return  leftVal;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
290	[BUG]  [BUGGY]  case  Token.NAME:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.NAME:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.NAME:  if(left.getType()  ==  Token.CALL)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
291	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME)  {  return  null;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME)  {  return  null;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NAME)  {  return  null;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
292	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
293	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
294	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
295	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NUMBER)  {  return  leftVal;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NUMBER)  {  return  leftVal;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NUMBER)  {  return  leftVal;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
296	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()!=  Token.NUMBER)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()!=  Token.NUMBER)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()!=  Token.NUMBER)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
297	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NUMBER)  {  return  null;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NUMBER)  {  return  null;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NUMBER)  {  return  null;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
298	[BUG]  [BUGGY]  Node  leftVal  =  n.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  n.getLastChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  n.getLastChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
299	[BUG]  [BUGGY]  Node  leftVal  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  right.getFirstChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  right.getFirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
300	[BUG]  [BUGGY]  int  numValue  =  leftVal.getDouble();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  leftVal.getDouble();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  leftVal.getDouble();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
301	[BUG]  [BUGGY]  int  numValue  =  left.getIntVal();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getIntVal();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getIntVal();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
302	[BUG]  [BUGGY]  int  numValue  =  left.getLocal();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getLocal();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getLocal();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
303	[BUG]  [BUGGY]  switch(left.getType()  ==  Token.NOT)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ==  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ==  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
304	[BUG]  [BUGGY]  switch(left.getType()  {  Token.NOT)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  {  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  {  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
305	[BUG]  [BUGGY]  switch(left.getType()  >>  Token.NOT)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >>  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >>  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
306	[BUG]  [BUGGY]  switch(left.getType()!=  Token.NOT)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()!=  Token.NOT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()!=  Token.NOT)  {	  switch(left.getType()    &    Token.NOT)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
307	[BUG]  [BUGGY]  Switch(left.getType()  [Delete]  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  [Delete]  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  [Delete]  Token.NUMBER)  {	  Switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
308	[BUG]  [BUGGY]  Switch(left.getType(),  parent)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType(),  parent)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType(),  parent)  {	  switch(parent.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	32	None	replace
309	[BUG]  [BUGGY]  Switch(leftVal.getType()  [Delete]  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  [Delete]  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  [Delete]  Token.NUMBER)  {	  Switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
310	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.UNKNOWN)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.UNKNOWN)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.UNKNOWN)  {  return  n;  }	  case    Token.CALL:    if(leftVal.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
311	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal  ==  null)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal  ==  null)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
312	[BUG]  [BUGGY]  case  Token.CALL:  if(right.getType()  ==  Token.NAME)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(right.getType()  ==  Token.NAME)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(right.getType()  ==  Token.NAME)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
313	[BUG]  [BUGGY]  switch(leftVal.getType()  -  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  -  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  -  Token.NUMBER)  {	  switch(n.getType()    |    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
314	[BUG]  [BUGGY]  switch(left.getType()  {  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  {  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  {  Token.FUNCTION)  {	  switch(left.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
315	[BUG]  [BUGGY]  Switch(leftVal.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
316	[BUG]  [BUGGY]  switch(leftVal.toString()?  Token.FALSE  :  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()?  Token.FALSE  :  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()?  Token.FALSE  :  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
317	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()  ==  Token.STRING)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
318	[BUG]  [BUGGY]  Node  leftVal  =  left.cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.cloneTree();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.cloneTree();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
319	[BUG]  [BUGGY]  Node  leftVal  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getfirstChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getfirstChild();	  Node    leftVal    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	5	None	replace
320	[BUG]  [BUGGY]  case  TOKEN:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  TOKEN:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  TOKEN:  if(left.getType()  ==  Token.CALL)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
321	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal  ==  null)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal  ==  null)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
322	[BUG]  [BUGGY]  Node  leftVal  =  leftVal.getFirstChild();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  leftVal.getFirstChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  leftVal.getFirstChild();  break;	  Node    leftVal    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
323	[BUG]  [BUGGY]  Node  leftVal  =  leftVal.getLastChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  leftVal.getLastChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  leftVal.getLastChild();  break;	  Node    leftVal    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
324	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()  ==  Token.VOID)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()  ==  Token.VOID)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()  ==  Token.VOID)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
325	[BUG]  [BUGGY]  switch(leftVal.getType()  ==  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ==  Token.NUMBER)  {	  switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
326	[BUG]  [BUGGY]  switch(leftVal.getType()  >>  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  >>  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  >>  Token.NUMBER)  {	  switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
327	[BUG]  [BUGGY]  switch(leftVal.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()!=  Token.NUMBER)  {	  switch(leftVal.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
328	[BUG]  [BUGGY]  switch(leftVal.toLowerCase()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toLowerCase()  &&  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toLowerCase()  &&  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(leftVal.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	66	None	replace
329	[BUG]  [BUGGY]  Switch(left.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()!=  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
330	[BUG]  [BUGGY]  Switch(left.getType()  >>  Token.VAR)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  >>  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  >>  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
331	[BUG]  [BUGGY]  Switch(left.getType()  >=  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  >=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  >=  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
332	[BUG]  [BUGGY]  Switch(left.getType()  [Delete]  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  [Delete]  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  [Delete]  Token.VAR)  {	  Switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
333	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.NEW)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.NEW)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()  ==  Token.NEW)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
334	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
335	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  rightVal.toBoolean())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  rightVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  rightVal.toBoolean())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
336	[BUG]  [BUGGY]  switch(leftVal.toLowerCase()  ||  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toLowerCase()  ||  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toLowerCase()  ||  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()    ||    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
337	[BUG]  [BUGGY]  Switch(leftVal.getType(),  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  MAX_FOLD_NUMBER)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
338	[BUG]  [BUGGY]  Switch(leftVal.getType(),  rightVal)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  rightVal)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  rightVal)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
339	[BUG]  [BUGGY]  Switch(leftVal.getType(),  value)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType(),  value)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType(),  value)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
340	[BUG]  [BUGGY]  Switch(leftVal.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ==  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
341	[BUG]  [BUGGY]  Switch(leftVal.getType()  >>  Token.VAR)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  >>  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  >>  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
342	[BUG]  [BUGGY]  Node  leftVal  =  left.getfirstChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getfirstChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getfirstChild();  break;	  Node    leftVal    =    left.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
343	[BUG]  [BUGGY]  switch(right.getType()  &  Opcodes.V1_5)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  &  Opcodes.V1_5)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  &  Opcodes.V1_5)  {	  switch(right.getType())    {    	non-compiled	[CE]  orphaned  case	31	None	replace
344	[BUG]  [BUGGY]  switch(left.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ==  Token.VAR)  {	  switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
345	[BUG]  [BUGGY]  switch(left.getType()  >>  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >>  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >>  Token.VAR)  {	  switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
346	[BUG]  [BUGGY]  switch(left.getType()!=  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()!=  Token.VAR)  {	  switch(left.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	33	None	replace
347	[BUG]  [BUGGY]  switch(left.getType()  ||  rightVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  rightVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  rightVal.getType()  ==  Token.NAME)  {	  switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
348	[BUG]  [BUGGY]  Node  leftVal  =  left.getLastChild();  return  n;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.getLastChild();  return  n;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.getLastChild();  return  n;	  Node    leftVal    =    left.getFirstChild();    case    Token.UNKNOWN:    return    n;    	non-compiled	[CE]  orphaned  case	7	None	replace
349	[BUG]  [BUGGY]  switch(left.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ==  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
350	[BUG]  [BUGGY]  switch(left.getType()  {  Token.STRING)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  {  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  {  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	42	None	replace
351	[BUG]  [BUGGY]  switch(left.getType()  >>  Token.STRING)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >>  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >>  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
352	[BUG]  [BUGGY]  switch(left.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()!=  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()!=  Token.STRING)  {	  switch(left.getType()    &    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	42	None	replace
353	[BUG]  [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.FALSE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +|  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +|  leftVal.getType()  ==  Token.FALSE)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
354	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.SCRIPT)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.SCRIPT)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.SCRIPT)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
355	[BUG]  [BUGGY]  switch(left.getType()  -  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  -  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  -  Token.VAR)  {	  switch(n.getType()    |    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
356	[BUG]  [BUGGY]  switch(leftVal.getType()  -  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  -  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  -  Token.VAR)  {	  switch(n.getType()    |    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
357	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.STRING)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
358	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NEW)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NEW)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  leftVal.getType()  ==  Token.NEW)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
359	[BUG]  [BUGGY]  switch(left.getType(),  ValueUtils.EMPTY_STRING)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType(),  ValueUtils.EMPTY_STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType(),  ValueUtils.EMPTY_STRING)  {	  switch(left.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
360	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY  ||  leftVal  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EMPTY  ||  leftVal  ==  null)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.EMPTY  ||  leftVal  ==  null)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.EMPTY)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
361	[BUG]  [BUGGY]  case  Token.CALL:  if(right.getType()  ==  Token.EMPTY)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(right.getType()  ==  Token.EMPTY)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(right.getType()  ==  Token.EMPTY)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.EMPTY)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
362	[BUG]  [BUGGY]  switch(right.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  ==  Token.VAR)  {	  switch(right.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
363	[BUG]  [BUGGY]  switch(right.getType()  <  Token.VAR)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  <  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  <  Token.VAR)  {	  switch(right.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
364	[BUG]  [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.GETELEM  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(leftVal.getType()  ==  Token.GETELEM  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(leftVal.getType()  ==  Token.GETELEM  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
365	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM  ||  leftVal  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETELEM  ||  leftVal  ==  null)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.GETELEM  ||  leftVal  ==  null)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
366	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETPROP)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.GETPROP)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.GETPROP)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
367	[BUG]  [BUGGY]  case  Token.CALL:  if(right.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(right.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(right.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.GETELEM)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	43	None	replace
368	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  leftVal.booleanValue())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  leftVal.booleanValue())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  leftVal.booleanValue())  {	  switch(left.toBoolean())    {    	non-compiled	[CE]  orphaned  case	55	None	replace
369	[BUG]  [BUGGY]  switch(left.getType()  >>  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >>  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >>  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
370	[BUG]  [BUGGY]  switch(left.getType()  {  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  {  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  {  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
371	[BUG]  [BUGGY]  switch(left.getType()  >=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >=  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	25	None	replace
372	[BUG]  [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()  ==  Token.TRUE)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toBoolean()  &&  leftVal.getType()  ==  Token.TRUE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toBoolean()  &&  leftVal.getType()  ==  Token.TRUE)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
373	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.CATCH)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()!=  Token.CATCH)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
374	[BUG]  [BUGGY]  Node  leftVal  =  leftVal.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  leftVal.getFirstChild();  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  leftVal.getFirstChild();	  Node    leftVal    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
375	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal  ==  null)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal  ==  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
376	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(right.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(right.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
377	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()!=  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
378	[BUG]  [BUGGY]  Switch(leftVal.getType()  ||  rightVal.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()  ||  rightVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()  ||  rightVal.getType()  ==  Token.NAME)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	20	None	replace
379	[BUG]  [BUGGY]  int  leftVal  =  left.getIntVal();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getIntVal();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getIntVal();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
380	[BUG]  [BUGGY]  int  leftVal  =  left.getLocal();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getLocal();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getLocal();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
381	[BUG]  [BUGGY]  int  leftVal  =  leftVal.getDouble();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  leftVal.getDouble();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  leftVal.getDouble();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
382	[BUG]  [BUGGY]  switch(right.getType()  >>  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  >>  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  >>  Token.NUMBER)  {	  switch(right.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
383	[BUG]  [BUGGY]  switch(right.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()!=  Token.NUMBER)  {	  switch(right.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
384	[BUG]  [BUGGY]  switch(right.getType()  {  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(right.getType()  {  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(right.getType()  {  Token.NUMBER)  {	  switch(right.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
385	[BUG]  [BUGGY]  switch(leftVal.getType()  <  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  <  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  <  Token.FUNCTION)  {	  switch(leftVal.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
386	[BUG]  [BUGGY]  Node  leftVal  =  leftVal.getNext();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  leftVal.getNext();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  leftVal.getNext();  break;	  Node    leftVal    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
387	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR  ||  leftVal  ==  null)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR  ||  leftVal  ==  null)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR  ||  leftVal  ==  null)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
388	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(right.getType()  ==  Token.VAR)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(right.getType()  ==  Token.VAR)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(right.getType()  ==  Token.VAR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
389	[BUG]  [BUGGY]  switch(left.getType()  ||  false)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  false)  {	  switch(left.getType(),    false)    {    	non-compiled	[CE]  orphaned  case	39	None	replace
390	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.CALL)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
391	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
392	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NAME  ||  leftVal.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NAME)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	44	None	replace
393	[BUG]  [BUGGY]  switch(leftVal.getType()  ||  false)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  ||  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  ||  false)  {	  switch(leftVal.getType(),    false)    {    	non-compiled	[CE]  orphaned  case	16	None	replace
394	[BUG]  [BUGGY]  switch(left.toBoolean()  &&  NodeUtil.getPureBooleanValue(left))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()  &&  NodeUtil.getPureBooleanValue(left))  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()  &&  NodeUtil.getPureBooleanValue(left))  {	  switch(left.toBoolean())    {    	non-compiled	[CE]  orphaned  case	55	None	replace
395	[BUG]  [BUGGY]  switch(left.toBoolean()?  Token.FALSE  :  left.toBoolean())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean()?  Token.FALSE  :  left.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean()?  Token.FALSE  :  left.toBoolean())  {	  switch(left.toBoolean())    {    	non-compiled	[CE]  orphaned  case	55	None	replace
396	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NOT)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.NOT)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.NOT)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
397	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.STRING)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.STRING)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.STRING)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	71	None	replace
398	[BUG]  [BUGGY]  switch(n.toLowerCase())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.toLowerCase())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.toLowerCase())  {	  switch(leftVal.toLowerCase())    {    	non-compiled	[CE]  orphaned  case	66	None	replace
399	[BUG]  [BUGGY]  switch(leftVal.getType()  +  1  ||  leftVal.getType()!=  Token.NUMBER)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.getType()  +  1  ||  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.getType()  +  1  ||  leftVal.getType()!=  Token.NUMBER)  {	  switch(leftVal.getType()    ||    leftVal.getType()!=    Token.NUMBER)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
400	[BUG]  [BUGGY]  Node  leftVal  =  left.removeFirst();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.removeFirst();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.removeFirst();  break;	  Node    leftVal    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
401	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EXPR_RESULT)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.EXPR_RESULT)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.EXPR_RESULT)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.EMPTY)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
402	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()!=  Token.NUMBER)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
403	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()  ==  Token.STRING)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()  ==  Token.STRING)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.NUMBER)    {    	non-compiled	[CE]  ';'  expected	22	None	replace
404	[BUG]  [BUGGY]  switch(left.getType()  >  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  >  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  >  Token.FUNCTION)  {	  switch(left.getType()    &    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
405	[BUG]  [BUGGY]  Node  leftVal  =  left.cloneTree();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  left.cloneTree();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  left.cloneTree();  break;	  Node    leftVal    =    left.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	2	None	replace
406	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()!=  Token.FUNCTION)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
407	[BUG]  [BUGGY]  switch(left.getType(),  ValueUtils.isNaN(leftVal))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType(),  ValueUtils.isNaN(leftVal))  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType(),  ValueUtils.isNaN(leftVal))  {	  switch(left.getType(),    leftVal)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
408	[BUG]  [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.BLOCK)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
409	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()  ==  Token.CATCH)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
410	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()!=  Token.VAR)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
411	[BUG]  [BUGGY]  switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.toBoolean()  &&  leftVal.getType()  ==  Token.VAR)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
412	[BUG]  [BUGGY]  switch(left.toBoolean(),  false)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toBoolean(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toBoolean(),  false)  {	  switch(leftVal.toBoolean(),    false)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
413	[BUG]  [BUGGY]  switch(n.toBoolean(),  false)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.toBoolean(),  false)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.toBoolean(),  false)  {	  switch(leftVal.toBoolean(),    false)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
414	[BUG]  [BUGGY]  Node  leftVal  =  n.getFirstChild();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Node  leftVal  =  n.getFirstChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Node  leftVal  =  n.getFirstChild();  break;	  Node    leftVal    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	1	None	replace
415	[BUG]  [BUGGY]  switch(left.toString()  &&  leftVal.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.toString()  &&  leftVal.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.toString()  &&  leftVal.getType()  ==  Token.NAME)  {	  switch(leftVal.toBoolean()    &&    leftVal.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
416	[BUG]  [BUGGY]  switch(left.getType()?  Token.VAR  :  n)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()?  Token.VAR  :  n)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()?  Token.VAR  :  n)  {	  switch(n.getType()    |    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
417	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.VAR)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	74	None	replace
418	[BUG]  [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.VAR)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	62	None	replace
419	[BUG]  [BUGGY]  switch(left.getType()  ||  true)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  true)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  true)  {	  switch(left.getType(),    true)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
420	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.UNKNOWN)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.UNKNOWN)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.UNKNOWN)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
421	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NOT)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NOT)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.NOT)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
422	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.CALL)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.CALL)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
423	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.EMPTY)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.EMPTY)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.EMPTY)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.NUMBER)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
424	[BUG]  [BUGGY]  Switch(left.getType(),  n)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType(),  n)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType(),  n)  {	  Switch(leftVal.getType(),    leftVal)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
425	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
426	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FOR)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FOR)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.FOR)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
427	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.NUMBER)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	47	None	replace
428	[BUG]  [BUGGY]  int  numValue  =  left.getIntValue();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getIntValue();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getIntValue();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
429	[BUG]  [BUGGY]  int  numValue  =  left.getIndex();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  numValue  =  left.getIndex();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  numValue  =  left.getIndex();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
430	[BUG]  [BUGGY]  float  numValue  =  left.getDouble();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  float  numValue  =  left.getDouble();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	float  numValue  =  left.getDouble();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
431	[BUG]  [BUGGY]  double  numValue  =  left.getDouble();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  double  numValue  =  left.getDouble();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	double  numValue  =  left.getDouble();  break;	  int    numValue    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	72	None	replace
432	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.FALSE)  {  return  n;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.FALSE)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.CALL  ||  left.getType()  ==  Token.FALSE)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FALSE)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
433	[BUG]  [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.DO)  {  return  n;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.CALL:  if(left.getType()  ==  Token.DO)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.CALL:  if(left.getType()  ==  Token.DO)  {  return  n;  }	  case    Token.CALL:    if(left.getType()    ==    Token.FALSE)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	48	None	replace
434	[BUG]  [BUGGY]  switch(left.getType()  ||  parent.getType()  &  Token.VAR)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  parent.getType()  &  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  parent.getType()  &  Token.VAR)  {	  switch(parent.getType()    &    Token.VAR)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
435	[BUG]  [BUGGY]  int  leftVal  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  int  leftVal  =  left.getFirstChild();  break;  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	int  leftVal  =  left.getFirstChild();  break;	  int    leftVal    =    left.getDouble();    break;    	non-compiled	[CE]  orphaned  case	4	None	replace
436	[BUG]  [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(left.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(left.getType()  ||  leftVal.getType()!=  Token.BLOCK)  {	  Switch(leftVal.getType()    ||    leftVal.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
437	[BUG]  [BUGGY]  Switch(leftVal.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  Switch(leftVal.getType()!=  Token.VAR)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	Switch(leftVal.getType()!=  Token.VAR)  {	  Switch(leftVal.getType()    &    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
438	[BUG]  [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.TRUE)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  ||  leftVal.getType()  ==  Token.TRUE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  ||  leftVal.getType()  ==  Token.TRUE)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
439	[BUG]  [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.FALSE)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.FALSE)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.FALSE)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FALSE)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
440	[BUG]  [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.FUNCTION)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  +  1  ||  leftVal.getType()  ==  Token.FUNCTION)  {	  switch(left.getType()    ||    leftVal.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	61	None	replace
441	[BUG]  [BUGGY]  switch(n.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(n.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(n.toBoolean()?  Token.FALSE  :  leftVal.toBoolean())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
442	[BUG]  [BUGGY]  switch(leftVal.toLowerCase()?  Token.FALSE  :  leftVal.toLowerCase())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toLowerCase()?  Token.FALSE  :  leftVal.toLowerCase())  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toLowerCase()?  Token.FALSE  :  leftVal.toLowerCase())  {	  switch(leftVal.toBoolean()?    Token.FALSE    :    leftVal.toBoolean())    {    	non-compiled	[CE]  orphaned  case	67	None	replace
443	[BUG]  [BUGGY]  switch(left.getType()  [Delete]  Token.NUMBER)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(left.getType()  [Delete]  Token.NUMBER)  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(left.getType()  [Delete]  Token.NUMBER)  {	  switch(left.getType()    &    Token.NUMBER)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
444	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FUNCTION  ||  leftVal.getType()  ==  Token.GETELEM)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
445	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FOR)  {  return  n;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FOR)  {  return  n;  }  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	case  Token.EXPR_RESULT:  if(left.getType()  ==  Token.FOR)  {  return  n;  }	  case    Token.EXPR_RESULT:    if(left.getType()    ==    Token.FUNCTION)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	73	None	replace
446	[BUG]  [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( "- "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( "- "))  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  ||  leftVal.toString().equals( "- "))  {	  switch(leftVal.toString())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
447	[BUG]  [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( "_ "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (left  ==  null)  {  return  n;  }  TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }      [BUGGY]  switch(leftVal.toString()  ||  leftVal.toString().equals( "_ "))  {  [BUGGY]      case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {  double  numValue  =  left.getDouble();  if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.48038446141526137	340	340	3	replace	switch(leftVal.toString()  ||  leftVal.toString().equals( "_ "))  {	  switch(leftVal.toString())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
