bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
2	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
3	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined   ")||  left.getString().equals( "undefined   "));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined   ")||  left.getString().equals( "undefined   "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  right.getString().equals( "undefined   ")||  left.getString().equals( "undefined   "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
4	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined ");  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined ");  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  right.getString().equals( "undefined ");	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
5	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ",  rightLiteral);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ",  rightLiteral);  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ",  rightLiteral);	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
6	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight ");  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight ");  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefinedRight ");	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
7	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	4	None	replace
8	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  result  =  compareToUndefined(left,  op);  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	result  =  compareToUndefined(left,  op);	      	non-compiled	[CE]  orphaned  case	4	None	replace
9	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  result  =  compareToUndefined(right,  op);  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	result  =  compareToUndefined(right,  op);	      	non-compiled	[CE]  orphaned  case	4	None	replace
10	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	4	None	replace
11	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	4	None	replace
12	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	result  =  compareToUndefined(left,  op);  break;	      	non-compiled	[CE]  orphaned  case	4	None	replace
13	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	result  =  compareToUndefined(right,  op);  break;	      	non-compiled	[CE]  orphaned  case	4	None	replace
14	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight ")&&  rightLiteral;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight ")&&  rightLiteral;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefinedRight ")&&  rightLiteral;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
15	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
16	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  right;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  right;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  right;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	1	None	replace
18	[BUG]  [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Boolean  undefinedLeft  =  left.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	1	None	replace
19	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLiteral  ==  null;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLiteral  ==  null;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLiteral  ==  null;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    rightLiteral    ==    null;    	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral!=  null;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral!=  null;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral!=  null;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    rightLiteral    ==    null;    	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLiteral!=  null;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLiteral!=  null;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLiteral!=  null;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    rightLiteral    ==    null;    	non-compiled	[CE]  orphaned  case	7	None	replace
22	[BUG]  [BUGGY]  boolean  undefinedLeft  =  (left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  (left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  (left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    (left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	8	None	replace
23	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefinedRight "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefinedRight "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  right.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =    right.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
24	[BUG]  [BUGGY]  boolean  undefinedLeft  =  rightLiteral.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  rightLiteral.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  rightLiteral.getString().equals( "undefined "));	  boolean    undefinedLeft    =    right.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
25	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( ".undefined ")&&  rightLiteral  ==  null;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( ".undefined ")&&  rightLiteral  ==  null;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( ".undefined ")&&  rightLiteral  ==  null;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    rightLiteral    ==    null;    	non-compiled	[CE]  orphaned  case	7	None	replace
26	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightRight  ==  null;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightRight  ==  null;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightRight  ==  null;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    rightLiteral    ==    null;    	non-compiled	[CE]  orphaned  case	7	None	replace
27	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")));  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	1	None	replace
28	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals(rightLiteral));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals(rightLiteral));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals(rightLiteral));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	1	None	replace
29	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().startsWith( "undefined "));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().startsWith( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().startsWith( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	1	None	replace
30	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
31	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "right "));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "right "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "right "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
33	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( ".undefined ")||  left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( ".undefined ")||  left.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( ".undefined ")||  left.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
34	[BUG]  [BUGGY]  boolean  undefinedLeft  =  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  (left.getString().equals( "undefined ")&&  left.getString().equals( "undefined "));	  boolean    undefinedLeft    =    (left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	8	None	replace
35	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  result  =  compareToUndefined(left,  rightLiteral);  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	result  =  compareToUndefined(left,  rightLiteral);	      	non-compiled	[CE]  orphaned  case	4	None	replace
36	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  result;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  result;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  result;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
37	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightRight;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightRight;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightRight;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
38	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  undefinedRight;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  undefinedRight;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  undefinedRight;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
39	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLight;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLight;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")&&  rightLight;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
40	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().endsWith( "undefined "));  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().endsWith( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().endsWith( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	1	None	replace
41	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "undefined ");  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "undefined ");  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  left.getString().equals( "undefined ");	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
42	[BUG]  [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	6	None	replace
43	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Node  left  =  right.getFirstChild();	      	non-compiled	[CE]  orphaned  case	4	None	replace
44	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	4	None	replace
45	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  n  =  left.getNext();  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	n  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	4	None	replace
46	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined ")||  rightLiteral  ==  null;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined ")||  rightLiteral  ==  null;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  right.getString().equals( "undefined ")||  rightLiteral  ==  null;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    rightLiteral    ==    null;    	non-compiled	[CE]  orphaned  case	7	None	replace
47	[BUG]  [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral  ==  null;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral  ==  null;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Boolean  undefinedLeft  =  left.getString().equals( "undefined ")||  rightLiteral  ==  null;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")||    rightLiteral    ==    null;    	non-compiled	[CE]  orphaned  case	7	None	replace
48	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined ")&&  leftLiteral;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined ")&&  leftLiteral;  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  right.getString().equals( "undefined ")&&  leftLiteral;	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   ")&&    rightLiteral;    	non-compiled	[CE]  orphaned  case	5	None	replace
49	[BUG]  [BUGGY]  Boolean  undefinedLeft  =  right.getString().equals( "undefined "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  Boolean  undefinedLeft  =  right.getString().equals( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	Boolean  undefinedLeft  =  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    right.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
50	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().endsWith( "undefined "));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {    [BUGGY]  boolean  undefinedLeft  =  right.getString().endsWith( "undefined "));  [BUGGY]    if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1031	1031	3	replace	boolean  undefinedLeft  =  right.getString().endsWith( "undefined "));	  boolean    undefinedLeft    =    right.getString().equals(   "undefined   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
