bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op,  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op,  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    true);    	non-compiled	[CE]  orphaned  case	4	None	replace
2	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    true);    	non-compiled	[CE]  orphaned  case	4	None	replace
3	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n,  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n,  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    true);    	non-compiled	[CE]  orphaned  case	4	None	replace
4	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    true);    	non-compiled	[CE]  orphaned  case	4	None	replace
5	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true));  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false));    	non-compiled	[CE]  orphaned  case	11	None	replace
6	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false));    	non-compiled	[CE]  orphaned  case	11	None	replace
7	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false));    	non-compiled	[CE]  orphaned  case	11	None	replace
8	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  false));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false));    	non-compiled	[CE]  orphaned  case	11	None	replace
9	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  false);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(n,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
10	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(n,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
11	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false);    	non-compiled	[CE]  orphaned  case	5	None	replace
12	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false);    	non-compiled	[CE]  orphaned  case	5	None	replace
13	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false);    	non-compiled	[CE]  orphaned  case	5	None	replace
14	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false);    	non-compiled	[CE]  orphaned  case	5	None	replace
15	[BUG]  [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	      	non-compiled	[CE]  orphaned  case	8	None	replace
16	[BUG]  [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	      	non-compiled	[CE]  orphaned  case	8	None	replace
17	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false);    	non-compiled	[CE]  orphaned  case	7	None	replace
18	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false);    	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false);    	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false);    	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  false);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    false);    	non-compiled	[CE]  orphaned  case	2	None	replace
22	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left,    false);    	non-compiled	[CE]  orphaned  case	3	None	replace
23	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left,    false);    	non-compiled	[CE]  orphaned  case	3	None	replace
24	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getFirstChild(),  true));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getFirstChild(),  true));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getFirstChild(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
25	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  false));  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
26	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  false));  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
27	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  false));  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
28	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  true);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
29	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  true);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
30	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false),  result);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false),  result);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false),  result);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false));    	non-compiled	[CE]  orphaned  case	11	None	replace
31	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	8	None	replace
32	[BUG]  [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	      	non-compiled	[CE]  orphaned  case	8	None	replace
33	[BUG]  [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	      	non-compiled	[CE]  orphaned  case	8	None	replace
34	[BUG]  [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	      	non-compiled	[CE]  orphaned  case	8	None	replace
35	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  true);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  true);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    true);    	non-compiled	[CE]  orphaned  case	10	None	replace
36	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left,    false);    	non-compiled	[CE]  orphaned  case	3	None	replace
37	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  false));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  false));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
38	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  false);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  false);  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    false);    	non-compiled	[CE]  orphaned  case	2	None	replace
39	[BUG]  [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	      	non-compiled	[CE]  orphaned  case	8	None	replace
40	[BUG]  [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined   "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	      	non-compiled	[CE]  orphaned  case	8	None	replace
41	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true));  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;      [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true));  [BUGGY]    boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false));    	non-compiled	[CE]  orphaned  case	11	None	replace
