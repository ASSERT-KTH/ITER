bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	22	None	replace
2	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	22	None	replace
3	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left,  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left,  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left,    true);    	non-compiled	[CE]  orphaned  case	2	None	replace
4	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getType(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getType(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getType(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(op,    true);    	non-compiled	[CE]  orphaned  case	1	None	replace
5	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    true);    	non-compiled	[CE]  orphaned  case	12	None	replace
6	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    true);    	non-compiled	[CE]  orphaned  case	12	None	replace
7	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    true);    	non-compiled	[CE]  orphaned  case	12	None	replace
8	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op,  false));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op,  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op,  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    false));    	non-compiled	[CE]  orphaned  case	36	None	replace
9	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  false));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    false));    	non-compiled	[CE]  orphaned  case	36	None	replace
10	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  true));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    false));    	non-compiled	[CE]  orphaned  case	36	None	replace
11	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  true));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getLastChild(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false));    	non-compiled	[CE]  orphaned  case	25	None	replace
12	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  false));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getLastChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false));    	non-compiled	[CE]  orphaned  case	25	None	replace
13	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  false));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getLastChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false));    	non-compiled	[CE]  orphaned  case	25	None	replace
14	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	15	None	replace
15	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	15	None	replace
16	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(n.getString(),    false));    	non-compiled	[CE]  orphaned  case	8	None	replace
17	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
18	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
19	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
20	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
21	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
22	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false);	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
23	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VAR    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	33	None	replace
24	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VAR    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	33	None	replace
25	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VAR    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	33	None	replace
26	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	32	None	replace
27	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	32	None	replace
28	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  left.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    left.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	32	None	replace
29	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getString(),    false);    	non-compiled	[CE]  orphaned  case	17	None	replace
30	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getString(),    false);    	non-compiled	[CE]  orphaned  case	17	None	replace
31	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	4	None	replace
32	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	4	None	replace
33	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	4	None	replace
34	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getString(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
35	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getString(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
36	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(op.getString(),    false));    	non-compiled	[CE]  orphaned  case	7	None	replace
37	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false);	  boolean    leftLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	20	None	replace
38	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(op.getString(),  true);	  boolean    leftLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	20	None	replace
39	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false);	  boolean    leftLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	20	None	replace
40	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(n.getString(),  true);	  boolean    leftLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	20	None	replace
41	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(ln.getString(),  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(ln.getString(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(ln.getString(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(n.getString(),    false);    	non-compiled	[CE]  orphaned  case	19	None	replace
42	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true),  result);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true),  result);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true),  result);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false),    result);    	non-compiled	[CE]  orphaned  case	30	None	replace
43	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false),  result);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false),  result);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false),  result);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false),    result);    	non-compiled	[CE]  orphaned  case	30	None	replace
44	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)||  result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)||  result);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)||  result);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false),    result);    	non-compiled	[CE]  orphaned  case	30	None	replace
45	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false),  result);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false),  result);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getString(),  false),  result);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false),    result);    	non-compiled	[CE]  orphaned  case	30	None	replace
46	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)||  result;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)||  result;  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)||  result;	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false),    result);    	non-compiled	[CE]  orphaned  case	30	None	replace
47	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)&&  result);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)&&  result);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  true)&&  result);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false),    result);    	non-compiled	[CE]  orphaned  case	30	None	replace
48	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	34	None	replace
49	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild()	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined   "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild()    	non-compiled	[CE]  orphaned  case	34	None	replace
50	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	39	None	replace
51	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VOID    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	39	None	replace
52	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(RIGHT.getString(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	5	None	replace
53	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VAR    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	40	None	replace
54	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VAR    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	40	None	replace
55	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  left.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(left.getFirstChil	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VAR    ==    right.getType()    &&    NodeUtil.isLiteralValue(left.getFirstChild    	non-compiled	[CE]  orphaned  case	40	None	replace
56	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  true));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getFirstChild(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(n.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	27	None	replace
57	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getLastChild(),    false);    	non-compiled	[CE]  orphaned  case	11	None	replace
58	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  true));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getFirstChild(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getFirstChild(),    true));    	non-compiled	[CE]  orphaned  case	24	None	replace
59	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    true);    	non-compiled	[CE]  orphaned  case	35	None	replace
60	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    true);    	non-compiled	[CE]  orphaned  case	35	None	replace
61	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getNext(),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getNext(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getNext(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    true);    	non-compiled	[CE]  orphaned  case	35	None	replace
62	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
63	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  n.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
64	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  left.getNext();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  left.getNext();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
65	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
66	[BUG]  [BUGGY]  Node  right  =  op.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  op.getFirstChild();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  op.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
67	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  node.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
68	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  true));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getNext(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false));    	non-compiled	[CE]  orphaned  case	37	None	replace
69	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  false));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false));    	non-compiled	[CE]  orphaned  case	37	None	replace
70	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  false));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false));    	non-compiled	[CE]  orphaned  case	37	None	replace
71	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getNext(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false);    	non-compiled	[CE]  orphaned  case	38	None	replace
72	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(op.getNext(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false);    	non-compiled	[CE]  orphaned  case	38	None	replace
73	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false);    	non-compiled	[CE]  orphaned  case	38	None	replace
74	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(op.getFirstChild(),    false);    	non-compiled	[CE]  orphaned  case	21	None	replace
75	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  false));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false));    	non-compiled	[CE]  orphaned  case	37	None	replace
76	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getLastChild(),    false));    	non-compiled	[CE]  orphaned  case	25	None	replace
77	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(op.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	26	None	replace
78	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getFirstChild(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(op.getFirstChild(),    true);    	non-compiled	[CE]  orphaned  case	29	None	replace
79	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(left.getString(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getString(),    false));    	non-compiled	[CE]  orphaned  case	6	None	replace
80	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    false));    	non-compiled	[CE]  orphaned  case	36	None	replace
81	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getParent(),  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    true);    	non-compiled	[CE]  orphaned  case	35	None	replace
82	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getFirstChild(),  true));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getFirstChild(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getFirstChild(),  true));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
83	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
84	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
85	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false)||  result);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false)||  result);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false)||  result);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    false),    result);    	non-compiled	[CE]  orphaned  case	30	None	replace
86	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  true));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  true));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getLastChild(),  true));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(left.getFirstChild(),    false));    	non-compiled	[CE]  orphaned  case	22	None	replace
87	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getChild(),  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getChild(),  false);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(left.getChild(),  false);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(n.getLastChild(),    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
88	[BUG]  [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  leftLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false));	  boolean    leftLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true);    	non-compiled	[CE]  orphaned  case	20	None	replace
89	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  null));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  null));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  null));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
90	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(right.getString(),  false)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false));	  Boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getString(),    true));    	non-compiled	[CE]  orphaned  case	41	None	replace
91	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getNext(),  false));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getNext(),  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n.getNext(),  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right.getNext(),    false));    	non-compiled	[CE]  orphaned  case	37	None	replace
92	[BUG]  [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n,  false));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  rightLiteral  =  NodeUtil.isLiteralValue(n,  false));  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  rightLiteral  =  NodeUtil.isLiteralValue(n,  false));	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(right,    false));    	non-compiled	[CE]  orphaned  case	36	None	replace
93	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  ||  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VAR    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	16	None	replace
94	[BUG]  [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	boolean  undefinedRight  =((  Token.NAME  ==  right.getType()  &&  right.getString().equals( "undefined "))  ||  (Token.VAR  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChil	  boolean    undefinedRight    =((Token.NAME    ==    right.getType()    &&    right.getString().equals(   "undefined       "))    ||    (Token.VAR    ==    right.getType()    &&    NodeUtil.isLiteralValue(right.getFirstChild    	non-compiled	[CE]  orphaned  case	16	None	replace
95	[BUG]  [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (n.getType()  !=  Token.GT  &&  n.getType()  !=  Token.LT)  {  return  n;  }  }  int  op  =  n.getType();  boolean  result;        [BUGGY]  Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true);  [BUGGY]      boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	902	902	3	replace	Boolean  rightLiteral  =  NodeUtil.isLiteralValue(left,  true);	  boolean    rightLiteral    =    NodeUtil.isLiteralValue(n,    true);    	non-compiled	[CE]  orphaned  case	3	None	replace
