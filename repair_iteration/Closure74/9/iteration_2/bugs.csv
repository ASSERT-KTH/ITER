bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    true))    {    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    true))    {    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&  undefinedRight  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&  undefinedRight  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&  undefinedRight  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  left.getType()  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  left.getType()  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  left.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  left.getType()  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  left.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  left.getType()  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  left.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  op  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  Node  op  =  left.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  op  =  left.getNext();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getNext();	      	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  Node  op  =  right.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  op  =  right.getFirstChild();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  right.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  Node  op  =  right.getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  op  =  right.getNext();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  right.getNext();	      	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
31	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!UndefinedRight)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
32	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
33	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!undefinedRight)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!undefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  	8	None	replace
37	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	11	None	replace
38	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  lhType  ==  Token.VOID)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRightType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRightType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	12	None	replace
44	[BUG]  [BUGGY]  if  (right!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (right!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (right!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  if  ((  left!=  null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  ((  left!=  null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  ((  left!=  null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    true))    {    	non-compiled	[CE]  	3	None	replace
48	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!UndefinedRight)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
50	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
51	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  true))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	11	None	replace
53	[BUG]  [BUGGY]  Node  op  =  left.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  op  =  left.getLastChild();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getLastChild();	      	non-compiled	[CE]  	6	None	replace
54	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  right.getType()  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  right.getType()  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  right.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	4	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  right.getType()  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  right.getType()  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  right.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	4	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  rhType  ==  Token.VOID)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  rhType  ==  Token.VOID)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  rhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	12	None	replace
61	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||!UndefinedRight)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||!UndefinedRight)  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	13	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  op);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  op);  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  op);	      	non-compiled	[CE]  	6	None	replace
66	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:    [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false))  {  [BUGGY]    return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
