bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  rhType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  rhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	60	None	replace
2	[BUG]  [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  if    ((    left!=    null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	45	None	replace
3	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
4	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
5	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
6	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
7	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRight)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
8	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ||  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ||  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ||  left.getType()  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
9	[BUG]  [BUGGY]  Node  op  =  right.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  right.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  right.getLastChild();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	23	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||!UndefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||!UndefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	48	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!undefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!undefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	48	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	48	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	48	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	48	None	replace
15	[BUG]  [BUGGY]  Node  n  =  right.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  right.getNext();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  right.getNext();	  Node    op    =    right.getNext();    	non-compiled	[CE]  	29	None	replace
16	[BUG]  [BUGGY]  Node  op  =  left.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getParent();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getParent();	  Node    op    =    right.getNext();    	non-compiled	[CE]  	29	None	replace
17	[BUG]  [BUGGY]  Node  op  =  right.getNext()  ||  undefinedRight;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  right.getNext()  ||  undefinedRight;  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  right.getNext()  ||  undefinedRight;	  Node    op    =    right.getNext();    	non-compiled	[CE]  	29	None	replace
18	[BUG]  [BUGGY]  if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (right!=    null    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	44	None	replace
19	[BUG]  [BUGGY]  if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (right!=    null    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	44	None	replace
20	[BUG]  [BUGGY]  if  (n!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (n!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (n!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (right!=    null    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	44	None	replace
21	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  true)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  true)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  true)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	25	None	replace
23	[BUG]  [BUGGY]  Node  right  =  right.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  right.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  right.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	25	None	replace
24	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  right.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	25	None	replace
25	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	25	None	replace
26	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)||!UndefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	34	None	replace
27	[BUG]  [BUGGY]  Node  op  =  left.getNext()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getNext()  +  1;  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getNext()  +  1;	  Node    op    =    left.getNext();    	non-compiled	[CE]  	24	None	replace
28	[BUG]  [BUGGY]  Node  op  =  left.getNext()  ||  undefinedRight;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getNext()  ||  undefinedRight;  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getNext()  ||  undefinedRight;	  Node    op    =    left.getNext();    	non-compiled	[CE]  	24	None	replace
29	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  right.getType()  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  right.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  right.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	20	None	replace
30	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true)||!UndefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true)||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    true)||!UndefinedRight)    {    	non-compiled	[CE]  	61	None	replace
31	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRight  ==  Token.VOID)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRight  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRight  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)    &&    undefinedRight    ==    Token.VOID)    {    	non-compiled	[CE]  	17	None	replace
32	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ==  Token.VOID)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)    &&    undefinedRight    ==    Token.VOID)    {    	non-compiled	[CE]  	17	None	replace
33	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRight  ==  Token.VOID)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRight  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  undefinedRight  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)    &&    undefinedRight    ==    Token.VOID)    {    	non-compiled	[CE]  	17	None	replace
34	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	38	None	replace
35	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	14	None	replace
36	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)    &&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	21	None	replace
37	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)    &&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	21	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  lhType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    true)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	41	None	replace
39	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true)||  lhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(right.getFirstChild(),  true)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    true)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	41	None	replace
40	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    true)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	41	None	replace
41	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	15	None	replace
42	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	15	None	replace
43	[BUG]  [BUGGY]  if(lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	15	None	replace
44	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!undefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!undefinedRight)    {    	non-compiled	[CE]  	33	None	replace
45	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!undefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!undefinedRight)    {    	non-compiled	[CE]  	33	None	replace
46	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!undefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!undefinedRight)    {    	non-compiled	[CE]  	33	None	replace
47	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRightType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRightType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    undefinedRightType    ==    Token.VOID)    {    	non-compiled	[CE]  	43	None	replace
48	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRightType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  undefinedRightType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    undefinedRightType    ==    Token.VOID)    {    	non-compiled	[CE]  	43	None	replace
49	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  undefinedRightType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)||  undefinedRightType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    undefinedRightType    ==    Token.VOID)    {    	non-compiled	[CE]  	43	None	replace
50	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType!=  Token.VOID)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType!=  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType!=  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    undefinedRightType    ==    Token.VOID)    {    	non-compiled	[CE]  	43	None	replace
51	[BUG]  [BUGGY]  if(TokenUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(TokenUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(TokenUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(n!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(n!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(right!=    null    ||!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	46	None	replace
53	[BUG]  [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(right!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right!=  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  true))  {	  if(right!=    null    ||!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	46	None	replace
54	[BUG]  [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(right  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(right!=    null    ||!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	46	None	replace
55	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  right.getType()  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  right.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  right.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    right.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	58	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	22	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	22	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(right.getLastChild(),    true))    {    	non-compiled	[CE]  	57	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  undefinedRight))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  undefinedRight))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  undefinedRight))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(right.getLastChild(),    true))    {    	non-compiled	[CE]  	57	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  lhType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	52	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  lhType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	52	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	52	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  rhType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	52	None	replace
64	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(right.getType()    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
65	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(right.getType()    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
66	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VOID  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(right.getType()  ==  Token.VOID  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right.getType()  ==  Token.VOID  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(right.getType()    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
67	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(left.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(right.getType()    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
68	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	40	None	replace
69	[BUG]  [BUGGY]  if(lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	40	None	replace
70	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
71	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  left  =  right.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
72	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	30	None	replace
73	[BUG]  [BUGGY]  Node  op  =  left.getLastChild();  result  =  compareToUndefined(op,  op);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getLastChild();  result  =  compareToUndefined(op,  op);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getLastChild();  result  =  compareToUndefined(op,  op);	  Node    op    =    left.getFirstChild();    result    =    compareToUndefined(op,    op);    	non-compiled	[CE]  	65	None	replace
74	[BUG]  [BUGGY]  Node  op  =  left.getNext();  result  =  compareToUndefined(op,  op);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getNext();  result  =  compareToUndefined(op,  op);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getNext();  result  =  compareToUndefined(op,  op);	  Node    op    =    left.getFirstChild();    result    =    compareToUndefined(op,    op);    	non-compiled	[CE]  	65	None	replace
75	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  lhType);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  lhType);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  lhType);	  Node    op    =    left.getFirstChild();    result    =    compareToUndefined(op,    op);    	non-compiled	[CE]  	65	None	replace
76	[BUG]  [BUGGY]  Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  undefinedRight);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  undefinedRight);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getFirstChild();  result  =  compareToUndefined(op,  undefinedRight);	  Node    op    =    left.getFirstChild();    result    =    compareToUndefined(op,    op);    	non-compiled	[CE]  	65	None	replace
77	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getNext(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getNext(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(right.getNext(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    true))    {    	non-compiled	[CE]  	51	None	replace
78	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getNext(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    true))    {    	non-compiled	[CE]  	51	None	replace
79	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    true))    {    	non-compiled	[CE]  	51	None	replace
80	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  lhType);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.getNext(),  lhType);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getNext(),  lhType);	  Node    right    =    left.getNext();    	non-compiled	[CE]  	54	None	replace
81	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	54	None	replace
82	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  undefinedRight;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.getNext(),  undefinedRight;  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getNext(),  undefinedRight;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	54	None	replace
83	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	54	None	replace
84	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(right.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	11	None	replace
85	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  if(NodeUtil.isLiteralValue(right.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	11	None	replace
86	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
87	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
88	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
89	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  left.getNext();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  left.getNext();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
90	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
91	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  right.getNext();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  right.getNext();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
92	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  right.getType()  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  right.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  right.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    right.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	56	None	replace
93	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isName(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
97	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left)||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
98	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getNext(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(right.getNext(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(right.getNext(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    false))    {    	non-compiled	[CE]  	66	None	replace
99	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)||  left.getType()  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)||  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  false)||  left.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    false))    {    	non-compiled	[CE]  	66	None	replace
100	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  rhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  rhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	39	None	replace
101	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRightType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    undefinedRightType    ==    Token.VOID)    {    	non-compiled	[CE]  	16	None	replace
102	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  right.getFirstChild();	  Node    op    =    right.getFirstChild();    	non-compiled	[CE]  	27	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(left.getLastChild(),  undefinedRight))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(left.getLastChild(),  undefinedRight))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(left.getLastChild(),  undefinedRight))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  	36	None	replace
104	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&!UndefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  true)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!UndefinedRight)    {    	non-compiled	[CE]  	35	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	49	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!undefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	49	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&!UndefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	49	None	replace
108	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	13	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
112	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
113	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChil  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChil  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChil	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
114	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild(),	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
115	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
116	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
117	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
118	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  left.getNext();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.getNext();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
119	[BUG]  [BUGGY]  Node  n  =  right.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  right.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  right.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
120	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.removeFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
121	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild().getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  left.getFirstChild().getNext();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.getFirstChild().getNext();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
122	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(n.getLastChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(n.getLastChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(n.getLastChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
123	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if((    left.getType()    ==    Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	63	None	replace
124	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if((    left.getType()    ==    Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	63	None	replace
125	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if((    left.getType()    ==    Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	63	None	replace
126	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.VAR)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left.getType()  ==  Token.VAR)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.VAR)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if((    left.getType()    ==    Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	63	None	replace
127	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(n.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(n.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(n.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
128	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  rhType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	42	None	replace
129	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRightType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRightType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	42	None	replace
130	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	3	None	replace
131	[BUG]  [BUGGY]  Node  op  =  left.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.removeFirstChild();	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	53	None	replace
132	[BUG]  [BUGGY]  Node  op  =  node.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  node.getLastChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  node.getLastChild();	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	53	None	replace
133	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getParent();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	54	None	replace
134	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	42	None	replace
135	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    false))    {    	non-compiled	[CE]  	66	None	replace
136	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    false))    {    	non-compiled	[CE]  	66	None	replace
137	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  true))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getNext(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    false))    {    	non-compiled	[CE]  	66	None	replace
138	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  true)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  true)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  true)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    false))    {    	non-compiled	[CE]  	66	None	replace
139	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getNext(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    false))    {    	non-compiled	[CE]  	66	None	replace
140	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	7	None	replace
141	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!undefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!undefinedRight)    {    	non-compiled	[CE]  	33	None	replace
142	[BUG]  [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  	36	None	replace
143	[BUG]  [BUGGY]  Node  n  =  left.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  left.cloneTree();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.cloneTree();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
144	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(left,  newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  left.replaceChild(left,  newNode);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.replaceChild(left,  newNode);	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
145	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    true))    {    	non-compiled	[CE]  	10	None	replace
146	[BUG]  [BUGGY]  Node  op  =  left.cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.cloneTree();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.cloneTree();	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	23	None	replace
147	[BUG]  [BUGGY]  Node  op  =  left.replaceChild(n,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.replaceChild(n,  newNode);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.replaceChild(n,  newNode);	  Node    op    =    left.getFirstChild();    	non-compiled	[CE]  	23	None	replace
148	[BUG]  [BUGGY]  Node  op  =  left.removeFirstChild();  result  =  compareToUndefined(op,  op);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.removeFirstChild();  result  =  compareToUndefined(op,  op);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.removeFirstChild();  result  =  compareToUndefined(op,  op);	  Node    op    =    left.getFirstChild();    result    =    compareToUndefined(op,    op);    	non-compiled	[CE]  	65	None	replace
149	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
150	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (right!=    null    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	44	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	4	None	replace
152	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
153	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
154	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
155	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
156	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
157	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  left.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	20	None	replace
158	[BUG]  [BUGGY]  if  (lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	15	None	replace
159	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
160	[BUG]  [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right!=  null  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(right!=    null    ||!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	46	None	replace
161	[BUG]  [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(left!=  null  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(left!=  null  &&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(right!=    null    ||!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	46	None	replace
162	[BUG]  [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	6	None	replace
163	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
164	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getNext(),  false)&&!UndefinedRight)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getNext(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getNext(),  false)&&!UndefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	49	None	replace
165	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRight  ==  Token.VOID)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRight  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  undefinedRight  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)    &&    undefinedRight    ==    Token.VOID)    {    	non-compiled	[CE]  	17	None	replace
166	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight  ==  Node.VOID)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight  ==  Node.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  undefinedRight  ==  Node.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    false)    &&    undefinedRight    ==    Token.VOID)    {    	non-compiled	[CE]  	17	None	replace
167	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.getfirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	55	None	replace
168	[BUG]  [BUGGY]  Node  op  =  left.getfirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.getfirstChild();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.getfirstChild();	  Node    op    =    right.getFirstChild();    	non-compiled	[CE]  	27	None	replace
169	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false)||  rightLiteral)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false)||  rightLiteral)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false)||  rightLiteral)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(right.getLastChild(),    true))    {    	non-compiled	[CE]  	57	None	replace
170	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(right.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(right.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	11	None	replace
171	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	40	None	replace
172	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	25	None	replace
173	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  right  =  left.replaceChild(n,  newNode);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  	25	None	replace
174	[BUG]  [BUGGY]  if  (right!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (right!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (right!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
175	[BUG]  [BUGGY]  if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (left!=  null  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
176	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    true))    {    	non-compiled	[CE]  	51	None	replace
177	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  false)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    true))    {    	non-compiled	[CE]  	51	None	replace
178	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	22	None	replace
179	[BUG]  [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    ((    left!=    null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	45	None	replace
180	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!UndefinedRight)    {    	non-compiled	[CE]  	35	None	replace
181	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!UndefinedRight)    {    	non-compiled	[CE]  	35	None	replace
182	[BUG]  [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
183	[BUG]  [BUGGY]  if  (lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (lhType  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
184	[BUG]  [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
185	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild()  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild()  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false)  &&!NodeUtil.isLiteralValue(left.getLastChild()	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
186	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  undefinedRightType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  undefinedRightType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  undefinedRightType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    undefinedRightType    ==    Token.VOID)    {    	non-compiled	[CE]  	43	None	replace
187	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(left.getType()  ==  Token.VAR  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(left.getType()  ==  Token.VAR  ||!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(right.getType()    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
188	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.EMPTY)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left.getType()  ==  Token.EMPTY)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.EMPTY)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if((    left.getType()    ==    Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	63	None	replace
189	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.VAR)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left.getType()  ==  Token.VAR)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.VAR)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if((    left.getType()    ==    Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	63	None	replace
190	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||!UndefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	34	None	replace
191	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(n,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  n  =  left.replaceChild(n,  newNode);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  n  =  left.replaceChild(n,  newNode);	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  	26	None	replace
192	[BUG]  [BUGGY]  Node  op  =  left.replaceChild(n,  rhType);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  left.replaceChild(n,  rhType);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  left.replaceChild(n,  rhType);	  Node    op    =    left.getLastChild();    	non-compiled	[CE]  	53	None	replace
193	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isAssignmentOp(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isAssignmentOp(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	40	None	replace
194	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||  lhType  ==  Token.VOID)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	40	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	6	None	replace
196	[BUG]  [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)||  lhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if  (!NodeUtil.isLiteralValue(left.getNext(),  false)||  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if  (!NodeUtil.isLiteralValue(left.getNext(),  false)||  lhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getNext(),    true))    {    	non-compiled	[CE]  	51	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.isName(left)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
198	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
199	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isAssignmentOp(left)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isAssignmentOp(left)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isVarDeclaration(left)||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	62	None	replace
200	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  lhType  ==  Token.VOID)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	52	None	replace
201	[BUG]  [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(right!=  null  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right!=  null  &&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if    (right!=    null    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	44	None	replace
202	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  n  =  left.replaceChild(n,  newNode);  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	n  =  left.replaceChild(n,  newNode);	  n    =    left.getFirstChild();    	non-compiled	[CE]  	28	None	replace
203	[BUG]  [BUGGY]  if(op  ==  null  ||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(op  ==  null  ||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(op  ==  null  ||!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
204	[BUG]  [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(result  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(result  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
205	[BUG]  [BUGGY]  if(op  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(op  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(op  ==  null  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if    (!NodeUtil.isLiteralValue(right.getFirstChild(),    false))    {    	non-compiled	[CE]  	2	None	replace
206	[BUG]  [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getString(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getString(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left!=  null)&&!NodeUtil.isLiteralValue(left.getString(),  false))  {	  if    ((    left!=    null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	45	None	replace
207	[BUG]  [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left!=  null)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left!=  null)&&!NodeUtil.isLiteralValue(right.getFirstChild(),  false))  {	  if    ((    left!=    null)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	45	None	replace
208	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!undefinedRight)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!undefinedRight)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	48	None	replace
209	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  	36	None	replace
210	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(right.getLastChild(),    true))    {    	non-compiled	[CE]  	57	None	replace
211	[BUG]  [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  true))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(right.getLastChild(),    true))    {    	non-compiled	[CE]  	57	None	replace
212	[BUG]  [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left.getFirstChild(),  false)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	22	None	replace
213	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getLastChild(),  true))  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    true))    {    	non-compiled	[CE]  	1	None	replace
214	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&!UndefinedRight  ||  left.getString().equals( "undefined "))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	49	None	replace
215	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!undefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!undefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||!undefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&!undefinedRight)    {    	non-compiled	[CE]  	33	None	replace
216	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isAssignmentOp(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
217	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  true)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	9	None	replace
218	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)&&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	8	None	replace
219	[BUG]  [BUGGY]  if(NodeUtil.isName(left.getFirstChild())||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left.getFirstChild())||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left.getFirstChild())||!NodeUtil.isLiteralValue(left.getLastChild(),  false)||!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)||!UndefinedRight)    {    	non-compiled	[CE]  	34	None	replace
220	[BUG]  [BUGGY]  Node  op  =  right.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  Node  op  =  right.getParent();  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	Node  op  =  right.getParent();	  Node    op    =    right.getNext();    	non-compiled	[CE]  	29	None	replace
221	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left)||  NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	4	None	replace
222	[BUG]  [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if((  left.getType()  ==  Token.VOID)&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&  rhType  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&    rhType    ==    Token.VOID)    {    	non-compiled	[CE]  	15	None	replace
223	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	3	None	replace
224	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)||  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	3	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    false))    {    	non-compiled	[CE]  	3	None	replace
226	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  NodeUtil.isVarDeclaration(left.getFirstChild(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
227	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  true))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  true))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  true))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
228	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getString(),  false))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getString(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getString(),  false))  {	  if    (NodeUtil.isLiteralValue(left.getFirstChild(),    true))    {    	non-compiled	[CE]  	47	None	replace
229	[BUG]  [BUGGY]  if(NodeUtil.isName(left.getFirstChild())&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isName(left.getFirstChild())&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isName(left.getFirstChild())&&!NodeUtil.isLiteralValue(left.getLastChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
230	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&!UndefinedRight)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&!UndefinedRight)  {	  if(!NodeUtil.isLiteralValue(left.getLastChild(),    false)&&!UndefinedRight)    {    	non-compiled	[CE]  	50	None	replace
231	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  left.getType()  ==  Token.VOID)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  left.getType()  ==  Token.VOID)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  left.getType()  ==  Token.VOID)  {	  if    (!NodeUtil.isLiteralValue(left.getFirstChild(),    true)||    left.getType()    ==    Token.VOID)    {    	non-compiled	[CE]  	18	None	replace
232	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isAssignmentOp(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),  true)&&!NodeUtil.isLiteralValue(left.getLastChild	  if(NodeUtil.isVarDeclaration(left)&&!NodeUtil.isLiteralValue(left.getFirstChild(),    true)&&!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	59	None	replace
233	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID  ||  rhType  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID  ||  rhType  ==  Token.VAR)  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  lhType  ==  Token.VOID  ||  rhType  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    lhType    ==    Token.VOID)    {    	non-compiled	[CE]  	42	None	replace
234	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ||  left.getString().equals( "undefined "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ||  left.getString().equals( "undefined "))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(!NodeUtil.isLiteralValue(left.getFirstChild(),  false)||  undefinedRight  ||  left.getString().equals( "undefined "))  {	  if(!NodeUtil.isLiteralValue(left.getFirstChild(),    false)||    undefinedRight)    {    	non-compiled	[CE]  	32	None	replace
235	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isImmutableValue(left.getFirstChild(),  false)&&  NodeUtil.isLiteralValue(left.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(left.getFirstChild(),    false)&&    NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	5	None	replace
236	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(right.getType()  ==  Token.VOID  ||!NodeUtil.isLiteralValue(left.getFirstChild(),  false))  {	  if(right.getType()    ==    Token.VOID    ||!NodeUtil.isLiteralValue(left.getLastChild(),    false))    {    	non-compiled	[CE]  	64	None	replace
237	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      boolean  rightLiteral  =  NodeUtil.isLiteralValue(right,  false);  boolean  undefinedRight  =  ((Token.NAME  ==  right.getType()  &&  right.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  right.getType()  &&  NodeUtil.isLiteralValue(right.getFirstChild(),  false)));  int  lhType  =  left.getType();  int  rhType  =  right.getType();  switch  (lhType)  {  case  Token.VOID:      [BUGGY]  if(NodeUtil.isVarDeclaration(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {  [BUGGY]      return  n;  }  else  if  (!rightLiteral)  {  return  n;  }  else  {  result  =  compareToUndefined(right,  op);  }  break;  case  Token.NULL:  case  Token.TRUE:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	911	911	3	replace	if(NodeUtil.isVarDeclaration(left.getFirstChild(),  false)||  NodeUtil.isLiteralValue(right.getLastChild(),  false))  {	  if(NodeUtil.isLiteralValue(right.getFirstChild(),    false)||    NodeUtil.isLiteralValue(right.getLastChild(),    false))    {    	non-compiled	[CE]  	11	None	replace
