bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
2	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return  false;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
3	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
4	[BUG]  [BUGGY]  case  Token.NE:  return!equivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return!equivalent;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!equivalent;  if(valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
5	[BUG]  [BUGGY]  if(valueNull)return!boolean;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!boolean;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!boolean;	  if(valueNull)return!negative;    	non-compiled	[CE]  	120	None	replace
6	[BUG]  [BUGGY]  if(valueNull)return!equals;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!equals;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!equals;	  if(valueNull)return!negative;    	non-compiled	[CE]  	120	None	replace
7	[BUG]  [BUGGY]  if(valueNull)return!false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!false;	  if(valueNull)return!negate;    	non-compiled	[CE]  	20	None	replace
8	[BUG]  [BUGGY]  if(valueNull)return!return;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!return;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!return;	  if(valueNull)return!negate;    	non-compiled	[CE]  	20	None	replace
9	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getLastChild();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getLastChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
10	[BUG]  [BUGGY]  Node  value  =  value.getNext();  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
11	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  op.getFirstChild();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  op.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
12	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  this.value.getFirstChild();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  this.value.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
13	[BUG]  [BUGGY]  Node  value  =  this.value.getLastChild();  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  this.value.getLastChild();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  this.value.getLastChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
14	[BUG]  [BUGGY]  Node  value  =  item.getFirstChild();  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  item.getFirstChild();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  item.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
15	[BUG]  [BUGGY]  if(valueNull)return!op;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!op;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!op;	  if(valueNull)return!nequivalent;    	non-compiled	[CE]  	121	None	replace
16	[BUG]  [BUGGY]  return  valueNull?!nequivalent?  valueNull  :  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!nequivalent?  valueNull  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent?  valueNull  :  valueNull;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
17	[BUG]  [BUGGY]  return  valueNull?!nequivalent  :  valueUndefined;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!nequivalent  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent  :  valueUndefined;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
18	[BUG]  [BUGGY]  return  valueNull?!nequivalent  &&  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!nequivalent  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent  &&  valueNull;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
19	[BUG]  [BUGGY]  return  valueNull?!Nequivalent  :  valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!Nequivalent  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!Nequivalent  :  valueNull;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
20	[BUG]  [BUGGY]  return  valueNull?!nequivalent  :  equalizer;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!nequivalent  :  equalizer;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent  :  equalizer;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
21	[BUG]  [BUGGY]  return!valueUndefined;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueUndefined;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueUndefined;  if(valueNull)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
22	[BUG]  [BUGGY]  result  =!valueUndefined;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!valueUndefined;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!valueUndefined;  if(valueNull)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
23	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(equivalent)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueUndefined;  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;  if(equivalent)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
24	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  ||  valueNull);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getLastChild();  return(valueNull  ||  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  	143	None	replace
25	[BUG]  [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||  valueNull);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext();  return(valueNull  ||  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  	143	None	replace
26	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  &&  valueNull);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  &&  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getFirstChild();  return(valueNull  &&  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  	143	None	replace
27	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  &&  valueNull);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  &&  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getLastChild();  return(valueNull  &&  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  	143	None	replace
28	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  return(valueNull  ||  valueNull);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  op.getFirstChild();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  op.getFirstChild();  return(valueNull  ||  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  	143	None	replace
29	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||  equal);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||  equal);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getFirstChild();  return(valueNull  ||  equal);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  	143	None	replace
30	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)?  true  :!negated;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  valueNull)?  true  :!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  valueNull)?  true  :!negated;	  return(valueNull    ||    valueNull)?    true    :!negated;    	non-compiled	[CE]  	84	None	replace
31	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  true  :!equivalent;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  true  :!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  true  :!equivalent;	  return(valueNull    ||    valueNull)?    true    :!negated;    	non-compiled	[CE]  	84	None	replace
32	[BUG]  [BUGGY]  return(valueNull  ||  op)?  true  :!negated;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  op)?  true  :!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  op)?  true  :!negated;	  return(valueNull    ||    valueNull)?    true    :!negated;    	non-compiled	[CE]  	84	None	replace
33	[BUG]  [BUGGY]  return(valueNull  ||  equal)?  true  :!negated;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  equal)?  true  :!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  equal)?  true  :!negated;	  return(valueNull    ||    valueNull)?    true    :!negated;    	non-compiled	[CE]  	84	None	replace
34	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :  true;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :  true;	  return(valueNull    ||    valueNull)?    true    :!negated;    	non-compiled	[CE]  	84	None	replace
35	[BUG]  [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
36	[BUG]  [BUGGY]  ||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
37	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild()  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
38	[BUG]  [BUGGY]  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	&&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
39	[BUG]  [BUGGY]  return  valueNull?!valueUndefined?  valueNull  :  valueUndefined;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined?  valueNull  :  valueUndefined;	  return    valueNull?!equivalent?    valueNull    :    valueUndefined;    	non-compiled	[CE]  	16	None	replace
40	[BUG]  [BUGGY]  return  valueNull?!valueNull?  valueNull  :  valueUndefined;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull?  valueNull  :  valueUndefined;	  return    valueNull?!equivalent?    valueNull    :    valueUndefined;    	non-compiled	[CE]  	16	None	replace
41	[BUG]  [BUGGY]  return  valueNull?!equivalent  &&  valueNull  :  valueUndefined;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  &&  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  &&  valueNull  :  valueUndefined;	  return    valueNull?!equivalent?    valueNull    :    valueUndefined;    	non-compiled	[CE]  	16	None	replace
42	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNull  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :!valueNull  +  1;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNull  +  1;	  return    valueNull?!valueNull    :!valueNull;    	non-compiled	[CE]  	53	None	replace
43	[BUG]  [BUGGY]  return  valueNull??valueNull  :!valueNull;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull??valueNull  :!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull??valueNull  :!valueNull;	  return    valueNull?!valueNull    :!valueNull;    	non-compiled	[CE]  	53	None	replace
44	[BUG]  [BUGGY]  return  valueNull?  valueNull  :!valueEquivalent;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueNull  :!valueEquivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :!valueEquivalent;	  return    equal?    valueNull    :!valueEquivalent;    	non-compiled	[CE]  	86	None	replace
45	[BUG]  [BUGGY]  return  valueNull?  equal  :!valueEquivalent;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :!valueEquivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!valueEquivalent;	  return    equal?    valueNull    :!valueEquivalent;    	non-compiled	[CE]  	86	None	replace
46	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNe;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNe;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!valueNe;  }	  if(valueNull)    {    return!valueNe;    }    	non-compiled	[CE]  	98	None	replace
47	[BUG]  [BUGGY]  while(valueNull)  {  if(valueNull)  {  return!valueNe;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  if(valueNull)  {  return!valueNe;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  if(valueNull)  {  return!valueNe;  }	  if(valueNull)    {    return!valueNe;    }    	non-compiled	[CE]  	98	None	replace
48	[BUG]  [BUGGY]  while(valueNull)  {  return!valueNe;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return!valueNe;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!valueNe;  }	  if(valueNull)    {    return!valueNe;    }    	non-compiled	[CE]  	98	None	replace
49	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return!valueNull;  }	  if(valueNull    ||    equal)    {    return!equivalent;    }    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  if(valueNull  &&  equal)  {  return!equivalent;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  &&  equal)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  equal)  {  return!equivalent;  }	  if(valueNull    ||    equal)    {    return!equivalent;    }    	non-compiled	[CE]  	3	None	replace
51	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!valueUndefined;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return!valueUndefined;  }	  if(valueNull    ||    equal)    {    return!equivalent;    }    	non-compiled	[CE]  	3	None	replace
52	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?!negated  :  true;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?!negated  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?!negated  :  true;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
53	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)?!negated  :  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  valueNull)?!negated  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  valueNull)?!negated  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
54	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
55	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?!Negated  :  true;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?!Negated  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?!Negated  :  true;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
56	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  true  :  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  true  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  true  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
57	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  null  :  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  null  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  null  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
58	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueUndefined;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  	4	None	replace
59	[BUG]  [BUGGY]  ||  valueNull)  {  return!valueUndefined;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	||  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  	4	None	replace
60	[BUG]  [BUGGY]  &&  valueNull)  {  return!valueUndefined;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  &&  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	&&  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  if(valueNull)return!negated;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negated;	  if(valueNull)return!booleanValue;    	non-compiled	[CE]  	23	None	replace
62	[BUG]  [BUGGY]  return  valueNull?valueNull  :!valueNegated;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueNull  :!valueNegated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNull  :!valueNegated;	  return    valueNull?!valueNull    :!valueNegated;    	non-compiled	[CE]  	58	None	replace
63	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNegated.booleanValue();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :!valueNegated.booleanValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNegated.booleanValue();	  return    valueNull?!valueNull    :!valueNegated;    	non-compiled	[CE]  	58	None	replace
64	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)?  0  :!negated;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  valueNull)?  0  :!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  valueNull)?  0  :!negated;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
65	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  1  :!negated;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  1  :!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  1  :!negated;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
66	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!equivalent;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!equivalent;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
67	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  -1  :!negated;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  -1  :!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  -1  :!negated;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
68	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!op;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!op;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!op;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
69	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  if(equivalent)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  if(equivalent)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
70	[BUG]  [BUGGY]  if(equivalent)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
71	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent  ||  equal)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent  ||  equal)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
72	[BUG]  [BUGGY]  if(valueNull)  {  if(requivalent)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(requivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(requivalent)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
73	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
74	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  true;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  true;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  true;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
75	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  false;  if(valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	45	None	replace
76	[BUG]  [BUGGY]  if(valueUndefined)return  false;  if(valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return  false;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return  false;  if(valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	45	None	replace
77	[BUG]  [BUGGY]  If(valueNull)return  false;  if(valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  If(valueNull)return  false;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	If(valueNull)return  false;  if(valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	45	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.NAME);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.NAME);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Preconditions.checkState(value.getType()  ==  Token.NAME);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
80	[BUG]  [BUGGY]  Context.checkState(valueNull);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Context.checkState(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Context.checkState(valueNull);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.NE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Preconditions.checkState(value.getType()  ==  Token.NE);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
82	[BUG]  [BUGGY]  Context.checkNotNull(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Context.checkNotNull(value);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Context.checkNotNull(value);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Preconditions.checkState(value.getType()  ==  Token.FUNCTION);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Preconditions.checkState(value.getType()  ==  Token.FUNCTION);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
84	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
85	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueUndefined;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueUndefined;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
86	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  null;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  null;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
87	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  true;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueNull  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :  true;	  return    valueNull?    valueNull    :    false;    	non-compiled	[CE]  	72	None	replace
88	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueNull  :  null;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :  null;	  return    valueNull?    valueNull    :    false;    	non-compiled	[CE]  	72	None	replace
89	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  false;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueUndefined  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueUndefined  :  false;	  return    valueNull?    valueNull    :    false;    	non-compiled	[CE]  	72	None	replace
90	[BUG]  [BUGGY]  return  valueNull?  null  :  false;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  null  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  null  :  false;	  return    valueNull?    valueNull    :    false;    	non-compiled	[CE]  	72	None	replace
91	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!valueNull;	  return(valueNull    ||    valueNull)?    false    :!negative;    	non-compiled	[CE]  	87	None	replace
92	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)?  false  :!negative;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  valueNull)?  false  :!negative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  valueNull)?  false  :!negative;	  return(valueNull    ||    valueNull)?    false    :!negative;    	non-compiled	[CE]  	87	None	replace
93	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  true  :!negative;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  true  :!negative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  true  :!negative;	  return(valueNull    ||    valueNull)?    false    :!negative;    	non-compiled	[CE]  	87	None	replace
94	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!equivalent;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!equivalent;	  return(valueNull    ||    valueNull)?    false    :!negative;    	non-compiled	[CE]  	87	None	replace
95	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!valueUndefined;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!valueUndefined;	  return(valueNull    ||    valueNull)?    false    :!negative;    	non-compiled	[CE]  	87	None	replace
96	[BUG]  [BUGGY]  if(valueUndefined)return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	155	None	replace
97	[BUG]  [BUGGY]  if(valueNull)return  true;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  true;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  true;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	155	None	replace
98	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  	151	None	replace
99	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  	151	None	replace
100	[BUG]  [BUGGY]  result!negate;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!negate;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!negate;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	48	None	replace
101	[BUG]  [BUGGY]  return!negate;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negate;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negate;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	48	None	replace
102	[BUG]  [BUGGY]  turn!negate;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  turn!negate;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	turn!negate;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	48	None	replace
103	[BUG]  [BUGGY]  return!negate;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negate;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negate;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	42	None	replace
104	[BUG]  [BUGGY]  result!negate;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!negate;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!negate;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	42	None	replace
105	[BUG]  [BUGGY]  if(valueNull)return!token;  if(valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!token;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!token;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	42	None	replace
106	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  valueUndefined;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  valueUndefined;	  return    valueNull?!valueNull    :    valueNull;    	non-compiled	[CE]  	15	None	replace
107	[BUG]  [BUGGY]  return  valueNull?!valueNull?  valueNull  :  valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull?  valueNull  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull?  valueNull  :  valueNull;	  return    valueNull?!valueNull    :    valueNull;    	non-compiled	[CE]  	15	None	replace
108	[BUG]  [BUGGY]  return  valueNull?valueNull  :  valueNull;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueNull  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNull  :  valueNull;	  return    valueNull?!valueNull    :    valueNull;    	non-compiled	[CE]  	15	None	replace
109	[BUG]  [BUGGY]  parent!=  null  &&  value.getType()  ==  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getType()  ==  Token.FUNCTION;	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	28	None	replace
110	[BUG]  [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  ||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  ||  parent.getType()  ==  Token.FUNCTION;	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	28	None	replace
111	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION;	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	28	None	replace
112	[BUG]  [BUGGY]  value!=  null  &&  value.getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  value!=  null  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	value!=  null  &&  value.getType()  ==  Token.FUNCTION;	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	28	None	replace
113	[BUG]  [BUGGY]  return  equalizer  &&!equivalent;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equalizer  &&!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equalizer  &&!equivalent;	  return    equalizer    ||!equivalent;    	non-compiled	[CE]  	61	None	replace
114	[BUG]  [BUGGY]  return  equalizer  ||!valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equalizer  ||!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equalizer  ||!valueNull;	  return    equalizer    ||!equivalent;    	non-compiled	[CE]  	61	None	replace
115	[BUG]  [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!nequivalent;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!nequivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	105	None	replace
116	[BUG]  [BUGGY]  return!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!nequivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	105	None	replace
117	[BUG]  [BUGGY]  result!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!nequivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	105	None	replace
118	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getLastChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isValue(value.getLastChild());	  return!valueNull    &&!NodeUtil.isValue(value.getFirstChild());    	non-compiled	[CE]  	152	None	replace
119	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getString());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isValue(value.getString());	  return!valueNull    &&!NodeUtil.isValue(value.getFirstChild());    	non-compiled	[CE]  	152	None	replace
120	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isValue(value.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isValue(value.getFirstChild());	  return!valueNull    &&!NodeUtil.isValue(value.getFirstChild());    	non-compiled	[CE]  	152	None	replace
121	[BUG]  [BUGGY]  return!valueNull  ||!NodeUtil.isValue(value.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||!NodeUtil.isValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||!NodeUtil.isValue(value.getFirstChild());	  return!valueNull    &&!NodeUtil.isValue(value.getFirstChild());    	non-compiled	[CE]  	152	None	replace
122	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getNext());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getNext());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isValue(value.getNext());	  return!valueNull    &&!NodeUtil.isValue(value.getFirstChild());    	non-compiled	[CE]  	152	None	replace
123	[BUG]  [BUGGY]  ||  valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ||  valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	||  valueNull)  {  return  valueUndefined;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
124	[BUG]  [BUGGY]  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  valueNull;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
125	[BUG]  [BUGGY]  if(valueNull)  {  return  null;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  null;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
126	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NE);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent.getType()  ==  Token.NE);	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
127	[BUG]  [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getString().equals( "undefined   ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(value.getType()    ==    Token.VOID    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	94	None	replace
128	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(value.getType()    ==    Token.VOID    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	94	None	replace
129	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(value.getType()    ==    Token.VOID    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	94	None	replace
130	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()!=  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()!=  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()!=  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(value.getType()    ==    Token.VOID    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	94	None	replace
131	[BUG]  [BUGGY]  return  valueNull?!valueNull?  valueNull  :  value;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull?  valueNull  :  value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull?  valueNull  :  value;	  return    valueNull?!valueNull    :    value;    	non-compiled	[CE]  	103	None	replace
132	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  value.getType();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :  value.getType();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  value.getType();	  return    valueNull?!valueNull    :    value;    	non-compiled	[CE]  	103	None	replace
133	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  value.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :  value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  value.getFirstChild();	  return    valueNull?!valueNull    :    value;    	non-compiled	[CE]  	103	None	replace
134	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueNull  :  value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :  value;	  return    valueNull?!valueNull    :    value;    	non-compiled	[CE]  	103	None	replace
135	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  value.getValue();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :  value.getValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  value.getValue();	  return    valueNull?!valueNull    :    value;    	non-compiled	[CE]  	103	None	replace
136	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  &&  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  &&  valueNull;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
137	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull?  valueNull  :  valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull?  valueNull  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull?  valueNull  :  valueNull;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
138	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  ||  equal;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  ||  equal;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  ||  equal;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
139	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  ||  valueUndefined;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  ||  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  ||  valueUndefined;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
140	[BUG]  [BUGGY]  Case  Token.NE:  return  valueNull  &&  valueNull;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Case  Token.NE:  return  valueNull  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Case  Token.NE:  return  valueNull  &&  valueNull;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
141	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  ||!valueNull;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  ||!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  ||!valueNull;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
142	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  valueNull)  {  return!valueNull;  }	  if(valueNull    ||    valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  	2	None	replace
143	[BUG]  [BUGGY]  case  Token.NE:  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
144	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  &&  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
145	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  throw  new  IllegalArgumentException( " ");  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
146	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild().getString());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild().getString());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());    	non-compiled	[CE]  	153	None	replace
147	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());    	non-compiled	[CE]  	153	None	replace
148	[BUG]  [BUGGY]  return  valueNull?  valueNull  :!valueUndefined;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueNull  :!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :!valueUndefined;	  return    valueNull?    valueNull    :!valueNull;    	non-compiled	[CE]  	108	None	replace
149	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :!valueNull;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueUndefined  :!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueUndefined  :!valueNull;	  return    valueNull?    valueNull    :!valueNull;    	non-compiled	[CE]  	108	None	replace
150	[BUG]  [BUGGY]  return(valueNull?  valueNull  :!equivalent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull?  valueNull  :!equivalent);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull?  valueNull  :!equivalent);	  return(valueNull?    valueNull    :!negative);    	non-compiled	[CE]  	89	None	replace
151	[BUG]  [BUGGY]  return(valueNull?  valueNull  :!valueNull);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull?  valueNull  :!valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull?  valueNull  :!valueNull);	  return(valueNull?    valueNull    :!negative);    	non-compiled	[CE]  	89	None	replace
152	[BUG]  [BUGGY]  return!negated  &&  op  ==  Token.NE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negated  &&  op  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated  &&  op  ==  Token.NE;	  return!negated    ||    op    ==    Token.NE;    	non-compiled	[CE]  	126	None	replace
153	[BUG]  [BUGGY]  return!valueNull  ||  op  ==  Token.NE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||  op  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||  op  ==  Token.NE;	  return!negated    ||    op    ==    Token.NE;    	non-compiled	[CE]  	126	None	replace
154	[BUG]  [BUGGY]  return(op  ==  Token.NE)||!negated  ||  op  ==  Token.NE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(op  ==  Token.NE)||!negated  ||  op  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(op  ==  Token.NE)||!negated  ||  op  ==  Token.NE;	  return!negated    ||    op    ==    Token.NE;    	non-compiled	[CE]  	126	None	replace
155	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild()));    	non-compiled	[CE]  	154	None	replace
156	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild()));    	non-compiled	[CE]  	154	None	replace
157	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getString()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getString()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getString()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild()));    	non-compiled	[CE]  	154	None	replace
158	[BUG]  [BUGGY]  if(valueNull)  {  return!valueN;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueN;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueN;  }	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
159	[BUG]  [BUGGY]  valueNull  |=  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  |=  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  |=  valueNull;	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
160	[BUG]  [BUGGY]  valueNull  |=!valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  |=!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  |=!valueNull;	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
161	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueUndefined;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  valueUndefined;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
162	[BUG]  [BUGGY]  if(!equivalent)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(!equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(!equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
163	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  null;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
164	[BUG]  [BUGGY]  parent  ==  null  &&!equivalent)  {  return  parent.getType();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent  ==  null  &&!equivalent)  {  return  parent.getType();  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent  ==  null  &&!equivalent)  {  return  parent.getType();  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
165	[BUG]  [BUGGY]  parent!=  null  &&!equivalent)  {  return  parent.getType();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&!equivalent)  {  return  parent.getType();  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&!equivalent)  {  return  parent.getType();  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
166	[BUG]  [BUGGY]  return  valueNull?  equal  :(valueNull);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :(valueNull);	  return    valueNull?    equal    :(equivalent);    	non-compiled	[CE]  	131	None	replace
167	[BUG]  [BUGGY]  return  valueNull?  equal  :(valueUndefined);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :(valueUndefined);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :(valueUndefined);	  return    valueNull?    equal    :(equivalent);    	non-compiled	[CE]  	131	None	replace
168	[BUG]  [BUGGY]  return  equal?  valueNull  :(equivalent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equal?  valueNull  :(equivalent);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :(equivalent);	  return    valueNull?    equal    :(equivalent);    	non-compiled	[CE]  	131	None	replace
169	[BUG]  [BUGGY]  return  equal?  valueNull  :(value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equal?  valueNull  :(value);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :(value);	  return    valueNull?    equal    :(equivalent);    	non-compiled	[CE]  	131	None	replace
170	[BUG]  [BUGGY]  return  valueNull?  equal  :(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :(value);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :(value);	  return    valueNull?    equal    :(equivalent);    	non-compiled	[CE]  	131	None	replace
171	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
172	[BUG]  [BUGGY]  if(valueNull)return  true;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  true;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  true;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
173	[BUG]  [BUGGY]  if(valueNull  ||  equal)return  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)return  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)return  false;	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
174	[BUG]  [BUGGY]  if(valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  true;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  true;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  true;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
175	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNum;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNum;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNum;  }	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
176	[BUG]  [BUGGY]  if(valueNull)return!valueNum;  if(valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueNum;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNum;  if(valueNull)  {  return  false;  }	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
177	[BUG]  [BUGGY]  if(valueNull)return!valueNum;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueNum;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNum;  if(valueNull)  {  return  valueNull;  }	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
178	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  true;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  true;	  return    valueNull?!equivalent    :    true;    	non-compiled	[CE]  	67	None	replace
179	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  true;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  true;	  return    valueNull?!equivalent    :    true;    	non-compiled	[CE]  	67	None	replace
180	[BUG]  [BUGGY]  if(valueUndefined)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	107	None	replace
181	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	107	None	replace
182	[BUG]  [BUGGY]  if(valueNull  ||  equals)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equals)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equals)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	107	None	replace
183	[BUG]  [BUGGY]  if(valueNull)return!negate;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negate;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negate;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
184	[BUG]  [BUGGY]  result!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!negate;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
185	[BUG]  [BUGGY]  return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
186	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  false;	  if(valueNull)return    false;    	non-compiled	[CE]  	21	None	replace
187	[BUG]  [BUGGY]  if(valueNull)return  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  null;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  null;	  if(valueNull)return    false;    	non-compiled	[CE]  	21	None	replace
188	[BUG]  [BUGGY]  if(equivalent)return  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)return  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)return  false;	  if(valueNull)return    false;    	non-compiled	[CE]  	21	None	replace
189	[BUG]  [BUGGY]  if(result)return  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(result)return  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(result)return  false;	  if(valueNull)return    false;    	non-compiled	[CE]  	21	None	replace
190	[BUG]  [BUGGY]  Node  value  =  op.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  op.getLastChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  op.getLastChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  	75	None	replace
191	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  this.value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  this.value.getFirstChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  	75	None	replace
192	[BUG]  [BUGGY]  Node  value  =  this.value.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  this.value.getLastChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  this.value.getLastChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  	75	None	replace
193	[BUG]  [BUGGY]  Node  value  =  item.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  item.getLastChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  item.getLastChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  	75	None	replace
194	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME;	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
195	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETELEM;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent.getType()  ==  Token.GETELEM;	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
196	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent.getType()  ==  Token.VAR;	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
197	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  true;  if(valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  true;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  true;  if(valueNull)  {  return  false;  }	  if(valueNull)return    true;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	46	None	replace
198	[BUG]  [BUGGY]  if(valueUndefined)return  true;  if(valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return  true;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return  true;  if(valueNull)  {  return  false;  }	  if(valueNull)return    true;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	46	None	replace
199	[BUG]  [BUGGY]  result  =  true;  if(valueNull)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  true;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  true;  if(valueNull)  {  return  false;  }	  if(valueNull)return    true;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	46	None	replace
200	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)&&!equivalent;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)&&!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)&&!equivalent;	  return(valueNull    ||    valueNull)&&!negated;    	non-compiled	[CE]  	83	None	replace
201	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)&&!negated;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  valueNull)&&!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  valueNull)&&!negated;	  return(valueNull    ||    valueNull)&&!negated;    	non-compiled	[CE]  	83	None	replace
202	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)&&!required;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)&&!required;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)&&!required;	  return(valueNull    ||    valueNull)&&!negated;    	non-compiled	[CE]  	83	None	replace
203	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)&&!result;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)&&!result;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)&&!result;	  return(valueNull    ||    valueNull)&&!negated;    	non-compiled	[CE]  	83	None	replace
204	[BUG]  [BUGGY]  if(valueNull)return  false;  if(op  ==  Token.NE)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  if(op  ==  Token.NE)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(op  ==  Token.NE)  {  return  false;  }	  return!negate;    	non-compiled	[CE]  	66	None	replace
205	[BUG]  [BUGGY]  if(valueNull)  {  return!negate;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!negate;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!negate;  }	  return!negate;    	non-compiled	[CE]  	66	None	replace
206	[BUG]  [BUGGY]  return  valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
207	[BUG]  [BUGGY]  return!valueNull  &&  value.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&  value.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getLastChild().getType()  ==  Token.FUNCTION;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
208	[BUG]  [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getFirstChild().getType()!=  Token.FUNCTION;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
209	[BUG]  [BUGGY]  return!valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
210	[BUG]  [BUGGY]  return  valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
211	[BUG]  [BUGGY]  if(valueNull)  {  if(!valueNegative)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!valueNegative)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!valueNegative)  {  return  valueNull;  }	  if(valueNull)    {    return!valueNegative;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	118	None	replace
212	[BUG]  [BUGGY]  if(valueNull)  {  if(valueNegative)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(valueNegative)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(valueNegative)  {  return  false;  }	  if(valueNull)    {    return!valueNegative;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	118	None	replace
213	[BUG]  [BUGGY]  if(valueNull)  {  if(valueNegative)  {  return  valueNegative;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(valueNegative)  {  return  valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(valueNegative)  {  return  valueNegative;  }	  if(valueNull)    {    return!valueNegative;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	118	None	replace
214	[BUG]  [BUGGY]  if(valueNull)  {  if(valueNegative)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(valueNegative)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(valueNegative)  {  return  valueNull;  }	  if(valueNull)    {    return!valueNegative;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	118	None	replace
215	[BUG]  [BUGGY]  if(valueNull)return!token;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!token;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!token;	  if(valueNull)return!recipe;    	non-compiled	[CE]  	24	None	replace
216	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  true;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  true;	  if(valueNull)return    true;    	non-compiled	[CE]  	22	None	replace
217	[BUG]  [BUGGY]  if(result)return  true;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(result)return  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(result)return  true;	  if(valueNull)return    true;    	non-compiled	[CE]  	22	None	replace
218	[BUG]  [BUGGY]  if(equivalent)return  true;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)return  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)return  true;	  if(valueNull)return    true;    	non-compiled	[CE]  	22	None	replace
219	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueNull  ||  valueUndefined;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueNull  ||  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(value.getType()  ==  Token.NE)  {  return  valueNull  ||  valueUndefined;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
220	[BUG]  [BUGGY]  return  valueUndefined  ||  valueNull;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueUndefined  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueUndefined  ||  valueNull;	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
221	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueUndefined  &&  valueNull;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueUndefined  &&  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(value.getType()  ==  Token.NE)  {  return  valueUndefined  &&  valueNull;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
222	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NE  ||  valueNull)  {  return  valueUndefined  ||  valueNull;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(value.getType()  ==  Token.NE  ||  valueNull)  {  return  valueUndefined  ||  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(value.getType()  ==  Token.NE  ||  valueNull)  {  return  valueUndefined  ||  valueNull;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
223	[BUG]  [BUGGY]  if(value.getType()!=  Token.NE)  {  return  valueNull  ||  valueUndefined;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(value.getType()!=  Token.NE)  {  return  valueNull  ||  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(value.getType()!=  Token.NE)  {  return  valueNull  ||  valueUndefined;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
224	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueNull  ||  valueNull;  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueNull  ||  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(value.getType()  ==  Token.NE)  {  return  valueNull  ||  valueNull;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
225	[BUG]  [BUGGY]  return  valueNull?!valueNum?  valueNull  :  valueNull;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum?  valueNull  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum?  valueNull  :  valueNull;	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
226	[BUG]  [BUGGY]  return  valueNull?!valueNum  :  valueUndefined;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  :  valueUndefined;	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
227	[BUG]  [BUGGY]  return  valueNull?!valueNum  &&  valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  &&  valueNull;	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
228	[BUG]  [BUGGY]  return  valueNull?!valueNum  :  equalizer;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  :  equalizer;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  :  equalizer;	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
229	[BUG]  [BUGGY]  return  valueNull?!valueNum  &&  valueNull.equals(valueNull);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  &&  valueNull.equals(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  &&  valueNull.equals(valueNull);	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
230	[BUG]  [BUGGY]  return  valueNull?!valueNum  &&  valueNull.getType()  ==  Token.NE);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  &&  valueNull.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  &&  valueNull.getType()  ==  Token.NE);	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
231	[BUG]  [BUGGY]  if(valueNull)return!negated;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negated;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negated;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
232	[BUG]  [BUGGY]  if(valueUndefined)return!negated;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!negated;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!negated;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
233	[BUG]  [BUGGY]  result!negated;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!negated;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!negated;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
234	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueNegated;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueNegated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  valueNull)  {  return!valueNegated;  }	  if(valueNull    ||    valueNull)    {    return!valueNegated;    }    	non-compiled	[CE]  	5	None	replace
235	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!valueNegated;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return!valueNegated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return!valueNegated;  }	  if(valueNull    ||    valueNull)    {    return!valueNegated;    }    	non-compiled	[CE]  	5	None	replace
236	[BUG]  [BUGGY]  ||  valueNull)  {  return!valueNegated;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ||  valueNull)  {  return!valueNegated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	||  valueNull)  {  return!valueNegated;  }	  if(valueNull    ||    valueNull)    {    return!valueNegated;    }    	non-compiled	[CE]  	5	None	replace
237	[BUG]  [BUGGY]  if(valueNull  &&  equivalent)  {  return!equivalent;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  &&  equivalent)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  equivalent)  {  return!equivalent;  }	  if(valueNull    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	1	None	replace
238	[BUG]  [BUGGY]  return!negated  &&  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negated  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated  &&  valueNull;	  return!negated    ||    valueNull;    	non-compiled	[CE]  	40	None	replace
239	[BUG]  [BUGGY]  return!valueNull  ||  negated;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||  negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||  negated;	  return!negated    ||    valueNull;    	non-compiled	[CE]  	40	None	replace
240	[BUG]  [BUGGY]  return!valueNull  ||  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||  valueNull;	  return!negated    ||    valueNull;    	non-compiled	[CE]  	40	None	replace
241	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	106	None	replace
242	[BUG]  [BUGGY]  result  =!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	106	None	replace
243	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
244	[BUG]  [BUGGY]  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	||  valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
245	[BUG]  [BUGGY]  tryReturn(valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  tryReturn(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	tryReturn(valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
246	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.throwInternal();	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
247	[BUG]  [BUGGY]  return!nequivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!nequivalent;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!nequivalent;  if(valueNull)  {  return  false;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
248	[BUG]  [BUGGY]  while(valueNull)return!nequivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)return!nequivalent;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)return!nequivalent;  if(valueNull)  {  return  false;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
249	[BUG]  [BUGGY]  result!nequivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!nequivalent;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!nequivalent;  if(valueNull)  {  return  false;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
250	[BUG]  [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  false;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  false;	  return    valueNull?!nequivalent    :    false;    	non-compiled	[CE]  	69	None	replace
251	[BUG]  [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER  :  false;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!NEGATING_A_NON_NUMBER  :  false;	  return    valueNull?!nequivalent    :    false;    	non-compiled	[CE]  	69	None	replace
252	[BUG]  [BUGGY]  return  valueNull?!NEGATING_A_NON_NULL  :  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!NEGATING_A_NON_NULL  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!NEGATING_A_NON_NULL  :  false;	  return    valueNull?!nequivalent    :    false;    	non-compiled	[CE]  	69	None	replace
253	[BUG]  [BUGGY]  return  valueNull?!Nequivalent  :  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!Nequivalent  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!Nequivalent  :  false;	  return    valueNull?!nequivalent    :    false;    	non-compiled	[CE]  	69	None	replace
254	[BUG]  [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  valueNull);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleUndefinedException(value,  op,  valueNull);	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
255	[BUG]  [BUGGY]  if(valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
256	[BUG]  [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  valueNull);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleUndefinedException(value,  valueNull);	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
257	[BUG]  [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  equalizer);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  equalizer);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleUndefinedException(value,  op,  equalizer);	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
258	[BUG]  [BUGGY]  case  Token.NE:  aughtExceptionHandler.handleUndefinedException(value,  op);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  aughtExceptionHandler.handleUndefinedException(value,  op);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  aughtExceptionHandler.handleUndefinedException(value,  op);	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
259	[BUG]  [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  equivalent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  equivalent);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleUndefinedException(value,  op,  equivalent);	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
260	[BUG]  [BUGGY]  if(valueNull)return  value!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  value!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  value!equivalent;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
261	[BUG]  [BUGGY]  if(valueNull)return  equal;  if(valueNull)  {  return  equal;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  equal;  if(valueNull)  {  return  equal;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  equal;  if(valueNull)  {  return  equal;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
262	[BUG]  [BUGGY]  if(equivalent)return  valueNull;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)return  valueNull;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)return  valueNull;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
263	[BUG]  [BUGGY]  if(valueNull)return  null;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  null;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  null;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
264	[BUG]  [BUGGY]  if(valueNull)return  valueUndefined;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  valueUndefined;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  valueUndefined;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
265	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return!value;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return!value;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return!value;  if(valueNull)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
266	[BUG]  [BUGGY]  result  =!valueNull;  if(valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!valueNull;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!valueNull;  if(valueNull)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
267	[BUG]  [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	92	None	replace
268	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	92	None	replace
269	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  result!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  result!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  result!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
270	[BUG]  [BUGGY]  result!=null;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!=null;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!=null;  if(valueNull  ||  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
271	[BUG]  [BUGGY]  result!result;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!result;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!result;  if(valueNull  ||  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
272	[BUG]  [BUGGY]  result!equivalent;  if(valueNull  &&  valueNull)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!equivalent;  if(valueNull  &&  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!equivalent;  if(valueNull  &&  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
273	[BUG]  [BUGGY]  result  = "NE ";  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  = "NE ";  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  = "NE ";  if(valueNull  ||  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
274	[BUG]  [BUGGY]  result  = "NE ";  if(valueNull  &&  valueNull)  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  = "NE ";  if(valueNull  &&  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  = "NE ";  if(valueNull  &&  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
275	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  op.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  op.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  	73	None	replace
276	[BUG]  [BUGGY]  Node  value  =  item.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  item.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  item.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  	73	None	replace
277	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)?  false  :!negated;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  valueNull)?  false  :!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  valueNull)?  false  :!negated;	  return(valueNull    ||    valueNull)?    false    :!negated;    	non-compiled	[CE]  	80	None	replace
278	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!this.negated;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!this.negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!this.negated;	  return(valueNull    ||    valueNull)?    false    :!negated;    	non-compiled	[CE]  	80	None	replace
279	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!token;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!token;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!token;	  return(valueNull    ||    valueNull)?    false    :!negated;    	non-compiled	[CE]  	80	None	replace
280	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!returnValueUndefined;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!returnValueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!returnValueUndefined;	  return(valueNull    ||    valueNull)?    false    :!negated;    	non-compiled	[CE]  	80	None	replace
281	[BUG]  [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  true;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return    true;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	136	None	replace
282	[BUG]  [BUGGY]  result  =  true;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  true;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  true;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return    true;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	136	None	replace
283	[BUG]  [BUGGY]  if(valueUndefined)return  true;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return  true;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return  true;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return    true;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	136	None	replace
284	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  null;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueNull)  {  return  null;  }	  if(valueNull)return    true;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	136	None	replace
285	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return    true;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	136	None	replace
286	[BUG]  [BUGGY]  return!nequivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!nequivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!nequivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	122	None	replace
287	[BUG]  [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!nequivalent;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	122	None	replace
288	[BUG]  [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!nequivalent;  if(valueNull)  {  return  null;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	122	None	replace
289	[BUG]  [BUGGY]  result  &=!nequivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  &=!nequivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  &=!nequivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	122	None	replace
290	[BUG]  [BUGGY]  result!nequivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!nequivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!nequivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	122	None	replace
291	[BUG]  [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getString().equals( "undefined   ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    true)));    	non-compiled	[CE]  	93	None	replace
292	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  true)));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  true)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    true)));    	non-compiled	[CE]  	93	None	replace
293	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  true;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return  true;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return  true;  }	  if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
294	[BUG]  [BUGGY]  &&  valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  &&  valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	&&  valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
295	[BUG]  [BUGGY]  &&  valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  &&  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	&&  valueNull)  {  return  false;  }	  if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
296	[BUG]  [BUGGY]  return!valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  	149	None	replace
297	[BUG]  [BUGGY]  return  valueNull?!equivalent  &&  valueNull  :  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  &&  valueNull  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  &&  valueNull  :  valueNull;	  return    valueNull?!equivalent?    valueNull    :    valueNull;    	non-compiled	[CE]  	13	None	replace
298	[BUG]  [BUGGY]  parent!=  value.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  value.getFirstChild();	  parent!=    null    &&    parent    ==    value.getFirstChild();    	non-compiled	[CE]  	130	None	replace
299	[BUG]  [BUGGY]  parent!=  valueUndefined  &&  parent  ==  value.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  valueUndefined  &&  parent  ==  value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  valueUndefined  &&  parent  ==  value.getFirstChild();	  parent!=    null    &&    parent    ==    value.getFirstChild();    	non-compiled	[CE]  	130	None	replace
300	[BUG]  [BUGGY]  parent!=  null  &&  value.getFirstChild()  ==  value.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getFirstChild()  ==  value.getLastChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getFirstChild()  ==  value.getLastChild();	  parent!=    null    &&    parent    ==    value.getFirstChild();    	non-compiled	[CE]  	130	None	replace
301	[BUG]  [BUGGY]  parent!=  null  &&  valueNull  ==  value.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull  ==  value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull  ==  value.getFirstChild();	  parent!=    null    &&    parent    ==    value.getFirstChild();    	non-compiled	[CE]  	130	None	replace
302	[BUG]  [BUGGY]  parent!=  null  &&  value  ==  value.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value  ==  value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value  ==  value.getFirstChild();	  parent!=    null    &&    parent    ==    value.getFirstChild();    	non-compiled	[CE]  	130	None	replace
303	[BUG]  [BUGGY]  While(valueNull)  {  return!valueNull;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  While(valueNull)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	While(valueNull)  {  return!valueNull;  }	  if(valueNull)    {    return!negated;    }    	non-compiled	[CE]  	37	None	replace
304	[BUG]  [BUGGY]  while(valueNull)  {  return!negated;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return!negated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!negated;  }	  if(valueNull)    {    return!negated;    }    	non-compiled	[CE]  	37	None	replace
305	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
306	[BUG]  [BUGGY]  if(valueUndefined)return!value;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!value;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!value;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
307	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  equivalent)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull  ||  equivalent)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
308	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  null)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  null)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull  ||  null)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
309	[BUG]  [BUGGY]  return!NodeUtil.equalValue(value.getFirstChild(),  valueNull);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!NodeUtil.equalValue(value.getFirstChild(),  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!NodeUtil.equalValue(value.getFirstChild(),  valueNull);	  return!result;    	non-compiled	[CE]  	125	None	replace
310	[BUG]  [BUGGY]  return!NodeUtil.isFunctionDeclaration(value.getFirstChild())?  result  :  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!NodeUtil.isFunctionDeclaration(value.getFirstChild())?  result  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!NodeUtil.isFunctionDeclaration(value.getFirstChild())?  result  :  false;	  return!result;    	non-compiled	[CE]  	125	None	replace
311	[BUG]  [BUGGY]  return!NodeUtil.isFunctionDeclaration(value.getFirstChild())?  result  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!NodeUtil.isFunctionDeclaration(value.getFirstChild())?  result  :  null;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!NodeUtil.isFunctionDeclaration(value.getFirstChild())?  result  :  null;	  return!result;    	non-compiled	[CE]  	125	None	replace
312	[BUG]  [BUGGY]  return!NodeUtil.isValue(value.getFirstChild(),  valueNull);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!NodeUtil.isValue(value.getFirstChild(),  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!NodeUtil.isValue(value.getFirstChild(),  valueNull);	  return!result;    	non-compiled	[CE]  	125	None	replace
313	[BUG]  [BUGGY]  return!result.equals(valueNull);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!result.equals(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!result.equals(valueNull);	  return!result;    	non-compiled	[CE]  	125	None	replace
314	[BUG]  [BUGGY]  result  =!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!valueUndefined;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	135	None	replace
315	[BUG]  [BUGGY]  if(valueUndefined)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	135	None	replace
316	[BUG]  [BUGGY]  result  &=!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  &=!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  &=!valueUndefined;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	135	None	replace
317	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  null;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;  if(valueNull)  {  return  null;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	135	None	replace
318	[BUG]  [BUGGY]  while(valueNull)  {  if(equivalent)  {  return!valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  if(equivalent)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  if(equivalent)  {  return!valueNull;  }	  if(equivalent)    {    return!valueNull;    }    	non-compiled	[CE]  	139	None	replace
319	[BUG]  [BUGGY]  changed(value,  equal)  {  return!valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  changed(value,  equal)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	changed(value,  equal)  {  return!valueNull;  }	  if(equivalent)    {    return!valueNull;    }    	non-compiled	[CE]  	139	None	replace
320	[BUG]  [BUGGY]  result!negated;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!negated;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!negated;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	41	None	replace
321	[BUG]  [BUGGY]  if(valueUndefined)return!negated;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!negated;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!negated;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	41	None	replace
322	[BUG]  [BUGGY]  return!negated;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negated;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	41	None	replace
323	[BUG]  [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negated;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	41	None	replace
324	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  value;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  value;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
325	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  &&  valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  &&  valueNull;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
326	[BUG]  [BUGGY]  return  valueNull?!valueUndefined?  valueNull  :  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined?  valueNull  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined?  valueNull  :  valueNull;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
327	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  equalizer;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  equalizer;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  equalizer;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
328	[BUG]  [BUGGY]  return  valueUndefined?!valueUndefined  :  valueNull;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueUndefined?!valueUndefined  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueUndefined?!valueUndefined  :  valueNull;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
329	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getLastChild();  return(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getLastChild();  return(value.getType()  ==  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
330	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  op.getFirstChild();  return(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  op.getFirstChild();  return(value.getType()  ==  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
331	[BUG]  [BUGGY]  Node  value  =  value.getNext();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext();  return(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext();  return(value.getType()  ==  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
332	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  this.value.getFirstChild();  return(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  this.value.getFirstChild();  return(value.getType()  ==  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
333	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(value.getType()!=  Token.NE);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getFirstChild();  return(value.getType()!=  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getFirstChild();  return(value.getType()!=  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
334	[BUG]  [BUGGY]  Node  value  =  node.getFirstChild();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  node.getFirstChild();  return(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  node.getFirstChild();  return(value.getType()  ==  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
335	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getLastChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getLastChild()!=  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getLastChild()!=  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
336	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
337	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getLastChild()!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getLastChild()!=  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getLastChild()!=  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
338	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
339	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getFirstChild()  ==  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getFirstChild()  ==  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  value.getFirstChild()  ==  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
340	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()  ==  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()  ==  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()  ==  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
341	[BUG]  [BUGGY]  return  valueNull  &&  valueNull;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  	146	None	replace
342	[BUG]  [BUGGY]  return  valueNull  ||  equal;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  equal;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  equal;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  	146	None	replace
343	[BUG]  [BUGGY]  return  valueNull  ||  op;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  op;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  op;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  	146	None	replace
344	[BUG]  [BUGGY]  return  valueNull?  false  :  valueNull;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  false  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  false  :  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  	146	None	replace
345	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueUndefined;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :  valueUndefined;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  	146	None	replace
346	[BUG]  [BUGGY]  While(valueNull)  {  return!valueNeeded;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  While(valueNull)  {  return!valueNeeded;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	While(valueNull)  {  return!valueNeeded;  }	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
347	[BUG]  [BUGGY]  while(valueNull)  {  return!valueNeeded;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return!valueNeeded;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!valueNeeded;  }	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
348	[BUG]  [BUGGY]  valueNeeded  =  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNeeded  =  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNeeded  =  false;	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
349	[BUG]  [BUGGY]  valueNeeded  =!valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNeeded  =!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNeeded  =!valueNull;	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
350	[BUG]  [BUGGY]  valueNeeded  =  value.getFirstChild().getNext().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNeeded  =  value.getFirstChild().getNext().getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNeeded  =  value.getFirstChild().getNext().getNext();	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
351	[BUG]  [BUGGY]  valueNeeded  =  value.getFirstChild().getNext().getNext().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNeeded  =  value.getFirstChild().getNext().getNext().getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNeeded  =  value.getFirstChild().getNext().getNext().getNext();	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
352	[BUG]  [BUGGY]  return  valueNull?!valueNeeded  :  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNeeded  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNeeded  :  false;	  return    valueNull?!valueUndefined    :    false;    	non-compiled	[CE]  	71	None	replace
353	[BUG]  [BUGGY]  return  valueUndefined?!valueUndefined  :  false;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueUndefined?!valueUndefined  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueUndefined?!valueUndefined  :  false;	  return    valueNull?!valueUndefined    :    false;    	non-compiled	[CE]  	71	None	replace
354	[BUG]  [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  true;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  true;	  return    valueNull?!nequivalent    :    true;    	non-compiled	[CE]  	70	None	replace
355	[BUG]  [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER  :  true;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!NEGATING_A_NON_NUMBER  :  true;	  return    valueNull?!nequivalent    :    true;    	non-compiled	[CE]  	70	None	replace
356	[BUG]  [BUGGY]  return  valueNull?!NEGATING_A_NON_NULL  :  true;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!NEGATING_A_NON_NULL  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!NEGATING_A_NON_NULL  :  true;	  return    valueNull?!nequivalent    :    true;    	non-compiled	[CE]  	70	None	replace
357	[BUG]  [BUGGY]  return  equal?  valueNull  :!nequivalent;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equal?  valueNull  :!nequivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :!nequivalent;	  return    valueNull?    equal    :!nequivalent;    	non-compiled	[CE]  	19	None	replace
358	[BUG]  [BUGGY]  return  valueNull?!equivalent  &&  equal;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  &&  equal;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  &&  equal;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
359	[BUG]  [BUGGY]  return  valueNull?!equivalent  ||  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  ||  valueNull;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
360	[BUG]  [BUGGY]  return  valueNull?!equivalent  &&  valueUndefined;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  &&  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  &&  valueUndefined;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
361	[BUG]  [BUGGY]  return  valueNull?!equivalent  &&  equivalent;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  &&  equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  &&  equivalent;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
362	[BUG]  [BUGGY]  return  valueNull?!valueNull  &&  valueNull;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  &&  valueNull;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
363	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  valueUndefined;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  valueUndefined;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
364	[BUG]  [BUGGY]  if(equivalent)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
365	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  if(equivalent)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  if(equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  if(equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
366	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  null;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  null;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
367	[BUG]  [BUGGY]  if(equivalent)  {  return  valueUndefined;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)  {  return  valueUndefined;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
368	[BUG]  [BUGGY]  result!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueUndefined)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	49	None	replace
369	[BUG]  [BUGGY]  if(valueUndefined)return!negate;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!negate;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!negate;  if(valueNull)  {  return  valueNull;  }	  if(valueUndefined)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	49	None	replace
370	[BUG]  [BUGGY]  if(valueUndefined)return!equals;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!equals;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!equals;  if(valueNull)  {  return  valueNull;  }	  if(valueUndefined)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	49	None	replace
371	[BUG]  [BUGGY]  case  Token.NE:  return!valueNull;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!valueNull;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
372	[BUG]  [BUGGY]  case  Token.NE:  return  op;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  op;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  op;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
373	[BUG]  [BUGGY]  case  Token.NE:  return  valueUndefined;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueUndefined;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
374	[BUG]  [BUGGY]  result!negated;  if(valueNull)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!negated;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!negated;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	38	None	replace
375	[BUG]  [BUGGY]  return!negated;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negated;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	38	None	replace
376	[BUG]  [BUGGY]  while(valueNull)return!negated;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)return!negated;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)return!negated;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	38	None	replace
377	[BUG]  [BUGGY]  if(valueNull)  {  if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
378	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!valueNull;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)return!valueNull;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return!valueNull;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
379	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!token;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)return!token;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return!token;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
380	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!value;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)return!value;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return!value;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
381	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
382	[BUG]  [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  null;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negate;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    null;    }    	non-compiled	[CE]  	52	None	replace
383	[BUG]  [BUGGY]  return!equivalent;  if(valueNull)  {  return  null;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!equivalent;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    null;    }    	non-compiled	[CE]  	52	None	replace
384	[BUG]  [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  null;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negated;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    null;    }    	non-compiled	[CE]  	52	None	replace
385	[BUG]  [BUGGY]  result!equivalent;  if(valueNull)  {  return  null;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!equivalent;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!equivalent;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    null;    }    	non-compiled	[CE]  	52	None	replace
386	[BUG]  [BUGGY]  return  valueNull  &&!valueNull;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!valueNull;	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
387	[BUG]  [BUGGY]  return  valueNull  ||!valueUndefined;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!valueUndefined;	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
388	[BUG]  [BUGGY]  return  valueNull  ||!valueNonNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||!valueNonNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!valueNonNull;	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
389	[BUG]  [BUGGY]  result  =!valueNull;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!valueNull;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!valueNull;  if(valueNull)  {  return  valueNull;  }	  result    =!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	123	None	replace
390	[BUG]  [BUGGY]  if(valueNull)  {  result  =!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  result  =!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  result  =!equivalent;  if(valueNull)  {  return  valueNull;  }	  result    =!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	123	None	replace
391	[BUG]  [BUGGY]  result  |=!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  |=!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  |=!equivalent;  if(valueNull)  {  return  valueNull;  }	  result    =!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	123	None	replace
392	[BUG]  [BUGGY]  result  =!requivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!requivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!requivalent;  if(valueNull)  {  return  valueNull;  }	  result    =!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	123	None	replace
393	[BUG]  [BUGGY]  result  =  false;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  false;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  false;  if(valueNull)  {  return  valueNull;  }	  result    =!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	123	None	replace
394	[BUG]  [BUGGY]  result  =  valueNull;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  valueNull;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  valueNull;  if(valueNull)  {  return  valueNull;  }	  result    =!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	123	None	replace
395	[BUG]  [BUGGY]  return  valueNull?  valueNull  :!value;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueNull  :!value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :!value;	  return    equal?    valueNull    :!value;    	non-compiled	[CE]  	85	None	replace
396	[BUG]  [BUGGY]  return  equal?  valueNull  :!valueUndefined;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equal?  valueNull  :!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :!valueUndefined;	  return    equal?    valueNull    :!value;    	non-compiled	[CE]  	85	None	replace
397	[BUG]  [BUGGY]  return  valueNull?  equal  :!value;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :!value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!value;	  return    equal?    valueNull    :!value;    	non-compiled	[CE]  	85	None	replace
398	[BUG]  [BUGGY]  return!valueNegative  &&  valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative  &&  valueNull;	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
399	[BUG]  [BUGGY]  if(valueNull)return!valueNegative;  if(valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueNegative;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNegative;  if(valueNull)  {  return  false;  }	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
400	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNegative!=  null)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  if(valueNegative!=  null)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueNegative!=  null)  {  return  false;  }	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
401	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	109	None	replace
402	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	109	None	replace
403	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	109	None	replace
404	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.getLastChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getLastChild();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
405	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getNext();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
406	[BUG]  [BUGGY]  Node  valueUndefined  =  op.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  op.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  op.getFirstChild();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
407	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getType();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.getType();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getType();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
408	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getQualifiedName();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.getQualifiedName();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getQualifiedName();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
409	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getLocalPart();  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.getLocalPart();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getLocalPart();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
410	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getLastChild(),    false)));    	non-compiled	[CE]  	112	None	replace
411	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  true)));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  true)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getLastChild(),    false)));    	non-compiled	[CE]  	112	None	replace
412	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)&&(valueNull  ||  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)&&(valueNull  ||  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)&&(valueNull  ||  NodeUtil.isLiteralValue(value.getLastChild(),  false)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getLastChild(),    false)));    	non-compiled	[CE]  	112	None	replace
413	[BUG]  [BUGGY]  return  equal?  valueNull  :!valueNull;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equal?  valueNull  :!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :!valueNull;	  return    valueNull?    equal    :!valueNull;    	non-compiled	[CE]  	18	None	replace
414	[BUG]  [BUGGY]  return!valueNull  &&!negated;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!negated;	  return!negated    &&!valueNull;    	non-compiled	[CE]  	127	None	replace
415	[BUG]  [BUGGY]  return!negated  ||!valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negated  ||!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated  ||!valueNull;	  return!negated    &&!valueNull;    	non-compiled	[CE]  	127	None	replace
416	[BUG]  [BUGGY]  return  false  &&!valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  false  &&!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  false  &&!valueNull;	  return!negated    &&!valueNull;    	non-compiled	[CE]  	127	None	replace
417	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  }	  parent!=    null    &&    parent    ==    value.getParent())    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	116	None	replace
418	[BUG]  [BUGGY]  parent!=  value.getParent())  {  return!equivalent;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  value.getParent())  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  value.getParent())  {  return!equivalent;  }	  parent!=    null    &&    parent    ==    value.getParent())    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	116	None	replace
419	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;	  parent!=    null    &&    parent    ==    value.getParent())    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	116	None	replace
420	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getNext())  {  return!equivalent;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getNext())  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getNext())  {  return!equivalent;  }	  parent!=    null    &&    parent    ==    value.getParent())    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	116	None	replace
421	[BUG]  [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negate;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	47	None	replace
422	[BUG]  [BUGGY]  if(equivalent)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	47	None	replace
423	[BUG]  [BUGGY]  return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	47	None	replace
424	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    true)));    	non-compiled	[CE]  	110	None	replace
425	[BUG]  [BUGGY]  return  equalizer?  valueNull  :!valueUndefined;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equalizer?  valueNull  :!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equalizer?  valueNull  :!valueUndefined;	  return    valueNull?    equal    :!valueUndefined;    	non-compiled	[CE]  	132	None	replace
426	[BUG]  [BUGGY]  return  valueNull?  equal  :!valueNegative;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :!valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!valueNegative;	  return    valueNull?    equal    :!valueUndefined;    	non-compiled	[CE]  	132	None	replace
427	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueNegative;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  &&  valueNull)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  valueNull)  {  return!valueNegative;  }	  if(valueNull    ||    valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	114	None	replace
428	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!valueNegative;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return!valueNegative;  }	  if(valueNull    ||    valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	114	None	replace
429	[BUG]  [BUGGY]  ||  valueNull)  {  return!valueNegative;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ||  valueNull)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	||  valueNull)  {  return!valueNegative;  }	  if(valueNull    ||    valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	114	None	replace
430	[BUG]  [BUGGY]  &&  valueNull)  {  return!valueNegative;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  &&  valueNull)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	&&  valueNull)  {  return!valueNegative;  }	  if(valueNull    ||    valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	114	None	replace
431	[BUG]  [BUGGY]  return  valueNull?!equivalent?  valueNull  :  value;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent?  valueNull  :  value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent?  valueNull  :  value;	  return    valueNull?!equivalent    :    value;    	non-compiled	[CE]  	147	None	replace
432	[BUG]  [BUGGY]  return  valueNull?!equivalent  :  value.getType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  :  value.getType();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  :  value.getType();	  return    valueNull?!equivalent    :    value;    	non-compiled	[CE]  	147	None	replace
433	[BUG]  [BUGGY]  return  valueNull?!equivalent  :  value.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  :  value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  :  value.getFirstChild();	  return    valueNull?!equivalent    :    value;    	non-compiled	[CE]  	147	None	replace
434	[BUG]  [BUGGY]  return!valueNull.booleanValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull.booleanValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  	39	None	replace
435	[BUG]  [BUGGY]  return!negated.booleanValue()  ||  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negated.booleanValue()  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated.booleanValue()  ||  valueNull;	  return!negated.booleanValue();    	non-compiled	[CE]  	39	None	replace
436	[BUG]  [BUGGY]  return!negated.booleanValue()  &&  valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!negated.booleanValue()  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated.booleanValue()  &&  valueNull;	  return!negated.booleanValue();    	non-compiled	[CE]  	39	None	replace
437	[BUG]  [BUGGY]  return!valueUndefined.booleanValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueUndefined.booleanValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueUndefined.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  	39	None	replace
438	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  if(return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  if(return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  if(return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
439	[BUG]  [BUGGY]  if(valueNull  ||  equal)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
440	[BUG]  [BUGGY]  result!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!equivalent;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
441	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  if(valueNull  ||  equal)  {  return  true;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!equivalent;  if(valueNull  ||  equal)  {  return  true;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!equivalent;  if(valueNull  ||  equal)  {  return  true;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
442	[BUG]  [BUGGY]  return  valueNull?!valueNum  :  true;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  :  true;	  return    valueNull?!valueNum    :    false;    	non-compiled	[CE]  	97	None	replace
443	[BUG]  [BUGGY]  return  valueNull?valueNum  :  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueNum  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNum  :  false;	  return    valueNull?!valueNum    :    false;    	non-compiled	[CE]  	97	None	replace
444	[BUG]  [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
445	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
446	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
447	[BUG]  [BUGGY]  Return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Return  valueNull  ||  value.getString().equals( "undefined   ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
448	[BUG]  [BUGGY]  parent!=  value.getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  value.getParent();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  value.getParent();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
449	[BUG]  [BUGGY]  parent!=  null  &&  value.getType()  ==  Token.NE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getType()  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getType()  ==  Token.NE;	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
450	[BUG]  [BUGGY]  parent!=  null  &&  value.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getNext();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
451	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getNext();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
452	[BUG]  [BUGGY]  parent!=  null  &&  value  ==  value.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value  ==  value.getParent();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value  ==  value.getParent();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
453	[BUG]  [BUGGY]  case  Token.NE:  return!equivalent;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!equivalent;	  case    Token.NE:    return!valueUndefined;    	non-compiled	[CE]  	142	None	replace
454	[BUG]  [BUGGY]  Case  Token.NE:  return!valueNull;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Case  Token.NE:  return!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Case  Token.NE:  return!valueNull;	  case    Token.NE:    return!valueUndefined;    	non-compiled	[CE]  	142	None	replace
455	[BUG]  [BUGGY]  case  Token.NE:  return!tokenNull;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return!tokenNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!tokenNull;	  case    Token.NE:    return!valueUndefined;    	non-compiled	[CE]  	142	None	replace
456	[BUG]  [BUGGY]  return  valueNull  ||  valueNull  :  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  valueNull  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  valueNull  :  false;	  return    valueNull?!valueNull    :    false;    	non-compiled	[CE]  	68	None	replace
457	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)?  0  :!negative;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  valueNull)?  0  :!negative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  valueNull)?  0  :!negative;	  return(valueNull    ||    valueNull)?    0    :!negative;    	non-compiled	[CE]  	88	None	replace
458	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!valueNull;	  return(valueNull    ||    valueNull)?    0    :!negative;    	non-compiled	[CE]  	88	None	replace
459	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!valueUndefined;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!valueUndefined;	  return(valueNull    ||    valueNull)?    0    :!negative;    	non-compiled	[CE]  	88	None	replace
460	[BUG]  [BUGGY]  if(valueUndefined)return  false;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return  false;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return  false;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return    false;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	134	None	replace
461	[BUG]  [BUGGY]  return  equalizer?valueNull  :!equivalent;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equalizer?valueNull  :!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equalizer?valueNull  :!equivalent;	  return    valueNull?valueNull    :!equivalent;    	non-compiled	[CE]  	57	None	replace
462	[BUG]  [BUGGY]  return  op?valueNull  :!equivalent;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  op?valueNull  :!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  op?valueNull  :!equivalent;	  return    valueNull?valueNull    :!equivalent;    	non-compiled	[CE]  	57	None	replace
463	[BUG]  [BUGGY]  return  valueNull  &&  value.getFirstChild().getType()  ==  Token.NE;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getFirstChild().getType()  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getFirstChild().getType()  ==  Token.NE;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NE;    	non-compiled	[CE]  	62	None	replace
464	[BUG]  [BUGGY]  return!valueNull  &&  value.getLastChild().getType()  ==  Token.NE;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&  value.getLastChild().getType()  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getLastChild().getType()  ==  Token.NE;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NE;    	non-compiled	[CE]  	62	None	replace
465	[BUG]  [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()!=  Token.NE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()!=  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getFirstChild().getType()!=  Token.NE;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NE;    	non-compiled	[CE]  	62	None	replace
466	[BUG]  [BUGGY]  return!valueNull  ||  value.getFirstChild().getType()  ==  Token.NE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||  value.getFirstChild().getType()  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||  value.getFirstChild().getType()  ==  Token.NE;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NE;    	non-compiled	[CE]  	62	None	replace
467	[BUG]  [BUGGY]  return  valueNull  ||  value.getFirstChild().getType()  ==  Token.NE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getFirstChild().getType()  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getFirstChild().getType()  ==  Token.NE;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NE;    	non-compiled	[CE]  	62	None	replace
468	[BUG]  [BUGGY]  while(valueNull)  {  return!valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!valueNull;  }	  while(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	35	None	replace
469	[BUG]  [BUGGY]  while(valueNull)  {  return!valueNegative;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!valueNegative;  }	  while(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	35	None	replace
470	[BUG]  [BUGGY]  while(valueNull)  {  return!valueNegated;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return!valueNegated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!valueNegated;  }	  while(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	35	None	replace
471	[BUG]  [BUGGY]  while(valueNull)  {  return!valueUndefined;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!valueUndefined;  }	  while(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	35	None	replace
472	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext(),  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext(),  false);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext(),  false);	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
473	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext(),  false));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext(),  false));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
474	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild().getNext());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild().getNext());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild().getNext());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
475	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
476	[BUG]  [BUGGY]  return  op  &&!equivalent;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  op  &&!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  op  &&!equivalent;	  return    valueNull    &&!equivalent;    	non-compiled	[CE]  	59	None	replace
477	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!value;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	124	None	replace
478	[BUG]  [BUGGY]  if(valueUndefined)return!value;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!value;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!value;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!value;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	124	None	replace
479	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  null;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull)  {  return  null;  }	  if(valueNull)return!value;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	124	None	replace
480	[BUG]  [BUGGY]  return  valueNull?valueNull  :!valueNegative;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueNull  :!valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNull  :!valueNegative;	  return    valueNull?!valueNull    :!valueNegative;    	non-compiled	[CE]  	56	None	replace
481	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNegative.booleanValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :!valueNegative.booleanValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNegative.booleanValue();	  return    valueNull?!valueNull    :!valueNegative;    	non-compiled	[CE]  	56	None	replace
482	[BUG]  [BUGGY]  return  valueNull?!valueNegative  :!valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNegative  :!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNegative  :!valueNull;	  return    valueNull?!valueNull    :!valueNegative;    	non-compiled	[CE]  	56	None	replace
483	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNegative  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :!valueNegative  +  1;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNegative  +  1;	  return    valueNull?!valueNull    :!valueNegative;    	non-compiled	[CE]  	56	None	replace
484	[BUG]  [BUGGY]  return  valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	64	None	replace
485	[BUG]  [BUGGY]  return!valueNull  &&  value.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&  value.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getLastChild().getType()  ==  Token.NAME;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	64	None	replace
486	[BUG]  [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()!=  Token.NAME;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()!=  Token.NAME;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getFirstChild().getType()!=  Token.NAME;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	64	None	replace
487	[BUG]  [BUGGY]  return!valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	64	None	replace
488	[BUG]  [BUGGY]  return  valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME;	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	64	None	replace
489	[BUG]  [BUGGY]  valueNull  ||  valueNull)  {  return!equivalent;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||  valueNull)  {  return!equivalent;  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
490	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return!parent;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return!parent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return!parent;  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
491	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return!parent.equals(valueNull);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return!parent.equals(valueNull);  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return!parent.equals(valueNull);  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
492	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	111	None	replace
493	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	111	None	replace
494	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	111	None	replace
495	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	111	None	replace
496	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	111	None	replace
497	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	111	None	replace
498	[BUG]  [BUGGY]  Node  value  =  this.value.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  this.value.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  this.value.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
499	[BUG]  [BUGGY]  Node  value  =  op.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  op.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  op.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
500	[BUG]  [BUGGY]  Node  value  =  nValue.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  nValue.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  nValue.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
501	[BUG]  [BUGGY]  Node  value  =  value.getNext(),  valueNull);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext(),  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext(),  valueNull);	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
502	[BUG]  [BUGGY]  return!valueNull;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull;  if(valueNull)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	90	None	replace
503	[BUG]  [BUGGY]  result  =  valueNull;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  valueNull;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  valueNull;  if(valueNull)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	90	None	replace
504	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueUndefined)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  if(valueUndefined)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueUndefined)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	90	None	replace
505	[BUG]  [BUGGY]  while(valueNull)  {  if(valueNull)  {  return!valueNegative;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  if(valueNull)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  if(valueNull)  {  return!valueNegative;  }	  if(valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	36	None	replace
506	[BUG]  [BUGGY]  valueNegative  =  false;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNegative  =  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNegative  =  false;	  if(valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	36	None	replace
507	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return!valueNegative;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return!valueNegative;  }	  if(valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	36	None	replace
508	[BUG]  [BUGGY]  valueNegative  =  valueNull  ||  valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNegative  =  valueNull  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNegative  =  valueNull  ||  valueNull;	  if(valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	36	None	replace
509	[BUG]  [BUGGY]  valueNegative  =  valueNull?  null  :  valueNegative;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNegative  =  valueNull?  null  :  valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNegative  =  valueNull?  null  :  valueNegative;	  if(valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	36	None	replace
510	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNull;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNull;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueNull;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
511	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
512	[BUG]  [BUGGY]  return  valueNull?valueNull  :!valueNonNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueNull  :!valueNonNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNull  :!valueNonNull;	  return    valueNull?!valueNull    :!valueNonNull;    	non-compiled	[CE]  	55	None	replace
513	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNonUndefined;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :!valueNonUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNonUndefined;	  return    valueNull?!valueNull    :!valueNonNull;    	non-compiled	[CE]  	55	None	replace
514	[BUG]  [BUGGY]  return  valueNull?!valueNonNull  :!valueNonNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNonNull  :!valueNonNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNonNull  :!valueNonNull;	  return    valueNull?!valueNull    :!valueNonNull;    	non-compiled	[CE]  	55	None	replace
515	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  valueNull;  }	  return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	50	None	replace
516	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)  {  return!equivalent;  if(valueNull)  {  return  valueUndefined;  }	  return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	50	None	replace
517	[BUG]  [BUGGY]  if(valueUndefined)return!requivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!requivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!requivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueUndefined)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
518	[BUG]  [BUGGY]  if(valueUndefined)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueUndefined)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
519	[BUG]  [BUGGY]  if(valueUndefined)return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueUndefined)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
520	[BUG]  [BUGGY]  return  valueNull?!equivalent?  valueUndefined  :  valueNull;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent?  valueUndefined  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent?  valueUndefined  :  valueNull;	  return    valueNull?!equivalent    :    valueUndefined;    	non-compiled	[CE]  	12	None	replace
521	[BUG]  [BUGGY]  return  valueNull?!equivalent  :  valueNonDefined;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  :  valueNonDefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  :  valueNonDefined;	  return    valueNull?!equivalent    :    valueUndefined;    	non-compiled	[CE]  	12	None	replace
522	[BUG]  [BUGGY]  return  valueNull?!equivalent  :  equalizer;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent  :  equalizer;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  :  equalizer;	  return    valueNull?!equivalent    :    valueUndefined;    	non-compiled	[CE]  	12	None	replace
523	[BUG]  [BUGGY]  return  equal?  valueNull  :!valueNegative;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equal?  valueNull  :!valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :!valueNegative;	  return    equal?    valueNull    :!equivalent;    	non-compiled	[CE]  	17	None	replace
524	[BUG]  [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getNext());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getNext());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getNext());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
525	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
526	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false);	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
527	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isValue(value.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isValue(value.getLastChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isValue(value.getLastChild());	  return!valueNull    &&!NodeUtil.isValue(value.getFirstChild());    	non-compiled	[CE]  	152	None	replace
528	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!valueNegative;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!valueNegative;	  return(valueNull    ||    valueNull)?    0    :!negative;    	non-compiled	[CE]  	88	None	replace
529	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  1  :!negative;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  1  :!negative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  1  :!negative;	  return(valueNull    ||    valueNull)?    0    :!negative;    	non-compiled	[CE]  	88	None	replace
530	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  true;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  true;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  true;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return    true;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	136	None	replace
531	[BUG]  [BUGGY]  changed(valueNull,  equal)  {  return!valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  changed(valueNull,  equal)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	changed(valueNull,  equal)  {  return!valueNull;  }	  if(equivalent)    {    return!valueNull;    }    	non-compiled	[CE]  	139	None	replace
532	[BUG]  [BUGGY]  if(valueNull)  {  return!valueEquivalent;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueEquivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueEquivalent;  }	  if(equivalent)    {    return!valueNull;    }    	non-compiled	[CE]  	139	None	replace
533	[BUG]  [BUGGY]  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull;	  if(equivalent)    {    return!valueNull;    }    	non-compiled	[CE]  	139	None	replace
534	[BUG]  [BUGGY]  if(valueNull)return!error;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!error;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!error;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	42	None	replace
535	[BUG]  [BUGGY]  if(valueNull)return!return;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!return;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!return;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	42	None	replace
536	[BUG]  [BUGGY]  if(valueNull)return!valueNull;  if(valueNull)  {  return  null;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueNull;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNull;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    null;    }    	non-compiled	[CE]  	52	None	replace
537	[BUG]  [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  null;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  true;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    null;    }    	non-compiled	[CE]  	52	None	replace
538	[BUG]  [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getString());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());    	non-compiled	[CE]  	153	None	replace
539	[BUG]  [BUGGY]  return(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild().getString()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild().getString()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild().getString()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());    	non-compiled	[CE]  	153	None	replace
540	[BUG]  [BUGGY]  return!valueNegated.booleanValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegated.booleanValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegated.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  	39	None	replace
541	[BUG]  [BUGGY]  return  valueNull  :!equivalent;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  :!equivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  :!equivalent;	  return    equal?    valueNull    :!equivalent;    	non-compiled	[CE]  	17	None	replace
542	[BUG]  [BUGGY]  Node  value  =  value.removeFirstChild();  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.removeFirstChild();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.removeFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
543	[BUG]  [BUGGY]  Node  value  =  node.getFirstChild();  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  node.getFirstChild();  break;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  node.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  	76	None	replace
544	[BUG]  [BUGGY]  return  valueNull  &&!valueNegative;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!valueNegative;	  return    valueNull    &&!equivalent;    	non-compiled	[CE]  	59	None	replace
545	[BUG]  [BUGGY]  return  valueNull  &&!requivalent;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!requivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!requivalent;	  return    valueNull    &&!equivalent;    	non-compiled	[CE]  	59	None	replace
546	[BUG]  [BUGGY]  if(valueNull  ||  op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
547	[BUG]  [BUGGY]  if(valueNull)  {  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
548	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
549	[BUG]  [BUGGY]  return  valueNull?!valueNum  :  value;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  :  value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  :  value;	  return    valueNull?!equivalent    :    value;    	non-compiled	[CE]  	147	None	replace
550	[BUG]  [BUGGY]  return  valueNull?!value  :  value;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!value  :  value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!value  :  value;	  return    valueNull?!equivalent    :    value;    	non-compiled	[CE]  	147	None	replace
551	[BUG]  [BUGGY]  valueNull  ||  valueNull)  {  return!valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||  valueNull)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||  valueNull)  {  return!valueNull;  }	  if(valueNull    ||    valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  	2	None	replace
552	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
553	[BUG]  [BUGGY]  Preconditions.checkState(valueNull);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Preconditions.checkState(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Preconditions.checkState(valueNull);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
554	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
555	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!equivalent;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!equivalent;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkNotNull(value);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Preconditions.checkNotNull(value);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Preconditions.checkNotNull(value);	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
557	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent())  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
558	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
559	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  false;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
560	[BUG]  [BUGGY]  return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
561	[BUG]  [BUGGY]  return  equalizer  ||(valueNull?  valueNull  :  equalizer);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equalizer  ||(valueNull?  valueNull  :  equalizer);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equalizer  ||(valueNull?  valueNull  :  equalizer);	  return    equalizer    ||!equivalent;    	non-compiled	[CE]  	61	None	replace
562	[BUG]  [BUGGY]  if(valueNull)return!losed;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!losed;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!losed;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	9	None	replace
563	[BUG]  [BUGGY]  valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
564	[BUG]  [BUGGY]  return!valueNegative  +  valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative  +  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative  +  valueNull;	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
565	[BUG]  [BUGGY]  return!valueNegative  ||  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative  ||  valueNull;	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
566	[BUG]  [BUGGY]  return!valueNegative?  valueNull  :  valueNegative;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative?  valueNull  :  valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative?  valueNull  :  valueNegative;	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
567	[BUG]  [BUGGY]  return!resultNull;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!resultNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!resultNull;	  return!result;    	non-compiled	[CE]  	125	None	replace
568	[BUG]  [BUGGY]  return!valueNe;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNe;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNe;	  return!result;    	non-compiled	[CE]  	125	None	replace
569	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getPreviousChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.getPreviousChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getPreviousChild();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
570	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getOp();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.getOp();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getOp();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
571	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
572	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
573	[BUG]  [BUGGY]  return!valueNE;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNE;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNE;  if(valueNull  ||  valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
574	[BUG]  [BUGGY]  return!valueNegative;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative;  if(valueNull  ||  valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
575	[BUG]  [BUGGY]  return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
576	[BUG]  [BUGGY]  if(op)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	47	None	replace
577	[BUG]  [BUGGY]  valueNull  =  valueNull;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  =  valueNull;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  =  valueNull;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	47	None	replace
578	[BUG]  [BUGGY]  return  valueNull?valueNum  :  true;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueNum  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNum  :  true;	  return    valueNull?!valueNum    :    false;    	non-compiled	[CE]  	97	None	replace
579	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!valueNeeded;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return!valueNeeded;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return!valueNeeded;  }	  if(valueNull    ||    equal)    {    return!equivalent;    }    	non-compiled	[CE]  	3	None	replace
580	[BUG]  [BUGGY]  Node  value  =  op.getLastChild();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  op.getLastChild();  return(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  op.getLastChild();  return(value.getType()  ==  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
581	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  if(equivalent)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  if(equivalent)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
582	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent  ||  valueNull)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
583	[BUG]  [BUGGY]  parent  ==  if(valueNull)  {  if(equivalent)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent  ==  if(valueNull)  {  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent  ==  if(valueNull)  {  if(equivalent)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
584	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	92	None	replace
585	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	92	None	replace
586	[BUG]  [BUGGY]  valueNegative  =  valueNull;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNegative  =  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNegative  =  valueNull;	  if(valueNull)    {    return!valueNegative;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	118	None	replace
587	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNegative;  }  else  {  return  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNegative;  }  else  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNegative;  }  else  {  return  null;  }	  if(valueNull)    {    return!valueNegative;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	118	None	replace
588	[BUG]  [BUGGY]  return  valueNull?!valueNegative  :  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNegative  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNegative  :  valueNull;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
589	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  valueNull  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  valueNull  +  1;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  valueNull  +  1;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
590	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueUndefined  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueUndefined  :  valueNull;	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
591	[BUG]  [BUGGY]  return(valueNull?  valueNull  :!valueNum);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull?  valueNull  :!valueNum);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull?  valueNull  :!valueNum);	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
592	[BUG]  [BUGGY]  return!valueNum  &&  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNum  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNum  &&  valueNull;	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
593	[BUG]  [BUGGY]  return  valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull;	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
594	[BUG]  [BUGGY]  return(valueNull?  valueNull  :!valueNum;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull?  valueNull  :!valueNum;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull?  valueNull  :!valueNum;	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
595	[BUG]  [BUGGY]  return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  NEGATING_A_NON_NUMBER_ERROR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  NEGATING_A_NON_NUMBER_ERROR);	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
596	[BUG]  [BUGGY]  return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
597	[BUG]  [BUGGY]  return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  ValueUtil.isNaN(value.getFirstChild()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  ValueUtil.isNaN(value.getFirstChild()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||(valueNull?  Double.POSITIVE_INFINITY  :  ValueUtil.isNaN(value.getFirstChild()));	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
598	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  ||  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  ||  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  ||  NodeUtil.isLiteralValue(value.getLastChild(),  false)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getLastChild(),    false)));    	non-compiled	[CE]  	112	None	replace
599	[BUG]  [BUGGY]  valueNull  =!valueNull;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  =!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  =!valueNull;	  if(valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  	33	None	replace
600	[BUG]  [BUGGY]  valueNull  =  valueNull;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  =  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  =  valueNull;	  if(valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  	33	None	replace
601	[BUG]  [BUGGY]  case  Token.NE:  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!equivalent;  if(valueNull)  {  return  valueNull;  }	  return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	50	None	replace
602	[BUG]  [BUGGY]  return!valueNegative;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative;  if(valueNull)  {  return  valueNull;  }	  return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	50	None	replace
603	[BUG]  [BUGGY]  return!equivalent;  if(valueNull  ||  valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!equivalent;  if(valueNull  ||  valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent;  if(valueNull  ||  valueNull)  {  return  valueNull;  }	  return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	50	None	replace
604	[BUG]  [BUGGY]  return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueUndefined;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	135	None	replace
605	[BUG]  [BUGGY]  if(valueNull)return!error;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!error;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!error;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
606	[BUG]  [BUGGY]  if(valueNull)return!lose;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!lose;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!lose;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
607	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()!=  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	109	None	replace
608	[BUG]  [BUGGY]  if(valueNull)  {  return  true;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return  true;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  true;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
609	[BUG]  [BUGGY]  changed(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  changed(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	changed(valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
610	[BUG]  [BUGGY]  valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
611	[BUG]  [BUGGY]  Node  value  =  value.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.removeFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.removeFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  	73	None	replace
612	[BUG]  [BUGGY]  Node  value  =  value.cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.cloneTree();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.cloneTree();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  	73	None	replace
613	[BUG]  [BUGGY]  return!valueNull  &&  op  ==  Token.NE;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&  op  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  op  ==  Token.NE;	  return!negated    ||    op    ==    Token.NE;    	non-compiled	[CE]  	126	None	replace
614	[BUG]  [BUGGY]  if(valueNull)return  valueNull;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  valueNull;	  if(valueNull)return    false;    	non-compiled	[CE]  	21	None	replace
615	[BUG]  [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  	149	None	replace
616	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
617	[BUG]  [BUGGY]  if(valueNull)  {  if(!requivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!requivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!requivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
618	[BUG]  [BUGGY]  changed(value,  op)  {  if(!equivalent)  {  return  valueNull;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  changed(value,  op)  {  if(!equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	changed(value,  op)  {  if(!equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
619	[BUG]  [BUGGY]  if(valueNull)  {  if(!requivalent)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!requivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!requivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
620	[BUG]  [BUGGY]  parent!=  null  &&!parent.equals(valueNull);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&!parent.equals(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&!parent.equals(valueNull);	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
621	[BUG]  [BUGGY]  parent  ==  null  &&!parent.equals(valueNull);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent  ==  null  &&!parent.equals(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent  ==  null  &&!parent.equals(valueNull);	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
622	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "NE ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "NE ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "NE ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
623	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
624	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "null ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "null ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "null ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
625	[BUG]  [BUGGY]  valueNull  =!valueUndefined;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  =!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  =!valueUndefined;	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  	138	None	replace
626	[BUG]  [BUGGY]  valueNull  ||!valueUndefined;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||!valueUndefined;	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  	138	None	replace
627	[BUG]  [BUGGY]  return!valueUndefined;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueUndefined;	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  	138	None	replace
628	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
629	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNe;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNe;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueNe;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
630	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  null;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  null;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  null;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
631	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNEd;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNEd;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueNEd;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
632	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNegative;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNegative;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueNegative;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
633	[BUG]  [BUGGY]  parent!=  null  &&  value.getNext()  ==  value.getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getNext()  ==  value.getParent();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getNext()  ==  value.getParent();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
634	[BUG]  [BUGGY]  parent!=  null  &&  value.getNext()  ==  value.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getNext()  ==  value.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getNext()  ==  value.getNext();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
635	[BUG]  [BUGGY]  parent!=  null  &&  valueNull  ==  value.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull  ==  value.getParent();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull  ==  value.getParent();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
636	[BUG]  [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild()));    	non-compiled	[CE]  	154	None	replace
637	[BUG]  [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild()));    	non-compiled	[CE]  	154	None	replace
638	[BUG]  [BUGGY]  return  valueNull  :!value;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  :!value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  :!value;	  return    equal?    valueNull    :!value;    	non-compiled	[CE]  	85	None	replace
639	[BUG]  [BUGGY]  return!regexp;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!regexp;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!regexp;	  return!negate;    	non-compiled	[CE]  	66	None	replace
640	[BUG]  [BUGGY]  return(valueNull  ||  valueNull);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull);	  return!negate;    	non-compiled	[CE]  	66	None	replace
641	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return  valueUndefined;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
642	[BUG]  [BUGGY]  valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull)  {  return  valueUndefined;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
643	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return  valueUndefined;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
644	[BUG]  [BUGGY]  if(valueNull)  {  return  value;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return  value;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  value;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
645	[BUG]  [BUGGY]  valueNull  |=  valueUndefined;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  |=  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  |=  valueUndefined;	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
646	[BUG]  [BUGGY]  valueNegative  =!valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNegative  =!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNegative  =!valueNull;	  if(valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	36	None	replace
647	[BUG]  [BUGGY]  valueNull  =!valueNegative;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  =!valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  =!valueNegative;	  if(valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	36	None	replace
648	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  valueNull  :  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  valueNull  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  valueNull  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
649	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)!negated  :  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)!negated  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)!negated  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
650	[BUG]  [BUGGY]  if(valueNull  ||  equal)return  true;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)return  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)return  true;	  if(valueNull)return    true;    	non-compiled	[CE]  	22	None	replace
651	[BUG]  [BUGGY]  Case  Token.NE:  return  valueNull  ||  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Case  Token.NE:  return  valueNull  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Case  Token.NE:  return  valueNull  ||  valueNull;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
652	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  -  valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  -  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  -  valueNull;	  case    Token.NE:    return    valueNull    ||    valueNull;    	non-compiled	[CE]  	141	None	replace
653	[BUG]  [BUGGY]  return  valueNull?!valueNonDefined  &&  valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNonDefined  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNonDefined  &&  valueNull;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
654	[BUG]  [BUGGY]  return  valueNull?!valueNegative  &&  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNegative  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNegative  &&  valueNull;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
655	[BUG]  [BUGGY]  return  valueNull?!valueEquivalent  &&  valueNull;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueEquivalent  &&  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueEquivalent  &&  valueNull;	  return    valueNull?!equivalent    &&    valueNull;    	non-compiled	[CE]  	14	None	replace
656	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!requires;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!requires;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!requires;	  return(valueNull    ||    valueNull)?    false    :!negated;    	non-compiled	[CE]  	80	None	replace
657	[BUG]  [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  equal);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  equal);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleUndefinedException(value,  equal);	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
658	[BUG]  [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  equal);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op,  equal);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleUndefinedException(value,  op,  equal);	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
659	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getLastChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getLastChild();	  parent!=    null    &&    parent    ==    value.getFirstChild();    	non-compiled	[CE]  	130	None	replace
660	[BUG]  [BUGGY]  parent!=  null  &&  value.getFirstChild()  ==  value.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getFirstChild()  ==  value.getFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getFirstChild()  ==  value.getFirstChild();	  parent!=    null    &&    parent    ==    value.getFirstChild();    	non-compiled	[CE]  	130	None	replace
661	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!regexp;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!regexp;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!regexp;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
662	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  false;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return    false;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	134	None	replace
663	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VAR  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    true)));    	non-compiled	[CE]  	93	None	replace
664	[BUG]  [BUGGY]  return  valueNull?valueUndefined  :  true;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueUndefined  :  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueUndefined  :  true;	  return    valueNull?!valueUndefined    :    false;    	non-compiled	[CE]  	71	None	replace
665	[BUG]  [BUGGY]  if(valueNull)return!error;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!error;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!error;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	48	None	replace
666	[BUG]  [BUGGY]  return  valueNull!valueNull  :!valueNegated;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull!valueNull  :!valueNegated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull!valueNull  :!valueNegated;	  return    valueNull?!valueNull    :!valueNegated;    	non-compiled	[CE]  	58	None	replace
667	[BUG]  [BUGGY]  if(valueNull)return!value;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;	  if(valueNull)return!recipe;    	non-compiled	[CE]  	24	None	replace
668	[BUG]  [BUGGY]  return!valueNegative;  if(valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative;  if(valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
669	[BUG]  [BUGGY]  return!valueNE;  if(valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNE;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNE;  if(valueNull)  {  return  false;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
670	[BUG]  [BUGGY]  return!valueNeeded;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNeeded;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNeeded;	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
671	[BUG]  [BUGGY]  valueNull  =!valueNeeded;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  =!valueNeeded;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  =!valueNeeded;	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
672	[BUG]  [BUGGY]  valueNeeded  =  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNeeded  =  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNeeded  =  valueNull;	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
673	[BUG]  [BUGGY]  return!valueNull  ||!negated;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  ||!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  ||!negated;	  return!negated    ||    valueNull;    	non-compiled	[CE]  	40	None	replace
674	[BUG]  [BUGGY]  while(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  while(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return  false;  }	  while(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	35	None	replace
675	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!valueNegative;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :!valueNegative;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!valueNegative;	  return(valueNull    ||    valueNull)?    false    :!negative;    	non-compiled	[CE]  	87	None	replace
676	[BUG]  [BUGGY]  valueNull  ||  valueNull)  {  return!valueNegative;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||  valueNull)  {  return!valueNegative;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||  valueNull)  {  return!valueNegative;  }	  if(valueNull    ||    valueNull)    {    return!valueNegative;    }    	non-compiled	[CE]  	114	None	replace
677	[BUG]  [BUGGY]  result  =  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  false;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	107	None	replace
678	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  ||  value.getFirstChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  ||  value.getFirstChild()!=  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)||(valueNull  ||  value.getFirstChild()!=  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
679	[BUG]  [BUGGY]  result  =  false;  if(valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  false;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  false;  if(valueNull)  {  return  false;  }	  if(valueNull)return    false;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	45	None	replace
680	[BUG]  [BUGGY]  if(valueNull)return  value!negate;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  value!negate;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  value!negate;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
681	[BUG]  [BUGGY]  if(valueNull)return  equal;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  equal;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  equal;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
682	[BUG]  [BUGGY]  if(valueNull)return  value;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  value;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  value;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
683	[BUG]  [BUGGY]  if(valueNull)  {  return  value!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return  value!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  value!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
684	[BUG]  [BUGGY]  return  valueNull?!valueNequivalent  :  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNequivalent  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNequivalent  :  valueNull;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
685	[BUG]  [BUGGY]  return  valueNull?!nequivalent  :  valueNull  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!nequivalent  :  valueNull  +  1;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent  :  valueNull  +  1;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
686	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)&&!requires;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)&&!requires;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)&&!requires;	  return(valueNull    ||    valueNull)&&!negated;    	non-compiled	[CE]  	83	None	replace
687	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)&&!regexp;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)&&!regexp;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)&&!regexp;	  return(valueNull    ||    valueNull)&&!negated;    	non-compiled	[CE]  	83	None	replace
688	[BUG]  [BUGGY]  valueNull  ||  valueNull)  {  return!valueUndefined;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  	4	None	replace
689	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  true  :!valueNull;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  true  :!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  true  :!valueNull;	  return(valueNull    ||    valueNull)?    true    :!negated;    	non-compiled	[CE]  	84	None	replace
690	[BUG]  [BUGGY]  result  =!nequivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!nequivalent;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!nequivalent;  if(valueNull)  {  return  false;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	43	None	replace
691	[BUG]  [BUGGY]  return!value;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!value;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!value;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	104	None	replace
692	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  valueUndefined;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  valueUndefined;	  return    valueNull?!equivalent    :    valueUndefined;    	non-compiled	[CE]  	12	None	replace
693	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VAR  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VAR  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VAR  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(value.getType()    ==    Token.VOID    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	94	None	replace
694	[BUG]  [BUGGY]  if(valueUndefined)return  true;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueUndefined)return  true;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return  true;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueUndefined)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
695	[BUG]  [BUGGY]  valueNull  ||!valueNE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||!valueNE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||!valueNE;	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
696	[BUG]  [BUGGY]  valueNull)  {  return!valueNE;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull)  {  return!valueNE;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull)  {  return!valueNE;  }	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
697	[BUG]  [BUGGY]  valueNull  |=!valueNE;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  |=!valueNE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  |=!valueNE;	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
698	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!negated;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return!negated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!negated;  }	  if(valueNull)    {    return!negated;    }    	non-compiled	[CE]  	37	None	replace
699	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNegated;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNegated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNegated;  }	  if(valueNull)    {    return!negated;    }    	non-compiled	[CE]  	37	None	replace
700	[BUG]  [BUGGY]  return  valueNull  :!valueEquivalent;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  :!valueEquivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  :!valueEquivalent;	  return    equal?    valueNull    :!valueEquivalent;    	non-compiled	[CE]  	86	None	replace
701	[BUG]  [BUGGY]  return  valueNull?  valueEquivalent  :!valueEquivalent;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueEquivalent  :!valueEquivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueEquivalent  :!valueEquivalent;	  return    equal?    valueNull    :!valueEquivalent;    	non-compiled	[CE]  	86	None	replace
702	[BUG]  [BUGGY]  return  valueNull?  valueEquivalent  :  equal;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  valueEquivalent  :  equal;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueEquivalent  :  equal;	  return    equal?    valueNull    :!valueEquivalent;    	non-compiled	[CE]  	86	None	replace
703	[BUG]  [BUGGY]  if(valueNull)return!error;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!error;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!error;	  if(valueNull)return!negate;    	non-compiled	[CE]  	20	None	replace
704	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!parent;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!parent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent())  {  return!parent;  }	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
705	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingValue(value,  op);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  aughtExceptionHandler.handleMissingValue(value,  op);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleMissingValue(value,  op);	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
706	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull?  valueNull  :  value;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull?  valueNull  :  value;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull?  valueNull  :  value;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
707	[BUG]  [BUGGY]  Case  Token.NE:  return  valueNull;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Case  Token.NE:  return  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Case  Token.NE:  return  valueNull;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
708	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull?  valueNull  :  valueUndefined;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull?  valueNull  :  valueUndefined;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
709	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNonNull  ||  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :!valueNonNull  ||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNonNull  ||  valueNull;	  return    valueNull?!valueNull    :!valueNonNull;    	non-compiled	[CE]  	55	None	replace
710	[BUG]  [BUGGY]  if(valueNull  ||  value.getType()  ==  Token.NE)  {  return  valueUndefined  ||  valueNull;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  value.getType()  ==  Token.NE)  {  return  valueUndefined  ||  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  value.getType()  ==  Token.NE)  {  return  valueUndefined  ||  valueNull;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
711	[BUG]  [BUGGY]  if(valueNull)  {  return  valueUndefined  ||  valueNull;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return  valueUndefined  ||  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  valueUndefined  ||  valueNull;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
712	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;	  if(valueNull)return!valueNull;    	non-compiled	[CE]  	25	None	replace
713	[BUG]  [BUGGY]  return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	106	None	replace
714	[BUG]  [BUGGY]  valueNull  ||  valueNull)  {  return!valueNegated;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  ||  valueNull)  {  return!valueNegated;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  ||  valueNull)  {  return!valueNegated;  }	  if(valueNull    ||    valueNull)    {    return!valueNegated;    }    	non-compiled	[CE]  	5	None	replace
715	[BUG]  [BUGGY]  return!valueNegated;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegated;	  if(valueNull    ||    valueNull)    {    return!valueNegated;    }    	non-compiled	[CE]  	5	None	replace
716	[BUG]  [BUGGY]  result  =  valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =  valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =  valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
717	[BUG]  [BUGGY]  result!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
718	[BUG]  [BUGGY]  result  =!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  result!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	10	None	replace
719	[BUG]  [BUGGY]  return  valueNull?  equal  :!valueNeed;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :!valueNeed;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!valueNeed;	  return    valueNull?    equal    :!valueUndefined;    	non-compiled	[CE]  	132	None	replace
720	[BUG]  [BUGGY]  Node  value  =  node.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  node.getLastChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  node.getLastChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  	75	None	replace
721	[BUG]  [BUGGY]  return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	7	None	replace
722	[BUG]  [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!NodeUtil.isLiteralValue(value.getLastChild());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  	151	None	replace
723	[BUG]  [BUGGY]  if(valueNull)  {  parent!=  null  &&  valueNull)  {  return!equivalent;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  parent!=  null  &&  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  parent!=  null  &&  valueNull)  {  return!equivalent;  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
724	[BUG]  [BUGGY]  Node  parent!=  null  &&  valueNull)  {  return!parent;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  parent!=  null  &&  valueNull)  {  return!parent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  parent!=  null  &&  valueNull)  {  return!parent;  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
725	[BUG]  [BUGGY]  valueNull  &&  valueNull)  {  return!equivalent;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNull  &&  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNull  &&  valueNull)  {  return!equivalent;  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
726	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return!valueNeeded;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return!valueNeeded;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return!valueNeeded;  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
727	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return!valueValue;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  valueNull)  {  return!valueValue;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return!valueValue;  }	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
728	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull?  valueUndefined  :!valueUndefined;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull?  valueUndefined  :!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull?  valueUndefined  :!valueUndefined;	  case    Token.NE:    return!valueUndefined;    	non-compiled	[CE]  	142	None	replace
729	[BUG]  [BUGGY]  if(valueNull)  {  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	28	None	replace
730	[BUG]  [BUGGY]  Node  value  =  value.getNext()  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext()  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext()  &&!NodeUtil.isLiteralValue(value.getFirstChild());	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
731	[BUG]  [BUGGY]  Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getLastChild());	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
732	[BUG]  [BUGGY]  Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getFirstChild(),  false));	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
733	[BUG]  [BUGGY]  Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext()  &&  ValueUtil.isLiteralValue(value.getFirstChild());	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
734	[BUG]  [BUGGY]  parent!=  null  &&  equal)  {  if(equivalent)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  equal)  {  if(equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  equal)  {  if(equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
735	[BUG]  [BUGGY]  parent  ==  if(equivalent)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent  ==  if(equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent  ==  if(equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
736	[BUG]  [BUGGY]  parent!=  null  &&  equal)  {  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  equal)  {  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  equal)  {  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
737	[BUG]  [BUGGY]  return!value;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!value;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!value;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!value;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	124	None	replace
738	[BUG]  [BUGGY]  result  =!value;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!value;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!value;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!value;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	124	None	replace
739	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }	  if(valueNull)return!valueUndefined;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	128	None	replace
740	[BUG]  [BUGGY]  return  valueNull?valueNum  :  valueNull;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?valueNum  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNum  :  valueNull;	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
741	[BUG]  [BUGGY]  return  valueNull?!valueNum  :  valueNull  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNum  :  valueNull  +  1;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  :  valueNull  +  1;	  return    valueNull?!valueNum    :    valueNull;    	non-compiled	[CE]  	101	None	replace
742	[BUG]  [BUGGY]  result  =!nequivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!nequivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!nequivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	122	None	replace
743	[BUG]  [BUGGY]  return  equal?  valueNull  :(valueEquivalent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equal?  valueNull  :(valueEquivalent);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :(valueEquivalent);	  return    valueNull?    equal    :(equivalent);    	non-compiled	[CE]  	131	None	replace
744	[BUG]  [BUGGY]  return!value;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!value;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!value;  if(valueNull)  {  return  false;  }	  if(valueNull)return!value;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	91	None	replace
745	[BUG]  [BUGGY]  valueNe  =  valueNull;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNe  =  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNe  =  valueNull;	  if(valueNull)    {    return!valueNe;    }    	non-compiled	[CE]  	98	None	replace
746	[BUG]  [BUGGY]  valueNe  =!valueNull;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  valueNe  =!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	valueNe  =!valueNull;	  if(valueNull)    {    return!valueNe;    }    	non-compiled	[CE]  	98	None	replace
747	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNull;  }  else  {  return  valueUndefined;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNull;  }  else  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNull;  }  else  {  return  valueUndefined;  }	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
748	[BUG]  [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueUndefined;  }  else  {  return  valueNull;  }	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
749	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNull;  }  else  {  return  null;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNull;  }  else  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNull;  }  else  {  return  null;  }	  if(valueNull)    {    return!valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	117	None	replace
750	[BUG]  [BUGGY]  if(!equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(!equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(!equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
751	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  value;  }  else  {  return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  value;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  value;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
752	[BUG]  [BUGGY]  if(equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)  {  return  valueUndefined;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
753	[BUG]  [BUGGY]  if(equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
754	[BUG]  [BUGGY]  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	30	None	replace
755	[BUG]  [BUGGY]  if(valueNull)return  null;  if(valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  null;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  null;  if(valueNull)  {  return  false;  }	  if(valueNull)return    true;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	46	None	replace
756	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  equalizer  :  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  equalizer  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  equalizer  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
757	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :  false;	  return(valueNull    ||    valueNull)?!negated    :    false;    	non-compiled	[CE]  	82	None	replace
758	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
759	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.NUMBER  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.NUMBER  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.NUMBER  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
760	[BUG]  [BUGGY]  ||  valueNull  ||  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ||  valueNull  ||  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	||  valueNull  ||  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild()    	non-compiled	[CE]  	96	None	replace
761	[BUG]  [BUGGY]  return(valueNull?  valueNull  :!valueNegative);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull?  valueNull  :!valueNegative);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull?  valueNull  :!valueNegative);	  return(valueNull?    valueNull    :!negative);    	non-compiled	[CE]  	89	None	replace
762	[BUG]  [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  	149	None	replace
763	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getNext());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getNext());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getNext());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  	149	None	replace
764	[BUG]  [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)&&(valueNull  ||  value.getFirstChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getType()  ==  Token.NE)&&(valueNull  ||  value.getFirstChild()!=  null);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getType()  ==  Token.NE)&&(valueNull  ||  value.getFirstChild()!=  null);	  return(valueNull    &&    value.getType()    ==    Token.NE)||(valueNull    &&    value.getFirstChild()!=    null);    	non-compiled	[CE]  	113	None	replace
765	[BUG]  [BUGGY]  if(equivalent  &&  valueNull)  {  return!equivalent;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent  &&  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent  &&  valueNull)  {  return!equivalent;  }	  if(valueNull    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	1	None	replace
766	[BUG]  [BUGGY]  return!result.equals(valueNull)?  valueNull  :!result;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!result.equals(valueNull)?  valueNull  :!result;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!result.equals(valueNull)?  valueNull  :!result;	  return!result;    	non-compiled	[CE]  	125	None	replace
767	[BUG]  [BUGGY]  return!result.booleanValue();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!result.booleanValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!result.booleanValue();	  return!result;    	non-compiled	[CE]  	125	None	replace
768	[BUG]  [BUGGY]  if(valueNull  ||  valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!valueNull;    if(valueNull    ||    equal)    {    return    false;    }    	non-compiled	[CE]  	156	None	replace
769	[BUG]  [BUGGY]  if(op  ==  Token.NE)return  true;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)return  true;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return  true;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
770	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!nequivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)return!nequivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return!nequivalent;  if(valueNull)  {  return  valueNull;  }	  if(op    ==    Token.NE)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	51	None	replace
771	[BUG]  [BUGGY]  return!value.booleanValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!value.booleanValue();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!value.booleanValue();	  return!negated.booleanValue();    	non-compiled	[CE]  	39	None	replace
772	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
773	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
774	[BUG]  [BUGGY]  if(valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  else  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  aughtExceptionHandler.handleUndefinedException(value,  op);  }  else  {  return  valueNull;  }	  aughtExceptionHandler.handleUndefinedException(value,    op);    	non-compiled	[CE]  	129	None	replace
775	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.getValue(value.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  ValueUtil.getValue(value.getFirstChild());	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
776	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.convertValue(value.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.convertValue(value.getLastChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  ValueUtil.convertValue(value.getLastChild());	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
777	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.getValue(value.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  ValueUtil.getValue(value.getLastChild());	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
778	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.isNegated(value.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.isNegated(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  ValueUtil.isNegated(value.getFirstChild());	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
779	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.convertValue(value.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueUndefined  :  ValueUtil.convertValue(value.getFirstChild());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  ValueUtil.convertValue(value.getFirstChild());	  return    valueNull?!valueUndefined    :    valueNull;    	non-compiled	[CE]  	102	None	replace
780	[BUG]  [BUGGY]  if(valueNull)return  null;  if(valueNull)  {  return  null;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  null;  if(valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  null;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    null;    }    	non-compiled	[CE]  	52	None	replace
781	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	47	None	replace
782	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
783	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false));    	non-compiled	[CE]  	95	None	replace
784	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
785	[BUG]  [BUGGY]  if(op)  {  if(equivalent)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op)  {  if(equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op)  {  if(equivalent)  {  return  false;  }	  if(valueNull)    {    if(equivalent)    {    return    false;    }    	non-compiled	[CE]  	32	None	replace
786	[BUG]  [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getNext()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getNext()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getNext()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());    	non-compiled	[CE]  	150	None	replace
787	[BUG]  [BUGGY]  ValueUtil.isLiteralValue(value.getFirstChild(),  false))  {  return  valueUndefined  ||  valueNull;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ValueUtil.isLiteralValue(value.getFirstChild(),  false))  {  return  valueUndefined  ||  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	ValueUtil.isLiteralValue(value.getFirstChild(),  false))  {  return  valueUndefined  ||  valueNull;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
788	[BUG]  [BUGGY]  if(value.getType()!=  Token.NE)  {  return  valueUndefined  ||  valueNull;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(value.getType()!=  Token.NE)  {  return  valueUndefined  ||  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(value.getType()!=  Token.NE)  {  return  valueUndefined  ||  valueNull;  }	  if(value.getType()    ==    Token.NE)    {    return    valueUndefined    ||    valueNull;    }    	non-compiled	[CE]  	78	None	replace
789	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!undefined;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!undefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!undefined;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
790	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!required;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :!required;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!required;	  return(valueNull    ||    valueNull)?    0    :!negated;    	non-compiled	[CE]  	81	None	replace
791	[BUG]  [BUGGY]  if(valueNull  ||  equalizer)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equalizer)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equalizer)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
792	[BUG]  [BUGGY]  if(valueNull  ||  equals)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equals)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equals)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
793	[BUG]  [BUGGY]  if(valueNull)return  false;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	140	None	replace
794	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNe.booleanValue();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNe.booleanValue();  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNe.booleanValue();  }	  if(valueNull)    {    return!valueNe;    }    	non-compiled	[CE]  	98	None	replace
795	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNe.intValue();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNe.intValue();  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNe.intValue();  }	  if(valueNull)    {    return!valueNe;    }    	non-compiled	[CE]  	98	None	replace
796	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  ||  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  ||  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  ||  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(value.getType()    ==    Token.VOID    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	94	None	replace
797	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.EMPTY  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.EMPTY  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.EMPTY  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(value.getType()    ==    Token.VOID    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	94	None	replace
798	[BUG]  [BUGGY]  return!require;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!require;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!require;	  return!negate;    	non-compiled	[CE]  	66	None	replace
799	[BUG]  [BUGGY]  return!reverse;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!reverse;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!reverse;	  return!negate;    	non-compiled	[CE]  	66	None	replace
800	[BUG]  [BUGGY]  return!valueNegative.equals(valueNull);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative.equals(valueNull);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative.equals(valueNull);	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
801	[BUG]  [BUGGY]  return!valueNegative  &&  value.getString().equals( "NE ")||  valueNull;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNegative  &&  value.getString().equals( "NE ")||  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative  &&  value.getString().equals( "NE ")||  valueNull;	  return!valueNegative;    	non-compiled	[CE]  	65	None	replace
802	[BUG]  [BUGGY]  if(valueNull  ||  equalizer  <=  0)return  false;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equalizer  <=  0)return  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equalizer  <=  0)return  false;	  if(valueNull)return    false;    	non-compiled	[CE]  	21	None	replace
803	[BUG]  [BUGGY]  if(valueNull  ||  equalizer  <  valueNull)return  false;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equalizer  <  valueNull)return  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equalizer  <  valueNull)return  false;	  if(valueNull)return    false;    	non-compiled	[CE]  	21	None	replace
804	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    true)));    	non-compiled	[CE]  	93	None	replace
805	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||(Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    true)));    	non-compiled	[CE]  	93	None	replace
806	[BUG]  [BUGGY]  if(valueNull)  {  return  result;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return  result;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  result;  }	  if(valueNull)    {    return    valueUndefined;    }    	non-compiled	[CE]  	144	None	replace
807	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNegative;  }  else  {  return  valueUndefined;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNegative;  }  else  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNegative;  }  else  {  return  valueUndefined;  }	  if(valueNull)    {    return!valueNegative;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	118	None	replace
808	[BUG]  [BUGGY]  if(valueNull)return  valueNull;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  valueNull;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  valueNull;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
809	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  equal;  if(valueNull)  {  return  equal;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  equal;  if(valueNull)  {  return  equal;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  equal;  if(valueNull)  {  return  equal;  }	  if(valueNull)    return    value!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	133	None	replace
810	[BUG]  [BUGGY]  return  valueNull  &&!valueUndefined;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!valueUndefined;	  return    valueNull    &&!equivalent;    	non-compiled	[CE]  	59	None	replace
811	[BUG]  [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op  ==  Token.NE)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)  {  return!equivalent;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
812	[BUG]  [BUGGY]  if(valueNull  ||!equivalent)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||!equivalent)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||!equivalent)  {  return  false;  }	  return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	44	None	replace
813	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  -  valueUndefined;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  -  valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  -  valueUndefined;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
814	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  +  1;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  +  1;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
815	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  &&  value.getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return  valueNull  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  &&  value.getType()  ==  Token.FUNCTION;	  case    Token.NE:    return    valueNull;    	non-compiled	[CE]  	145	None	replace
816	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNeeded;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNeeded;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!valueNeeded;  }	  if(valueNull)    {    return!valueNeeded;    }    	non-compiled	[CE]  	99	None	replace
817	[BUG]  [BUGGY]  return  valueNull?!equivalent?  valueNull  :  valueValueUndefined;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!equivalent?  valueNull  :  valueValueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent?  valueNull  :  valueValueUndefined;	  return    valueNull?!equivalent?    valueNull    :    valueUndefined;    	non-compiled	[CE]  	16	None	replace
818	[BUG]  [BUGGY]  if(valueNull)return!return;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!return;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!return;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!negate;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	48	None	replace
819	[BUG]  [BUGGY]  if(negated)  {  return!valueNull;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(negated)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(negated)  {  return!valueNull;  }	  if(valueNull)    {    return!negated;    }    	non-compiled	[CE]  	37	None	replace
820	[BUG]  [BUGGY]  result  =!negated;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  result  =!negated;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!negated;  if(valueNull)  {  return  valueNull;  }	  result    =!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	123	None	replace
821	[BUG]  [BUGGY]  return(valueNull  ||  value.getFirstChild().getType()  ==  Token.NE);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getFirstChild().getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getFirstChild().getType()  ==  Token.NE);	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NE;    	non-compiled	[CE]  	62	None	replace
822	[BUG]  [BUGGY]  return  equalizer  ||(valueNull  &!equivalent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  equalizer  ||(valueNull  &!equivalent);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equalizer  ||(valueNull  &!equivalent);	  return    equalizer    ||!equivalent;    	non-compiled	[CE]  	61	None	replace
823	[BUG]  [BUGGY]  parent!=  null  &&  value  ==  value.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value  ==  value.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value  ==  value.getNext();	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
824	[BUG]  [BUGGY]  parent!=  null  &&  value.getParent()  ==  parent;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  parent!=  null  &&  value.getParent()  ==  parent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  value.getParent()  ==  parent;	  parent!=    null    &&    parent    ==    value.getParent();    	non-compiled	[CE]  	119	None	replace
825	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)  {  return!valueNull;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueUndefined)  {  return!valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueUndefined)  {  return!valueNull;  }	  if(valueNull    ||    valueNull)    {    return!valueNull;    }    	non-compiled	[CE]  	2	None	replace
826	[BUG]  [BUGGY]  if(valueNull)  return  value!nequivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  return  value!nequivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  return  value!nequivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!nequivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	122	None	replace
827	[BUG]  [BUGGY]  ValueUtil.isNegatedValue(value.getFirstChild(),  false));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  ValueUtil.isNegatedValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	ValueUtil.isNegatedValue(value.getFirstChild(),  false));	  parent!=    null    &&    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	34	None	replace
828	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueUndefined)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return  false;  if(valueUndefined)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueUndefined)  {  return  valueNull;  }	  if(valueUndefined)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	49	None	replace
829	[BUG]  [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  valueNull;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!NEGATING_A_NON_NUMBER_ERROR  :  valueNull;	  return    valueNull?!nequivalent    :    valueNull;    	non-compiled	[CE]  	148	None	replace
830	[BUG]  [BUGGY]  return  valueNull!valueNull  :!valueUndefined;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull!valueNull  :!valueUndefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull!valueNull  :!valueUndefined;	  return    valueNull?!valueNull    :!valueUndefined;    	non-compiled	[CE]  	54	None	replace
831	[BUG]  [BUGGY]  case  Token.NE:  return!negated;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  case  Token.NE:  return!negated;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!negated;	  case    Token.NE:    return!valueUndefined;    	non-compiled	[CE]  	142	None	replace
832	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNE;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNE;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!valueNE;  }	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
833	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNew;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  return!valueNew;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNew;  }	  if(valueNull)    {    return!valueNE;    }    	non-compiled	[CE]  	100	None	replace
834	[BUG]  [BUGGY]  return(valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getFirstChild().getType()  ==  Token.FUNCTION);	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	63	None	replace
835	[BUG]  [BUGGY]  return  valueNull  ||(valueNull?  ValueUtil.isNegativeValue(value.getFirstChild()):  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||(valueNull?  ValueUtil.isNegativeValue(value.getFirstChild()):  null;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||(valueNull?  ValueUtil.isNegativeValue(value.getFirstChild()):  null;	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
836	[BUG]  [BUGGY]  return  valueNull  ||(valueNull?  ValueUtil.isNegativeValue(value.getLastChild()):  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||(valueNull?  ValueUtil.isNegativeValue(value.getLastChild()):  null;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||(valueNull?  ValueUtil.isNegativeValue(value.getLastChild()):  null;	  return    valueNull    ||!valueNull;    	non-compiled	[CE]  	60	None	replace
837	[BUG]  [BUGGY]  if(valueNull  ||  equalizer)return  true;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equalizer)return  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equalizer)return  true;	  if(valueNull)return    true;    	non-compiled	[CE]  	22	None	replace
838	[BUG]  [BUGGY]  if(valueNull  ||  equalise)return  true;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equalise)return  true;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equalise)return  true;	  if(valueNull)return    true;    	non-compiled	[CE]  	22	None	replace
839	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return  false;  }	  if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	115	None	replace
840	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)return  valueNull;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
841	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  value;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  value;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  value;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
842	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return  valueNull;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	31	None	replace
843	[BUG]  [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getString()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getString()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||!NodeUtil.isLiteralValue(value.getFirstChild().getString()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());    	non-compiled	[CE]  	153	None	replace
844	[BUG]  [BUGGY]  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	&&!NodeUtil.isLiteralValue(value.getFirstChild().getString());	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());    	non-compiled	[CE]  	153	None	replace
845	[BUG]  [BUGGY]  if(negated)return  false;  if(valueNull)  {  return  false;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(negated)return  false;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(negated)return  false;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	38	None	replace
846	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)return!negated;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)return!negated;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)return!negated;  if(valueNull)  {  return  false;  }	  if(valueNull)return!negated;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	38	None	replace
847	[BUG]  [BUGGY]  if(valueNull)return!negative;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)return!negative;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negative;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!negate;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	6	None	replace
848	[BUG]  [BUGGY]  return!valueNum  &&  op  ==  Token.NE;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNum  &&  op  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNum  &&  op  ==  Token.NE;	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
849	[BUG]  [BUGGY]  return!valueNum  ||  op  ==  Token.NE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNum  ||  op  ==  Token.NE;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNum  ||  op  ==  Token.NE;	  return!valueNum;    	non-compiled	[CE]  	137	None	replace
850	[BUG]  [BUGGY]  return  valueNull  ||  valueUndefined  :  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  ||  valueUndefined  :  false;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  valueUndefined  :  false;	  return    valueNull?!valueUndefined    :    false;    	non-compiled	[CE]  	71	None	replace
851	[BUG]  [BUGGY]  return  valueNull?  equal  :!requivalent;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?  equal  :!requivalent;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!requivalent;	  return    valueNull?    equal    :!nequivalent;    	non-compiled	[CE]  	19	None	replace
852	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.EMPTY  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	92	None	replace
853	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return    valueNull    &&    value.getString().equals(   "undefined   ")||    (Token.VOID    ==    value.getType()    &&    NodeUtil.isLiteralValue(value.getFirstChild(),    false)));    	non-compiled	[CE]  	92	None	replace
854	[BUG]  [BUGGY]  if(op)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
855	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  value;  }  else  {  return  valueNull;  }  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  value;  }  else  {  return  valueNull;  }  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  value;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    }    	non-compiled	[CE]  	29	None	replace
856	[BUG]  [BUGGY]  Node  value  =  item.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  item.getNext();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  item.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  	74	None	replace
857	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  null;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueNull)  {  return  null;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return  null;  }	  return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	50	None	replace
858	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  null;  }  else  {  return  valueNull;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  null;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  null;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
859	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  else  {  return  valueNull;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueUndefined;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
860	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  value;  }  else  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  value;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  value;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
861	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!requivalent;  }  else  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!requivalent;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!requivalent;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
862	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!valueNE;  }  else  {  return  valueNull;  }	  if(valueNull)    {    if(equivalent)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	26	None	replace
863	[BUG]  [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild(),  false))  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild(),  false))  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild(),  false))  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
864	[BUG]  [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild()))  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild()))  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild()))  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
865	[BUG]  [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getLastChild()))  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getLastChild()))  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  ValueUtil.isLiteralValue(value.getLastChild()))  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
866	[BUG]  [BUGGY]  if(valueNull  ||  ValueUtil.isNegated(value.getFirstChild()))  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  ValueUtil.isNegated(value.getFirstChild()))  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  ValueUtil.isNegated(value.getFirstChild()))  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
867	[BUG]  [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild(),  true))  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild(),  true))  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  ValueUtil.isLiteralValue(value.getFirstChild(),  true))  {  return  false;  }	  return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	11	None	replace
868	[BUG]  [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getLastChild()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||!NodeUtil.isLiteralValue(value.getLastChild()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||!NodeUtil.isLiteralValue(value.getLastChild()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  	151	None	replace
869	[BUG]  [BUGGY]  return(valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  value.getFirstChild().getType()  ==  Token.NAME);	  return!valueNull    &&    value.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	64	None	replace
870	[BUG]  [BUGGY]  Node  value  =  item.getFirstChild();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  value  =  item.getFirstChild();  return(value.getType()  ==  Token.NE);  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  item.getFirstChild();  return(value.getType()  ==  Token.NE);	  Node    value    =    value.getFirstChild();    return(value.getType()    ==    Token.NE);    	non-compiled	[CE]  	77	None	replace
871	[BUG]  [BUGGY]  return!equivalent  &&!valueNull;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!equivalent  &&!valueNull;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent  &&!valueNull;	  return!negated    &&!valueNull;    	non-compiled	[CE]  	127	None	replace
872	[BUG]  [BUGGY]  Node  valueUndefined  =  value.removeFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  Node  valueUndefined  =  value.removeFirstChild();  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.removeFirstChild();	  Node    valueUndefined    =    value.getFirstChild();    	non-compiled	[CE]  	79	None	replace
873	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getNext()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getNext()));  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getNext()));	  return!valueNull    &&!NodeUtil.isLiteralValue(value.getFirstChild()));    	non-compiled	[CE]  	154	None	replace
874	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)&&!undefined;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return(valueNull  ||  valueNull)&&!undefined;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)&&!undefined;	  return(valueNull    ||    valueNull)&&!negated;    	non-compiled	[CE]  	83	None	replace
875	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  valueValue;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  return  valueNull?!valueNull  :  valueValue;  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  valueValue;	  return    valueNull?!valueNull    :    valueNull;    	non-compiled	[CE]  	15	None	replace
876	[BUG]  [BUGGY]  if(valueNull  ||  valueUndefined)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  valueUndefined)  {  return  false;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueUndefined)  {  return  false;  }	  if(valueUndefined)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	8	None	replace
877	[BUG]  [BUGGY]  if(!equivalent)  {  return  valueUndefined;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(!equivalent)  {  return  valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(!equivalent)  {  return  valueUndefined;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
878	[BUG]  [BUGGY]  if(op)  {  if(!equivalent)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(op)  {  if(!equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op)  {  if(!equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
879	[BUG]  [BUGGY]  if(valueNull  ||!equivalent)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||!equivalent)  {  return  valueNull;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||!equivalent)  {  return  valueNull;  }	  if(valueNull)    {    if(!equivalent)    {    return    valueNull;    }    	non-compiled	[CE]  	27	None	replace
880	[BUG]  [BUGGY]  if(equivalent)  {  return!valueUndefined;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)  {  return!valueUndefined;  }	  if(equivalent)    {    return!valueNull;    }    	non-compiled	[CE]  	139	None	replace
881	[BUG]  [BUGGY]  if(equivalent  ||  valueNull)  {  return!equivalent;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(equivalent  ||  valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent  ||  valueNull)  {  return!equivalent;  }	  if(valueNull    ||    equal)    {    return!equivalent;    }    	non-compiled	[CE]  	3	None	replace
882	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!requivalent;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      &&  value.getString().equals(     "undefined     "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:      [BUGGY]  if(valueNull  ||  equal)  {  return!requivalent;  }  [BUGGY]      case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return!requivalent;  }	  if(valueNull    ||    equal)    {    return!equivalent;    }    	non-compiled	[CE]  	3	None	replace
