bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(valueNull  &&  valueNull)  {  return!equivalent;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull  &&  valueNull)  {  return!equivalent;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  &&  valueNull)  {  return!equivalent;  }	  if(valueNull    ||    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNull;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!valueNull;  }	  if(valueNull    ||    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return!equivalent;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull  ||  equal)  {  return!equivalent;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  equal)  {  return!equivalent;  }	  if(valueNull    ||    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueUndefined;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!valueUndefined;  }	  if(valueNull    ||    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNegated;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNegated;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!valueNegated;  }	  if(valueNull    ||    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  if(valueNull)return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negate;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!equivalent;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  if(valueUndefined)return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueUndefined)return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  if(valueNull)return!negated;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negated;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negated;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  result!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  result!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  return  valueNull?!equivalent  :  valueUndefined;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!equivalent  :  valueUndefined;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  :  valueUndefined;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
13	[BUG]  [BUGGY]  return  valueNull?!equivalent?  valueNull  :  valueNull;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!equivalent?  valueNull  :  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent?  valueNull  :  valueNull;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
14	[BUG]  [BUGGY]  return  valueNull?!equivalent  &&  valueNull;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!equivalent  &&  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  &&  valueNull;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  valueNull;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  valueNull;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
16	[BUG]  [BUGGY]  return  valueNull?!equivalent?  valueNull  :  valueUndefined;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!equivalent?  valueNull  :  valueUndefined;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent?  valueNull  :  valueUndefined;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
17	[BUG]  [BUGGY]  return  equal?  valueNull  :!equivalent;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  equal?  valueNull  :!equivalent;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :!equivalent;	  return    valueNull?    equal    :!equivalent;    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  return  valueNull?  equal  :!valueNull;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?  equal  :!valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!valueNull;	  return    valueNull?    equal    :!equivalent;    	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  return  valueNull?  equal  :!nequivalent;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?  equal  :!nequivalent;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!nequivalent;	  return    valueNull?    equal    :!equivalent;    	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  if(valueNull)return!negate;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negate;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negate;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
21	[BUG]  [BUGGY]  if(valueNull)return  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return  false;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
22	[BUG]  [BUGGY]  if(valueNull)return  true;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return  true;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  true;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  if(valueNull)return!booleanValue;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!booleanValue;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!booleanValue;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
24	[BUG]  [BUGGY]  if(valueNull)return!recipe;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!recipe;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!recipe;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
25	[BUG]  [BUGGY]  if(valueNull)return!valueNull;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNull;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
26	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
28	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return!equivalent;  }  else  {  return  valueNull;  }  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
30	[BUG]  [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(!equivalent)  {  return  valueNull;  }  else  {  return  valueNull;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
31	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  valueNull;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
32	[BUG]  [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  if(equivalent)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  if(equivalent)  {  return  false;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
33	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNull;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNull;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  parent!=  null  &&  valueNull)  {  return!equivalent;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  parent!=  null  &&  valueNull)  {  return!equivalent;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  while(valueNull)  {  return!equivalent;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  while(valueNull)  {  return!equivalent;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	while(valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNegative;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueNegative;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNegative;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  if(valueNull)  {  return!negated;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!negated;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!negated;  }	  return!negated;    	non-compiled	[CE]  	15	None	replace
38	[BUG]  [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  false;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negated;  if(valueNull)  {  return  false;  }	  return!negated;    	non-compiled	[CE]  	15	None	replace
39	[BUG]  [BUGGY]  return!negated.booleanValue();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!negated.booleanValue();  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated.booleanValue();	  return!negated;    	non-compiled	[CE]  	15	None	replace
40	[BUG]  [BUGGY]  return!negated  ||  valueNull;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!negated  ||  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated  ||  valueNull;	  return!negated;    	non-compiled	[CE]  	15	None	replace
41	[BUG]  [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negated;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negated;  if(valueNull)  {  return  valueNull;  }	  return!negated;    	non-compiled	[CE]  	15	None	replace
42	[BUG]  [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negate;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!nequivalent;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  return!equivalent;  if(valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!equivalent;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
45	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
46	[BUG]  [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  true;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!equivalent;  if(valueNull)  {  return  valueUndefined;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
48	[BUG]  [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negate;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negate;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
49	[BUG]  [BUGGY]  if(valueUndefined)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueUndefined)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueUndefined)return!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
51	[BUG]  [BUGGY]  if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(op  ==  Token.NE)return!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
52	[BUG]  [BUGGY]  if(valueNull)return!equivalent;  if(valueNull)  {  return  null;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!equivalent;  if(valueNull)  {  return  null;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!equivalent;  if(valueNull)  {  return  null;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
53	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNull;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :!valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNull;	  return    valueNull?!valueNull    :!equivalent;    	non-compiled	[CE]  	10	None	replace
54	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueUndefined;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :!valueUndefined;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueUndefined;	  return    valueNull?!valueNull    :!equivalent;    	non-compiled	[CE]  	10	None	replace
55	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNonNull;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :!valueNonNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNonNull;	  return    valueNull?!valueNull    :!equivalent;    	non-compiled	[CE]  	10	None	replace
56	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNegative;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :!valueNegative;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNegative;	  return    valueNull?!valueNull    :!equivalent;    	non-compiled	[CE]  	10	None	replace
57	[BUG]  [BUGGY]  return  valueNull?valueNull  :!equivalent;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?valueNull  :!equivalent;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?valueNull  :!equivalent;	  return    valueNull?!valueNull    :!equivalent;    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  return  valueNull?!valueNull  :!valueNegated;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :!valueNegated;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :!valueNegated;	  return    valueNull?!valueNull    :!equivalent;    	non-compiled	[CE]  	10	None	replace
59	[BUG]  [BUGGY]  return  valueNull  &&!equivalent;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  &&!equivalent;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&!equivalent;	  return    valueNull    ||!equivalent;    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  return  valueNull  ||!valueNull;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  ||!valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||!valueNull;	  return    valueNull    ||!equivalent;    	non-compiled	[CE]  	9	None	replace
61	[BUG]  [BUGGY]  return  equalizer  ||!equivalent;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  equalizer  ||!equivalent;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equalizer  ||!equivalent;	  return    valueNull    ||!equivalent;    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()  ==  Token.NE;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()  ==  Token.NE;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getFirstChild().getType()  ==  Token.NE;	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
63	[BUG]  [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
64	[BUG]  [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  return!valueNegative;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNegative;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNegative;	  return!negative;    	non-compiled	[CE]  	13	None	replace
66	[BUG]  [BUGGY]  return!negate;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!negate;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negate;	  return!negative;    	non-compiled	[CE]  	13	None	replace
67	[BUG]  [BUGGY]  return  valueNull?!equivalent  :  true;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!equivalent  :  true;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  :  true;	  return    valueNull?!equivalent    :    false;    	non-compiled	[CE]  	12	None	replace
68	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  false;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :  false;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  false;	  return    valueNull?!equivalent    :    false;    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  return  valueNull?!nequivalent  :  false;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!nequivalent  :  false;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent  :  false;	  return    valueNull?!equivalent    :    false;    	non-compiled	[CE]  	12	None	replace
70	[BUG]  [BUGGY]  return  valueNull?!nequivalent  :  true;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!nequivalent  :  true;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent  :  true;	  return    valueNull?!equivalent    :    false;    	non-compiled	[CE]  	12	None	replace
71	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  false;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueUndefined  :  false;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  false;	  return    valueNull?!equivalent    :    false;    	non-compiled	[CE]  	12	None	replace
72	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  false;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?  valueNull  :  false;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :  false;	  return    valueNull?!equivalent    :    false;    	non-compiled	[CE]  	12	None	replace
73	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  Node  value  =  value.getFirstChild();  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
74	[BUG]  [BUGGY]  Node  value  =  value.getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  Node  value  =  value.getNext();  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getNext();	      	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  Node  value  =  value.getLastChild();  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getLastChild();	      	non-compiled	[CE]  	7	None	replace
76	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  break;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  Node  value  =  value.getFirstChild();  break;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getFirstChild();  break;	      	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(value.getType()  ==  Token.NE);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  Node  value  =  value.getFirstChild();  return(value.getType()  ==  Token.NE);  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getFirstChild();  return(value.getType()  ==  Token.NE);	      	non-compiled	[CE]  	7	None	replace
78	[BUG]  [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueUndefined  ||  valueNull;  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(value.getType()  ==  Token.NE)  {  return  valueUndefined  ||  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(value.getType()  ==  Token.NE)  {  return  valueUndefined  ||  valueNull;  }	      	non-compiled	[CE]  	7	None	replace
79	[BUG]  [BUGGY]  Node  valueUndefined  =  value.getFirstChild();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  Node  valueUndefined  =  value.getFirstChild();  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  valueUndefined  =  value.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
80	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!negated;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  ||  valueNull)?  false  :!negated;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!negated;	  return!negated;    	non-compiled	[CE]  	15	None	replace
81	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!negated;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  ||  valueNull)?  0  :!negated;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!negated;	  return!negated;    	non-compiled	[CE]  	15	None	replace
82	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?!negated  :  false;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  ||  valueNull)?!negated  :  false;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?!negated  :  false;	  return!negated;    	non-compiled	[CE]  	15	None	replace
83	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)&&!negated;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  ||  valueNull)&&!negated;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)&&!negated;	  return!negated;    	non-compiled	[CE]  	15	None	replace
84	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  true  :!negated;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  ||  valueNull)?  true  :!negated;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  true  :!negated;	  return!negated;    	non-compiled	[CE]  	15	None	replace
85	[BUG]  [BUGGY]  return  equal?  valueNull  :!value;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  equal?  valueNull  :!value;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :!value;	  return    valueNull?    equal    :!equivalent;    	non-compiled	[CE]  	8	None	replace
86	[BUG]  [BUGGY]  return  equal?  valueNull  :!valueEquivalent;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  equal?  valueNull  :!valueEquivalent;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  equal?  valueNull  :!valueEquivalent;	  return    valueNull?    equal    :!equivalent;    	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :!negative;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  ||  valueNull)?  false  :!negative;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  false  :!negative;	  return!negative;    	non-compiled	[CE]  	13	None	replace
88	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :!negative;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  ||  valueNull)?  0  :!negative;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  ||  valueNull)?  0  :!negative;	  return!negative;    	non-compiled	[CE]  	13	None	replace
89	[BUG]  [BUGGY]  return(valueNull?  valueNull  :!negative);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull?  valueNull  :!negative);  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull?  valueNull  :!negative);	  return!negative;    	non-compiled	[CE]  	13	None	replace
90	[BUG]  [BUGGY]  if(valueNull)return!valueNull;  if(valueNull)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!valueNull;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNull;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
91	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
92	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	      	non-compiled	[CE]  	7	None	replace
93	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	      	non-compiled	[CE]  	7	None	replace
94	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(value.getType()  ==  Token.VOID  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	      	non-compiled	[CE]  	7	None	replace
95	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	      	non-compiled	[CE]  	7	None	replace
96	[BUG]  [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  &&  value.getString().equals( "undefined ")||(Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild()	      	non-compiled	[CE]  	7	None	replace
97	[BUG]  [BUGGY]  return  valueNull?!valueNum  :  false;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNum  :  false;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  :  false;	  return    valueNull?!equivalent    :    false;    	non-compiled	[CE]  	12	None	replace
98	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNe;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueNe;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNe;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNeeded;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueNeeded;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNeeded;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
100	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNE;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueNE;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNE;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
101	[BUG]  [BUGGY]  return  valueNull?!valueNum  :  valueNull;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNum  :  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNum  :  valueNull;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
102	[BUG]  [BUGGY]  return  valueNull?!valueUndefined  :  valueNull;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueUndefined  :  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueUndefined  :  valueNull;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
103	[BUG]  [BUGGY]  return  valueNull?!valueNull  :  value;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!valueNull  :  value;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!valueNull  :  value;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
104	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!value;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
105	[BUG]  [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!nequivalent;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
106	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
107	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
108	[BUG]  [BUGGY]  return  valueNull?  valueNull  :!valueNull;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?  valueNull  :!valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  valueNull  :!valueNull;	  return    valueNull?!valueNull    :!equivalent;    	non-compiled	[CE]  	10	None	replace
109	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
110	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  true)));	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
111	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
112	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  NodeUtil.isLiteralValue(value.getLastChild(),  false)));	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
113	[BUG]  [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return(valueNull  &&  value.getType()  ==  Token.NE)||(valueNull  &&  value.getFirstChild()!=  null);	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
114	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNegative;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueNegative;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return!valueNegative;  }	  if(valueNull    ||    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull    ||    valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	6	None	replace
116	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  }  else  {  return  valueNull;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  }  else  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent())  {  return!equivalent;  }  else  {  return  valueNull;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
117	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNull;  }  else  {  return  valueNull;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueNull;  }  else  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNull;  }  else  {  return  valueNull;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
118	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNegative;  }  else  {  return  valueNull;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueNegative;  }  else  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueNegative;  }  else  {  return  valueNull;  }	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
119	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getParent();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  parent!=  null  &&  parent  ==  value.getParent();  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getParent();	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
120	[BUG]  [BUGGY]  if(valueNull)return!negative;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!negative;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!negative;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
121	[BUG]  [BUGGY]  if(valueNull)return!nequivalent;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!nequivalent;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!nequivalent;	  if(valueNull)return!equivalent;    	non-compiled	[CE]  	16	None	replace
122	[BUG]  [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!nequivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!nequivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
123	[BUG]  [BUGGY]  result  =!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  result  =!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	result  =!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
124	[BUG]  [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!value;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!value;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
125	[BUG]  [BUGGY]  return!result;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!result;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!result;	  return!negated;    	non-compiled	[CE]  	15	None	replace
126	[BUG]  [BUGGY]  return!negated  ||  op  ==  Token.NE;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!negated  ||  op  ==  Token.NE;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated  ||  op  ==  Token.NE;	  return!negated;    	non-compiled	[CE]  	15	None	replace
127	[BUG]  [BUGGY]  return!negated  &&!valueNull;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!negated  &&!valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!negated  &&!valueNull;	  return!negated;    	non-compiled	[CE]  	15	None	replace
128	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    false;    }    	non-compiled	[CE]  	4	None	replace
129	[BUG]  [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  aughtExceptionHandler.handleUndefinedException(value,  op);  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	aughtExceptionHandler.handleUndefinedException(value,  op);	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
130	[BUG]  [BUGGY]  parent!=  null  &&  parent  ==  value.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  parent!=  null  &&  parent  ==  value.getFirstChild();  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	parent!=  null  &&  parent  ==  value.getFirstChild();	  if(valueNull)    {    return!equivalent;    }    else    {    return    valueNull;    }    	non-compiled	[CE]  	14	None	replace
131	[BUG]  [BUGGY]  return  valueNull?  equal  :(equivalent);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?  equal  :(equivalent);  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :(equivalent);	  return    valueNull?    equal    :!equivalent;    	non-compiled	[CE]  	8	None	replace
132	[BUG]  [BUGGY]  return  valueNull?  equal  :!valueUndefined;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?  equal  :!valueUndefined;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?  equal  :!valueUndefined;	  return    valueNull?    equal    :!equivalent;    	non-compiled	[CE]  	8	None	replace
133	[BUG]  [BUGGY]  if(valueNull)  return  value!equivalent;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  return  value!equivalent;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  return  value!equivalent;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
134	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return  false;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  false;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
135	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueUndefined;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
136	[BUG]  [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  valueNull;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return  true;  if(valueNull)  {  return  valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return  true;  if(valueNull)  {  return  valueNull;  }	  if(valueNull)return!equivalent;    if(valueNull)    {    return    valueNull;    }    	non-compiled	[CE]  	3	None	replace
137	[BUG]  [BUGGY]  return!valueNum;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNum;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNum;	  return!negative;    	non-compiled	[CE]  	13	None	replace
138	[BUG]  [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return!valueUndefined;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
139	[BUG]  [BUGGY]  if(equivalent)  {  return!valueNull;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(equivalent)  {  return!valueNull;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(equivalent)  {  return!valueNull;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
140	[BUG]  [BUGGY]  if(valueNull)  {  return  false;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  false;  }	  if(valueNull)    {    return!equivalent;    }    	non-compiled	[CE]  	2	None	replace
141	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull  ||  valueNull;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  case  Token.NE:  return  valueNull  ||  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull  ||  valueNull;	      	non-compiled	[CE]  	7	None	replace
142	[BUG]  [BUGGY]  case  Token.NE:  return!valueUndefined;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  case  Token.NE:  return!valueUndefined;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return!valueUndefined;	      	non-compiled	[CE]  	7	None	replace
143	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||  valueNull);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||  valueNull);  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	Node  value  =  value.getFirstChild();  return(valueNull  ||  valueNull);	      	non-compiled	[CE]  	7	None	replace
144	[BUG]  [BUGGY]  if(valueNull)  {  return  valueUndefined;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)  {  return  valueUndefined;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)  {  return  valueUndefined;  }	      	non-compiled	[CE]  	7	None	replace
145	[BUG]  [BUGGY]  case  Token.NE:  return  valueNull;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  case  Token.NE:  return  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	case  Token.NE:  return  valueNull;	      	non-compiled	[CE]  	7	None	replace
146	[BUG]  [BUGGY]  return  valueNull  ||  valueNull;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull  ||  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull  ||  valueNull;	      	non-compiled	[CE]  	7	None	replace
147	[BUG]  [BUGGY]  return  valueNull?!equivalent  :  value;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!equivalent  :  value;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!equivalent  :  value;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
148	[BUG]  [BUGGY]  return  valueNull?!nequivalent  :  valueNull;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return  valueNull?!nequivalent  :  valueNull;  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return  valueNull?!nequivalent  :  valueNull;	  return    valueNull?!equivalent    :    valueNull;    	non-compiled	[CE]  	11	None	replace
149	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
150	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getNext());	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
151	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
152	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getFirstChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&!NodeUtil.isValue(value.getFirstChild());  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isValue(value.getFirstChild());	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
153	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild().getString());	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
154	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));	  return!valueNull;    	non-compiled	[CE]  	1	None	replace
155	[BUG]  [BUGGY]  if(valueNull)return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNull;  if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
156	[BUG]  [BUGGY]  if(valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    &&  value.getString().equals(   "undefined   "))  ||  (Token.VOID  ==  value.getType()  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:    [BUGGY]  if(valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]    case  Token.SHEQ:  return  valueUndefined;  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6666666666666666	1133	1133	3	replace	if(valueNull)return!valueNull;  if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)return!equivalent;    if(valueNull    ||    valueNull)    {    return    false;    }    	non-compiled	[CE]  	5	None	replace
