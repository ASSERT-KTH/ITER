bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
2	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
3	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
4	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE  +  1);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
5	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  right);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
6	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
7	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined(right,  rhType);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined(right,  rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined(right,  rhType);	  return    rh.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	76	None	replace
8	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined(rhType,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined(rhType,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined(rhType,  left);	  return    rh.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	76	None	replace
9	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined(right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined(right);	  return    rh.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	76	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(Token.TRANSIENT));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(Token.TRANSIENT));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(Token.TRANSIENT));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rightLiteral));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
17	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(left);	  return    n.restrictByNotNullOrUndefined(left);    	non-compiled	[CE]  	74	None	replace
18	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(n);	  return    n.restrictByNotNullOrUndefined(left);    	non-compiled	[CE]  	74	None	replace
19	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined(left);	  return    n.restrictByNotNullOrUndefined(left);    	non-compiled	[CE]  	74	None	replace
20	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined(rh);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined(rh);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined(rh);	  return    n.restrictByNotNullOrUndefined(left);    	non-compiled	[CE]  	74	None	replace
21	[BUG]  [BUGGY]  return  rn!=  right.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn!=  right.getLastChild();	  return    rn!=    left.getLastChild();    	non-compiled	[CE]  	30	None	replace
22	[BUG]  [BUGGY]  return  rn!=  right.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn!=  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn!=  right.getFirstChild();	  return    rn!=    left.getLastChild();    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
24	[BUG]  [BUGGY]  if(rhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
25	[BUG]  [BUGGY]  if(rhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  null  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
26	[BUG]  [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  null  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
27	[BUG]  [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.FIELD  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.FIELD  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  null  ||  rhType!=  Token.FIELD  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
28	[BUG]  [BUGGY]  if(rhType!=  null  ||  rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  null  ||  rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  null  ||  rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
29	[BUG]  [BUGGY]  return  rhType.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getLastChild();	  return    right.getLastChild();    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getLastChild().getNext();	  return    left.getLastChild().getNext();    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  return  rh.getLastChild().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getLastChild().getNext();	  return    left.getLastChild().getNext();    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  return  left.getFirstChild().restrictByNotNullOrUndefined();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().restrictByNotNullOrUndefined();	  return    rn.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	18	None	replace
33	[BUG]  [BUGGY]  return  n.clone();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.clone();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.clone();	  return    rn.cloneTree();    	non-compiled	[CE]  	37	None	replace
34	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
35	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
36	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  left);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
37	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE  +  1);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
38	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
45	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  newNode;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
46	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  newNode;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
47	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
48	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
49	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  newNode;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
50	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
51	[BUG]  [BUGGY]  return  rhType.doubleValue;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.doubleValue;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.doubleValue;	  return    rhType.intValue;    	non-compiled	[CE]  	22	None	replace
52	[BUG]  [BUGGY]  return  rhType.intValue  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.intValue  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.intValue  -  1;	  return    rhType.intValue;    	non-compiled	[CE]  	22	None	replace
53	[BUG]  [BUGGY]  return  rhType.node;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.node;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.node;	  return    rhType.intValue;    	non-compiled	[CE]  	22	None	replace
54	[BUG]  [BUGGY]  return  rhType.intValue  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.intValue  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.intValue  +  1;	  return    rhType.intValue;    	non-compiled	[CE]  	22	None	replace
55	[BUG]  [BUGGY]  return  rhType.longValue;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.longValue;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.longValue;	  return    rhType.intValue;    	non-compiled	[CE]  	22	None	replace
56	[BUG]  [BUGGY]  return  rhType.value;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.value;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.value;	  return    rhType.intValue;    	non-compiled	[CE]  	22	None	replace
57	[BUG]  [BUGGY]  return  rhType!=  right.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  right.getFirstChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
58	[BUG]  [BUGGY]  return  rhType!=  left.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  left.getLastChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
59	[BUG]  [BUGGY]  return  rhType  ==  right.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  right.getFirstChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
60	[BUG]  [BUGGY]  return  rhType!=  right.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  right.getLastChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
61	[BUG]  [BUGGY]  return  rhType  ==  left.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  left.getLastChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
62	[BUG]  [BUGGY]  return  rhType  ==  right.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  right.getLastChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
63	[BUG]  [BUGGY]  return  left  ==  right.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left  ==  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left  ==  right.getLastChild();	  return    left!=    right.getFirstChild();    	non-compiled	[CE]  	25	None	replace
64	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  left.getLastChild()  :  right.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  left.getLastChild()  :  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  left.getLastChild()  :  right.getLastChild();	  return    left!=    right.getFirstChild();    	non-compiled	[CE]  	25	None	replace
65	[BUG]  [BUGGY]  return  rhType!=  Token.NAME?  left.getLastChild()  :  right.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NAME?  left.getLastChild()  :  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NAME?  left.getLastChild()  :  right.getLastChild();	  return    left!=    right.getFirstChild();    	non-compiled	[CE]  	25	None	replace
66	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  left.getFirstChild()  :  right.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  left.getFirstChild()  :  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  left.getFirstChild()  :  right.getLastChild();	  return    left!=    right.getFirstChild();    	non-compiled	[CE]  	25	None	replace
67	[BUG]  [BUGGY]  return  rhType!=  Token.NAME?  left.getFirstChild()  :  right.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NAME?  left.getFirstChild()  :  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NAME?  left.getFirstChild()  :  right.getLastChild();	  return    left!=    right.getFirstChild();    	non-compiled	[CE]  	25	None	replace
68	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
69	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
70	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
71	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
72	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
73	[BUG]  [BUGGY]  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
74	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(rhType,  right);	  return    n.restrictByNotNullOrUndefined(rhType,    right);    	non-compiled	[CE]  	47	None	replace
75	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  rn);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  rn);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(rhType,  rn);	  return    n.restrictByNotNullOrUndefined(rhType,    right);    	non-compiled	[CE]  	47	None	replace
76	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(rhType,  null);	  return    n.restrictByNotNullOrUndefined(rhType,    right);    	non-compiled	[CE]  	47	None	replace
77	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined(rhType,  left);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined(rhType,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined(rhType,  left);	  return    n.restrictByNotNullOrUndefined(rhType,    right);    	non-compiled	[CE]  	47	None	replace
78	[BUG]  [BUGGY]  return  rhType.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getNext();	  return    rn.getNext();    	non-compiled	[CE]  	51	None	replace
79	[BUG]  [BUGGY]  return  rn.getNext()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.getNext()  +  1;	  return    rn.getNext();    	non-compiled	[CE]  	51	None	replace
80	[BUG]  [BUGGY]  return  right.getNext()  &&  rhType!=  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getNext()  &&  rhType!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getNext()  &&  rhType!=  Token.FUNCTION;	  return    right.getNext();    	non-compiled	[CE]  	50	None	replace
81	[BUG]  [BUGGY]  return  right.getNext()  &&  rhType!=  Token.FALSE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getNext()  &&  rhType!=  Token.FALSE;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getNext()  &&  rhType!=  Token.FALSE;	  return    right.getNext();    	non-compiled	[CE]  	50	None	replace
82	[BUG]  [BUGGY]  return  left.node;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.node;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.node;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
83	[BUG]  [BUGGY]  return  n.node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.node;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.node;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
84	[BUG]  [BUGGY]  return  rh.node  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.node  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.node  +  1;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
85	[BUG]  [BUGGY]  return  rh.node  ||  rhType!=  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.node  ||  rhType!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.node  ||  rhType!=  Token.FUNCTION;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
86	[BUG]  [BUGGY]  return  rh.node  ||  rhType  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.node  ||  rhType  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.node  ||  rhType  ==  Token.FUNCTION;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
87	[BUG]  [BUGGY]  return  rh.node  &&  rhType!=  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.node  &&  rhType!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.node  &&  rhType!=  Token.FUNCTION;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
88	[BUG]  [BUGGY]  return  rh.node  ||  rhType!=  Token.NULL;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.node  ||  rhType!=  Token.NULL;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.node  ||  rhType!=  Token.NULL;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
89	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
90	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
91	[BUG]  [BUGGY]  while(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  left.getLastChild();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  while(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	while(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
92	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
93	[BUG]  [BUGGY]  while(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  while(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	while(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
94	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
95	[BUG]  [BUGGY]  rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  not  a  statement	58	None	replace
96	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
97	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
98	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
99	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getNext();  }  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
100	[BUG]  [BUGGY]  return  rhType.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.removeFirstChild();	  return    left.removeFirstChild();    	non-compiled	[CE]  	39	None	replace
101	[BUG]  [BUGGY]  return  rhType.toString()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.toString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.toString()  +  1;	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
102	[BUG]  [BUGGY]  return  rhType.toLowerCase();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.toLowerCase();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.toLowerCase();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
103	[BUG]  [BUGGY]  return  n.toString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.toString();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
104	[BUG]  [BUGGY]  return  rhType.toString()  + "n ";  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.toString()  + "n ";  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.toString()  + "n ";	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
105	[BUG]  [BUGGY]  return  left.toString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.toString();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
106	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  rhType  :  null;	  return    rhType!=    Token.NULL?    rhType    :    null;    	non-compiled	[CE]  	89	None	replace
107	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  left  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  left  :  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  left  :  null;	  return    rhType!=    Token.NULL?    rhType    :    null;    	non-compiled	[CE]  	89	None	replace
108	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  left  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  left  :  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  left  :  null;	  return    rhType!=    Token.NULL?    rhType    :    null;    	non-compiled	[CE]  	89	None	replace
109	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.MAX_VALUE;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.MAX_VALUE;	  return    rhType!=    Token.NULL?    rhType    :    null;    	non-compiled	[CE]  	89	None	replace
110	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.VALUE_NUMBER_ERROR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.VALUE_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.VALUE_NUMBER_ERROR);	  return    rhType!=    Token.NULL?    rhType    :    null;    	non-compiled	[CE]  	89	None	replace
111	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.MIN_VALUE;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.MIN_VALUE;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.MIN_VALUE;	  return    rhType!=    Token.NULL?    rhType    :    null;    	non-compiled	[CE]  	89	None	replace
112	[BUG]  [BUGGY]  return  left  ==  Token.NULL?  rhType  :  rh;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left  ==  Token.NULL?  rhType  :  rh;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left  ==  Token.NULL?  rhType  :  rh;	  return    rhType    ==    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	90	None	replace
113	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  left  :  right;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  left  :  right;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  left  :  right;	  return    rhType    ==    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	90	None	replace
114	[BUG]  [BUGGY]  return  left  ==  null?  rhType  :  rh;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left  ==  null?  rhType  :  rh;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left  ==  null?  rhType  :  rh;	  return    rhType    ==    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	90	None	replace
115	[BUG]  [BUGGY]  return  left  ==  null?  rhType  :  Token.NULL;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left  ==  null?  rhType  :  Token.NULL;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left  ==  null?  rhType  :  Token.NULL;	  return    rhType    ==    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	90	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left,  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left,  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right,  rhType));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right,  rhType));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right,  rhType));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  rhType);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  rhType);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right,  rhType));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right,  rhType));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right,  rhType));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left,  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right,  null));  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right,  null));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right,  null));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
123	[BUG]  [BUGGY]  return  left.getNext()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	52	None	replace
124	[BUG]  [BUGGY]  return  rh.getNext()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	52	None	replace
125	[BUG]  [BUGGY]  return  right.getNext()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	52	None	replace
126	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
127	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
128	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.FUNCTION)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
129	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  false;  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
130	[BUG]  [BUGGY]  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	||  rhType  ==  Token.FUNCTION)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
131	[BUG]  [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  return  false;  }  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
132	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	15	None	replace
133	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.getLastChild().getString().equals(rhType);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined()  &&  right.getLastChild().getString().equals(rhType);	  return    left.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	15	None	replace
134	[BUG]  [BUGGY]  return  rh.clone();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.clone();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.clone();	  return    rh.cloneTree();    	non-compiled	[CE]  	2	None	replace
135	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  ||  right.getLastChild().getString().equals(rhType);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  ||  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  ||  right.getLastChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().toString()  &&  right.getLastChild().getString().equals(rhType);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().toString()  &&  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().toString()  &&  right.getLastChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
137	[BUG]  [BUGGY]  return  left.getLastChild().getNext()  &&  right.getLastChild().getString().equals(rhType);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().getNext()  &&  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().getNext()  &&  right.getLastChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
138	[BUG]  [BUGGY]  return  right.getFirstChild().getNext()  &&  left.getLastChild().getString().equals(rhType);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getFirstChild().getNext()  &&  left.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getFirstChild().getNext()  &&  left.getLastChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
139	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getString().equals(rhType);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
140	[BUG]  [BUGGY]  return  rhType.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(left);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(left);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
141	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
142	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
143	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
144	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
145	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  return  true;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  return  true;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
146	[BUG]  [BUGGY]  return  left.getLastChild().getNext().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().getNext().getNext();	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
147	[BUG]  [BUGGY]  return  right.getFirstChild().getNext().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getFirstChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getFirstChild().getNext().getNext();	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
148	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getNext(),  right.getLastChild().getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getNext(),  right.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getNext(),  right.getLastChild().getNext();	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
149	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getNext()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getNext()  +  1;	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
150	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getNext().getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getNext().getNext();	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
151	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    right.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	16	None	replace
152	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined()  &&  left.getLastChild().getString().equals(rhType);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined()  &&  left.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined()  &&  left.getLastChild().getString().equals(rhType);	  return    right.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	16	None	replace
153	[BUG]  [BUGGY]  return  left.replaceChild(n,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(n,  right);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
154	[BUG]  [BUGGY]  return  n.replaceChild(left,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.replaceChild(left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.replaceChild(left,  newNode);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
155	[BUG]  [BUGGY]  return  left.replaceChild(n,  newNode,  rhType);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(n,  newNode,  rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(n,  newNode,  rhType);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
156	[BUG]  [BUGGY]  return  right.replaceChild(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.replaceChild(n,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.replaceChild(n,  newNode);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
157	[BUG]  [BUGGY]  return  left.replaceChild(n,  newNode,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(n,  newNode,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(n,  newNode,  right);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
158	[BUG]  [BUGGY]  return  newNode.replaceChild(left,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  newNode.replaceChild(left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  newNode.replaceChild(left,  newNode);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
159	[BUG]  [BUGGY]  return  rh.replaceChild(n,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.replaceChild(n,  left);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
160	[BUG]  [BUGGY]  return  rn  ==  left.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn  ==  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn  ==  left.getFirstChild();	  return    n    ==    left.getLastChild();    	non-compiled	[CE]  	31	None	replace
161	[BUG]  [BUGGY]  return  n  ==  right.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n  ==  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n  ==  right.getLastChild();	  return    n    ==    left.getLastChild();    	non-compiled	[CE]  	31	None	replace
162	[BUG]  [BUGGY]  return  n  ==  right.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n  ==  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n  ==  right.getFirstChild();	  return    n    ==    left.getLastChild();    	non-compiled	[CE]  	31	None	replace
163	[BUG]  [BUGGY]  return  left.getFirstChild()  ==  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild()  ==  n;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild()  ==  n;	  return    n    ==    left.getLastChild();    	non-compiled	[CE]  	31	None	replace
164	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  null;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  	82	None	replace
165	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  null;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  	82	None	replace
166	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  	82	None	replace
167	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  this;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  this;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  this;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  	82	None	replace
168	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  null;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  	82	None	replace
169	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  null;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  	82	None	replace
170	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined()  +  1;	  return    n.restrictByNotNullOrUndefined()    +    1;    	non-compiled	[CE]  	19	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  new  NodeTraversal(token));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType),  new  NodeTraversal(token));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
177	[BUG]  [BUGGY]  return  left.removeLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.removeLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.removeLastChild();	  return    right.removeFirstChild();    	non-compiled	[CE]  	41	None	replace
178	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined(n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined(n);	  return    n.restrictByNotNullOrUndefined(right);    	non-compiled	[CE]  	73	None	replace
179	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(rh);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(rh);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(rh);	  return    n.restrictByNotNullOrUndefined(right);    	non-compiled	[CE]  	73	None	replace
180	[BUG]  [BUGGY]  return  rn.restrictByNotNullOrUndefined(right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.restrictByNotNullOrUndefined(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.restrictByNotNullOrUndefined(right);	  return    n.restrictByNotNullOrUndefined(right);    	non-compiled	[CE]  	73	None	replace
181	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(rhType,  n);	  return    n.restrictByNotNullOrUndefined(rhType,    left);    	non-compiled	[CE]  	44	None	replace
182	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(right,  left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(right,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(right,  left);	  return    n.restrictByNotNullOrUndefined(rhType,    left);    	non-compiled	[CE]  	44	None	replace
183	[BUG]  [BUGGY]  return  n.getLastChild().getNext().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getLastChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getLastChild().getNext().getNext();	  return    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	81	None	replace
184	[BUG]  [BUGGY]  return  rn.getFirstChild().getNext().getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.getFirstChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.getFirstChild().getNext().getNext();	  return    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	81	None	replace
185	[BUG]  [BUGGY]  return  left.cloneNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.cloneNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
186	[BUG]  [BUGGY]  return  rh.cloneNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.cloneNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
187	[BUG]  [BUGGY]  return  right.cloneNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.cloneNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
188	[BUG]  [BUGGY]  return  rhType.cloneNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.cloneNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
189	[BUG]  [BUGGY]  return  rn.cloneNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.cloneNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
190	[BUG]  [BUGGY]  return  n.cloneNode(rhType);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.cloneNode(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.cloneNode(rhType);	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
191	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	79	None	replace
192	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	79	None	replace
193	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	79	None	replace
194	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	79	None	replace
195	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	79	None	replace
196	[BUG]  [BUGGY]  return  left.getLastChild().getString();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().getString();	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
197	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
198	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
199	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
200	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
201	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
202	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
203	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
204	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getString()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getString()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getString()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
205	[BUG]  [BUGGY]  return  left.getLastChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
206	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
207	[BUG]  [BUGGY]  return  right.getFirstChild().getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getFirstChild().getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getFirstChild().getNext()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
208	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  new  NodeTraversal());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal());    	non-compiled	[CE]  	66	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType),  new  NodeTraversal());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  rhType),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal());    	non-compiled	[CE]  	66	None	replace
211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal());    	non-compiled	[CE]  	66	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal());    	non-compiled	[CE]  	66	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal());    	non-compiled	[CE]  	66	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rhType,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal());    	non-compiled	[CE]  	66	None	replace
215	[BUG]  [BUGGY]  return  rhType!=  Token.NAME?  rhType  +  1  :  rhType  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NAME?  rhType  +  1  :  rhType  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NAME?  rhType  +  1  :  rhType  +  1;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
216	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  +  1  :  rhType  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  +  1  :  rhType  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  +  1  :  rhType  +  1;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
217	[BUG]  [BUGGY]  return  rhType  ==  Token.NAME?  rhType  +  1  :  rhType  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NAME?  rhType  +  1  :  rhType  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NAME?  rhType  +  1  :  rhType  +  1;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
218	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  +  1  :  rhType  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  +  1  :  rhType  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  +  1  :  rhType  +  1;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
219	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  +  1  :  rhType  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  +  1  :  rhType  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  +  1  :  rhType  +  1;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
220	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  left);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
221	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  left);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
222	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  1);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
223	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
224	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  1);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
225	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  0);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  0);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  0);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(token));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  token));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(token));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(token));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(token));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rhType));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rhType));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rhType));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
232	[BUG]  [BUGGY]  return  right.cloneTree()  &&  rhType!=  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.cloneTree()  &&  rhType!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.cloneTree()  &&  rhType!=  Token.FUNCTION;	  return    right.cloneTree();    	non-compiled	[CE]  	36	None	replace
233	[BUG]  [BUGGY]  return  right.cloneTree()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.cloneTree()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.cloneTree()  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    right.cloneTree();    	non-compiled	[CE]  	36	None	replace
234	[BUG]  [BUGGY]  return  right.cloneTree()  &&  left.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.cloneTree()  &&  left.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.cloneTree()  &&  left.getFirstChild().getType()!=  Token.FUNCTION;	  return    right.cloneTree();    	non-compiled	[CE]  	36	None	replace
235	[BUG]  [BUGGY]  return  left  ==  right.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left  ==  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left  ==  right.getFirstChild();	  return    left!=    right.getLastChild();    	non-compiled	[CE]  	28	None	replace
236	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  left.getLastChild()  :  right.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  left.getLastChild()  :  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  left.getLastChild()  :  right.getFirstChild();	  return    left!=    right.getLastChild();    	non-compiled	[CE]  	28	None	replace
237	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(right);	  return    right.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	45	None	replace
238	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined(rhType,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined(rhType,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined(rhType,  n);	  return    right.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	45	None	replace
239	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined;	  return    right.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	45	None	replace
240	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    rh.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	1	None	replace
241	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    rh.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	1	None	replace
242	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;	  return    rh.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	1	None	replace
243	[BUG]  [BUGGY]  return  rhType.getLastChild().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getLastChild().getNext();	  return    rhType.getFirstChild().getNext();    	non-compiled	[CE]  	95	None	replace
244	[BUG]  [BUGGY]  return  rhType.getFirstChild().getNext()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getFirstChild().getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getFirstChild().getNext()  +  1;	  return    rhType.getFirstChild().getNext();    	non-compiled	[CE]  	95	None	replace
245	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined()  +  1;	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
246	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
247	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
248	[BUG]  [BUGGY]  return  rn.getFirstChild().getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	11	None	replace
249	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.TRUE)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
250	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
251	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  return  false;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
252	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
253	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
254	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
255	[BUG]  [BUGGY]  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
256	[BUG]  [BUGGY]  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
257	[BUG]  [BUGGY]  ||  rhType  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  ||  rhType  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	||  rhType  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
258	[BUG]  [BUGGY]  return  right.replaceChild(left,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.replaceChild(left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.replaceChild(left,  newNode);	  return    left.replaceChild(left,    newNode);    	non-compiled	[CE]  	62	None	replace
259	[BUG]  [BUGGY]  return  rh.replaceChild(left,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.replaceChild(left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.replaceChild(left,  newNode);	  return    left.replaceChild(left,    newNode);    	non-compiled	[CE]  	62	None	replace
260	[BUG]  [BUGGY]  return  left.replaceChild(right,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(right,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(right,  newNode);	  return    left.replaceChild(left,    newNode);    	non-compiled	[CE]  	62	None	replace
261	[BUG]  [BUGGY]  return  rhType.clone();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.clone();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.clone();	  return    rhType.cloneTree();    	non-compiled	[CE]  	35	None	replace
262	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(rhType,  1);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
263	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(rhType,  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(rhType,  2);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(rhType,  2);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
264	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(n,  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(n,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(n,  1);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
265	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(rhType,  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(rhType,  0);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(rhType,  0);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
266	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined(rhType,  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined(rhType,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined(rhType,  1);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
267	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(right,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(right,  n);	  return    n.restrictByNotNullOrUndefined(right,    rhType);    	non-compiled	[CE]  	75	None	replace
268	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(left,  rhType);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(left,  rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(left,  rhType);	  return    n.restrictByNotNullOrUndefined(right,    rhType);    	non-compiled	[CE]  	75	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rn,  new  NodeTraversal(Token.TRANSIENT,  left));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left));    	non-compiled	[CE]  	68	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right,  left));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right,  left));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left));    	non-compiled	[CE]  	68	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(Token.TRANSIENT,  left));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left));    	non-compiled	[CE]  	68	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(Token.TRANSIENT,  left));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left));    	non-compiled	[CE]  	68	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  left);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right),  left);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left));    	non-compiled	[CE]  	68	None	replace
274	[BUG]  [BUGGY]  return  left!=  Token.NULL?  rhType  :  rh;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left!=  Token.NULL?  rhType  :  rh;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left!=  Token.NULL?  rhType  :  rh;	  return    rhType!=    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	86	None	replace
275	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  left  :  right;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  left  :  right;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  left  :  right;	  return    rhType!=    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	86	None	replace
276	[BUG]  [BUGGY]  return  rhType.doubleValue()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.doubleValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.doubleValue()  +  1;	  return    rhType.doubleValue();    	non-compiled	[CE]  	21	None	replace
277	[BUG]  [BUGGY]  return  rhType.doubleValue()  +  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.doubleValue()  +  2;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.doubleValue()  +  2;	  return    rhType.doubleValue();    	non-compiled	[CE]  	21	None	replace
278	[BUG]  [BUGGY]  return  n.doubleValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.doubleValue();	  return    rhType.doubleValue();    	non-compiled	[CE]  	21	None	replace
279	[BUG]  [BUGGY]  return  left.doubleValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.doubleValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.doubleValue();	  return    rhType.doubleValue();    	non-compiled	[CE]  	21	None	replace
280	[BUG]  [BUGGY]  return  rhType.doubleValue()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.doubleValue()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.doubleValue()  -  1;	  return    rhType.doubleValue();    	non-compiled	[CE]  	21	None	replace
281	[BUG]  [BUGGY]  return  rn  ==  left.getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn  ==  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn  ==  left.getLastChild();	  return    n    ==    left.getFirstChild();    	non-compiled	[CE]  	64	None	replace
282	[BUG]  [BUGGY]  return  rhType.intValue()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.intValue()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.intValue()  +  1;	  return    rhType.intValue();    	non-compiled	[CE]  	24	None	replace
283	[BUG]  [BUGGY]  return  rhType.longValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.longValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.longValue();	  return    rhType.intValue();    	non-compiled	[CE]  	24	None	replace
284	[BUG]  [BUGGY]  return  n.intValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.intValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.intValue();	  return    rhType.intValue();    	non-compiled	[CE]  	24	None	replace
285	[BUG]  [BUGGY]  return  left.intValue();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.intValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.intValue();	  return    rhType.intValue();    	non-compiled	[CE]  	24	None	replace
286	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  :  null;	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
287	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  left  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  left  :  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  left  :  null;	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
288	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  left  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  left  :  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  left  :  null;	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
289	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.MAX_VALUE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  :  Integer.MAX_VALUE;	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
290	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.MAX_VALUE;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  :  Integer.MAX_VALUE;	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
291	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  NodeUtil.newNumber(right.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  :  NodeUtil.newNumber(right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  :  NodeUtil.newNumber(right.getString());	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
292	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(n,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(n,  left);	  return    rhType.restrictByNotNullOrUndefined(n);    	non-compiled	[CE]  	46	None	replace
293	[BUG]  [BUGGY]  return  left.clone();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.clone();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.clone();	  return    left.cloneTree();    	non-compiled	[CE]  	34	None	replace
294	[BUG]  [BUGGY]  return  left.cloneTree()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.cloneTree()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.cloneTree()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.cloneTree();    	non-compiled	[CE]  	34	None	replace
295	[BUG]  [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().equals(rhType);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.cloneTree()  &&  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.cloneTree()  &&  right.getLastChild().getString().equals(rhType);	  return    left.cloneTree();    	non-compiled	[CE]  	34	None	replace
296	[BUG]  [BUGGY]  return  right.getFirstChild().getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getFirstChild().getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getFirstChild().getLastChild();	  return    left.getFirstChild().getLastChild();    	non-compiled	[CE]  	77	None	replace
297	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getFirstChild().getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getFirstChild().getLastChild();	  return    left.getFirstChild().getLastChild();    	non-compiled	[CE]  	77	None	replace
298	[BUG]  [BUGGY]  return  rh.getFirstChild().getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getFirstChild().getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getFirstChild().getLastChild();	  return    left.getFirstChild().getLastChild();    	non-compiled	[CE]  	77	None	replace
299	[BUG]  [BUGGY]  return  left.getLastChild().getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().getFirstChild();	  return    left.getFirstChild().getLastChild();    	non-compiled	[CE]  	77	None	replace
300	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
301	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
302	[BUG]  [BUGGY]  return  rhType  >=  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  >=  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  >=  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
303	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION  ||  rhType!=  Token.NUMBER;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION  ||  rhType!=  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION  ||  rhType!=  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
304	[BUG]  [BUGGY]  return  rhType  ==  token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  token.FUNCTION  ||  rhType  ==  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
305	[BUG]  [BUGGY]  return  rhType  >>  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  >>  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  >>  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
306	[BUG]  [BUGGY]  return  lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  lhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
307	[BUG]  [BUGGY]  return  left.getLastChild().restrictByNotNullOrUndefined();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().restrictByNotNullOrUndefined();	  return    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  	93	None	replace
308	[BUG]  [BUGGY]  return  n.getLastChild().restrictByNotNullOrUndefined();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getLastChild().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getLastChild().restrictByNotNullOrUndefined();	  return    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  	93	None	replace
309	[BUG]  [BUGGY]  return  right.getFirstChild().restrictByNotNullOrUndefined();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getFirstChild().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getFirstChild().restrictByNotNullOrUndefined();	  return    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  	93	None	replace
310	[BUG]  [BUGGY]  return  rn.getFirstChild().restrictByNotNullOrUndefined();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.getFirstChild().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.getFirstChild().restrictByNotNullOrUndefined();	  return    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  	93	None	replace
311	[BUG]  [BUGGY]  return  rh.getFirstChild().restrictByNotNullOrUndefined();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getFirstChild().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getFirstChild().restrictByNotNullOrUndefined();	  return    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  	93	None	replace
312	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	84	None	replace
313	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  &&  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	84	None	replace
314	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  true;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	84	None	replace
315	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  true;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	84	None	replace
316	[BUG]  [BUGGY]  return  rhType  +  1L;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  +  1L;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  +  1L;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
317	[BUG]  [BUGGY]  return  rhType!=  null?  rhType  +  1  :  rhType;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  rhType  +  1  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  rhType  +  1  :  rhType;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
318	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  +  1  :  rhType;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  +  1  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  +  1  :  rhType;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
319	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  rhType  +  1  :  rhType;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  rhType  +  1  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  rhType  +  1  :  rhType;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
320	[BUG]  [BUGGY]  return  rhType  ==  null?  rhType  +  1  :  rhType;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  null?  rhType  +  1  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  null?  rhType  +  1  :  rhType;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
321	[BUG]  [BUGGY]  return  rhType!=  Token.NUMBER?  rhType  +  1  :  rhType;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NUMBER?  rhType  +  1  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NUMBER?  rhType  +  1  :  rhType;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
322	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(left,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(left,  n);	  return    rhType.restrictByNotNullOrUndefined(n);    	non-compiled	[CE]  	46	None	replace
323	[BUG]  [BUGGY]  return  left.getFirstChild().getLastChild().getNext().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getLastChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getLastChild().getNext().getNext();	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
324	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getNext(),  right.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getNext(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getNext(),  right.getLastChild());	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
325	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  lhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  lhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  lhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
326	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  lhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  lhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  lhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
327	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  n  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  n  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  n  :  Integer.toString(RawConstants.NUMBER_OF_RANGE);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
328	[BUG]  [BUGGY]  return  rhType!=  null?  null  :  rhType.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  null  :  rhType.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  null  :  rhType.getFirstChild();	  return    rhType.getFirstChild();    	non-compiled	[CE]  	33	None	replace
329	[BUG]  [BUGGY]  return  rhType!=  null?  false  :  rhType.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  false  :  rhType.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  false  :  rhType.getFirstChild();	  return    rhType.getFirstChild();    	non-compiled	[CE]  	33	None	replace
330	[BUG]  [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  not  a  statement	58	None	replace
331	[BUG]  [BUGGY]  rhType  >>  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  >>  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  >>  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  not  a  statement	58	None	replace
332	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getFirstChild().getNext();  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
333	[BUG]  [BUGGY]  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  not  a  statement	58	None	replace
334	[BUG]  [BUGGY]  return  left.getFirstChild().getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getParent();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	11	None	replace
335	[BUG]  [BUGGY]  return  left.getNext().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getNext().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	11	None	replace
336	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined()  +  1;	  return    rh.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	1	None	replace
337	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
338	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  newNode;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
339	[BUG]  [BUGGY]  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
340	[BUG]  [BUGGY]  return  n.cloneFold();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.cloneFold();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.cloneFold();	  return    rn.cloneTree();    	non-compiled	[CE]  	37	None	replace
341	[BUG]  [BUGGY]  return  left.replaceChild(left,  newNode,  rhType);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(left,  newNode,  rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(left,  newNode,  rhType);	  return    left.replaceChild(left,    newNode);    	non-compiled	[CE]  	62	None	replace
342	[BUG]  [BUGGY]  return  left.replaceChild(left,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(left,  right);	  return    left.replaceChild(left,    newNode);    	non-compiled	[CE]  	62	None	replace
343	[BUG]  [BUGGY]  return  n.cloneFoldNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.cloneFoldNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.cloneFoldNode();	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
344	[BUG]  [BUGGY]  return  n.cloneNode(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.cloneNode(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.cloneNode(left);	  return    n.cloneNode();    	non-compiled	[CE]  	38	None	replace
345	[BUG]  [BUGGY]  return  right!=  left.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right!=  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right!=  left.getLastChild();	  return    left!=    right.getLastChild();    	non-compiled	[CE]  	28	None	replace
346	[BUG]  [BUGGY]  return  rhType!=  null?  null  :  rhType.toString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  null  :  rhType.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  null  :  rhType.toString();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
347	[BUG]  [BUGGY]  return  rhType!=  null?  false  :  rhType.toString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  false  :  rhType.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  false  :  rhType.toString();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
348	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(right);	  return    n.restrictByNotNullOrUndefined(right);    	non-compiled	[CE]  	73	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  n));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  n));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  n));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.VAR));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.VAR));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.VAR));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.EXPR_RESULT));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.EXPR_RESULT));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.EXPR_RESULT));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT));    	non-compiled	[CE]  	69	None	replace
352	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	79	None	replace
353	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	79	None	replace
354	[BUG]  [BUGGY]  return  left.getFirstChild().getString();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getString();	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
355	[BUG]  [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  not  a  statement	59	None	replace
356	[BUG]  [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  not  a  statement	59	None	replace
357	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getLastChild().getString();  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getLastChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getLastChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
358	[BUG]  [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	84	None	replace
359	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	84	None	replace
360	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  true;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	84	None	replace
361	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(lhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	84	None	replace
362	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  &&  right.getLastChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
363	[BUG]  [BUGGY]  return  left.getLastChild().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().getNext()  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
364	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  <=  right.getFirstChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  <=  right.getFirstChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  <=  right.getFirstChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
365	[BUG]  [BUGGY]  Context.checkState(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  Context.checkState(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	Context.checkState(rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
366	[BUG]  [BUGGY]  parent  ==  null  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  parent  ==  null  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	parent  ==  null  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
367	[BUG]  [BUGGY]  parent  ==  null  ||  rhType!=  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  parent  ==  null  ||  rhType!=  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	parent  ==  null  ||  rhType!=  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	80	None	replace
368	[BUG]  [BUGGY]  if(rhType!=  null  ||  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  null  ||  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  null  ||  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
369	[BUG]  [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  null  ||  rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
370	[BUG]  [BUGGY]  return  rhType.getFirstChild().getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getFirstChild().getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getFirstChild().getLastChild();	  return    rhType.getFirstChild().getNext();    	non-compiled	[CE]  	95	None	replace
371	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  return  false;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
372	[BUG]  [BUGGY]  if(lhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(lhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(lhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
373	[BUG]  [BUGGY]  ||  rhType!=  Token.FUNCTION)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  ||  rhType!=  Token.FUNCTION)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	||  rhType!=  Token.FUNCTION)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
374	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  Integer.toString(RawConstants.NUMBER_OF_RANGE):  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  Integer.toString(RawConstants.NUMBER_OF_RANGE):  Integer.toString(RawConstants.NUMBER_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  Integer.toString(RawConstants.NUMBER_OF_RANGE):  Integer.toString(RawConstants.NUMBER_OF_RANGE);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
375	[BUG]  [BUGGY]  return  left.getNext().restrictByNotNullOrUndefined();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getNext().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getNext().restrictByNotNullOrUndefined();	  return    n.getFirstChild().restrictByNotNullOrUndefined();    	non-compiled	[CE]  	93	None	replace
376	[BUG]  [BUGGY]  return  left  ==  rhType?  rhType  :  Token.NULL;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left  ==  rhType?  rhType  :  Token.NULL;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left  ==  rhType?  rhType  :  Token.NULL;	  return    rhType    ==    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	90	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.STRING,  left),  new  NodeTraversal(rhType));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.STRING,  left),  new  NodeTraversal(rhType));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.STRING,  left),  new  NodeTraversal(rhType));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
378	[BUG]  [BUGGY]  return  left.getFirstChild().getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getFirstChild();	  return    left.getFirstChild().getLastChild();    	non-compiled	[CE]  	77	None	replace
379	[BUG]  [BUGGY]  return  rh.cloneTree(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.cloneTree(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.cloneTree(left);	  return    rh.cloneTree();    	non-compiled	[CE]  	2	None	replace
380	[BUG]  [BUGGY]  return  left!=  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left!=  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left!=  n.getFirstChild();	  return    rn!=    left.getFirstChild();    	non-compiled	[CE]  	98	None	replace
381	[BUG]  [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  not  a  statement	57	None	replace
382	[BUG]  [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  not  a  statement	57	None	replace
383	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
384	[BUG]  [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(n,  new  Node(Token.FUNCTION));	  return    right.removeFirstChild();    	non-compiled	[CE]  	41	None	replace
385	[BUG]  [BUGGY]  return  right.getfirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getfirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getfirstChild();	  return    left.getfirstChild();    	non-compiled	[CE]  	65	None	replace
386	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(rhType);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getNext()  &&  right.getLastChild().getString().equals(rhType);	  return    left.getNext();    	non-compiled	[CE]  	48	None	replace
387	[BUG]  [BUGGY]  return  left.getNext()  -  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getNext()  -  1;	  return    left.getNext();    	non-compiled	[CE]  	48	None	replace
388	[BUG]  [BUGGY]  return  rhType.booleanValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.booleanValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.booleanValue();	  return    rhType.intValue();    	non-compiled	[CE]  	24	None	replace
389	[BUG]  [BUGGY]  return  rn.replaceChild(left,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.replaceChild(left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.replaceChild(left,  newNode);	  return    left.replaceChild(n,    newNode);    	non-compiled	[CE]  	61	None	replace
390	[BUG]  [BUGGY]  return  n.getParent()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getParent()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getParent()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	52	None	replace
391	[BUG]  [BUGGY]  return  left!=  n.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left!=  n.getLastChild();	  return    rn!=    left.getLastChild();    	non-compiled	[CE]  	30	None	replace
392	[BUG]  [BUGGY]  return  left!=  rn.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left!=  rn.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left!=  rn.getLastChild();	  return    rn!=    left.getLastChild();    	non-compiled	[CE]  	30	None	replace
393	[BUG]  [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType  ==  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
394	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  null;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType  ==  Token.FALSE)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  	82	None	replace
395	[BUG]  [BUGGY]  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  null;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    null;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
396	[BUG]  [BUGGY]  return  left.getFirstChild().getParent().getNext().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getParent().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getParent().getNext().getNext();	  return    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	81	None	replace
397	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY)+  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY)+  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY)+  1;	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
398	[BUG]  [BUGGY]  return  left.getfirstChild().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getfirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getfirstChild().getNext();	  return    right.getLastChild().getNext();    	non-compiled	[CE]  	12	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	67	None	replace
401	[BUG]  [BUGGY]  return  result.restrictByNotNullOrUndefined();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  result.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  result.restrictByNotNullOrUndefined();	  return    rn.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	18	None	replace
402	[BUG]  [BUGGY]  return  left.removeFirstChild()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.removeFirstChild()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.removeFirstChild()  +  1;	  return    left.removeFirstChild();    	non-compiled	[CE]  	39	None	replace
403	[BUG]  [BUGGY]  return  left.removeFirstChild()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.removeFirstChild()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.removeFirstChild()  -  1;	  return    left.removeFirstChild();    	non-compiled	[CE]  	39	None	replace
404	[BUG]  [BUGGY]  return  left!=  right.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left!=  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left!=  right.getNext();	  return    left!=    right.getFirstChild();    	non-compiled	[CE]  	25	None	replace
405	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()!=  Token.FUNCTION;	  return    left.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	15	None	replace
406	[BUG]  [BUGGY]  return  left!=  null?  rhType  :  Token.NULL;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left!=  null?  rhType  :  Token.NULL;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left!=  null?  rhType  :  Token.NULL;	  return    rhType!=    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	86	None	replace
407	[BUG]  [BUGGY]  return  left.getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getParent();	  return    rh.getNext();    	non-compiled	[CE]  	49	None	replace
408	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(ln);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(ln);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(ln);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
409	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(rhType);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
410	[BUG]  [BUGGY]  return  left.getLastChild().getNext()  ||  right.getLastChild().getString().equals(rhType);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getLastChild().getNext()  ||  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getLastChild().getNext()  ||  right.getLastChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
411	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(n.getString());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  &&  right.getLastChild().getString().equals(n.getString());	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
412	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(left,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(left,  right);	  return    n.restrictByNotNullOrUndefined(rhType,    right);    	non-compiled	[CE]  	47	None	replace
413	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(n,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(n,  right);	  return    n.restrictByNotNullOrUndefined(rhType,    right);    	non-compiled	[CE]  	47	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  false));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  false));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  false));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  node));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  node));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  node));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
417	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined(rh);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined(rh);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined(rh);	  return    rh.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	76	None	replace
418	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  node;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  node;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  node;	  return    right;    	non-compiled	[CE]  	42	None	replace
419	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  left;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  left;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  left;	  return    right;    	non-compiled	[CE]  	42	None	replace
420	[BUG]  [BUGGY]  return  left.getType()!=  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  node;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getType()!=  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  node;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getType()!=  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  node;	  return    right;    	non-compiled	[CE]  	42	None	replace
421	[BUG]  [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getType()  ==  Token.FUNCTION?  new  Node(left,  right.getLastChild()):  null;	  return    right;    	non-compiled	[CE]  	42	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  this);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  rhType));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  rhType));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  rhType));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
424	[BUG]  [BUGGY]  return  right.getNext()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.getNext()  -  1;	  return    right.getNext();    	non-compiled	[CE]  	50	None	replace
425	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  return  true;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  return  true;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
426	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
427	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
428	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  true;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    true;    }    	non-compiled	[CE]  	55	None	replace
429	[BUG]  [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
430	[BUG]  [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(lhType!=  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
431	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(right,  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(right,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(right,  1);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
432	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(left,  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(left,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(left,  1);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
433	[BUG]  [BUGGY]  return  left,  rh.node;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left,  rh.node;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left,  rh.node;	  return    rh.node;    	non-compiled	[CE]  	3	None	replace
434	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType!=  Token.TRUE)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
435	[BUG]  [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
436	[BUG]  [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FUNCTION  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
437	[BUG]  [BUGGY]  return  left!=  rhType.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left!=  rhType.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left!=  rhType.getFirstChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
438	[BUG]  [BUGGY]  return  rhType  ==  left.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  left.getFirstChild();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
439	[BUG]  [BUGGY]  return  right.cloneTree()  &&  left.getLastChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.cloneTree()  &&  left.getLastChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.cloneTree()  &&  left.getLastChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ "));	  return    right.cloneTree();    	non-compiled	[CE]  	36	None	replace
440	[BUG]  [BUGGY]  return  right.cloneTree()  &&  left.getLastChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ ")));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.cloneTree()  &&  left.getLastChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ ")));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.cloneTree()  &&  left.getLastChild().getString().endsWith( "__ ")||  left.getLastChild().getString().endsWith( "__ ")));	  return    right.cloneTree();    	non-compiled	[CE]  	36	None	replace
441	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  Token.NULL);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined(rhType,  Token.NULL);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined(rhType,  Token.NULL);	  return    n.restrictByNotNullOrUndefined(rhType,    right);    	non-compiled	[CE]  	47	None	replace
442	[BUG]  [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
443	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
444	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  <=  right.getFirstChild().getType()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  <=  right.getFirstChild().getType()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  <=  right.getFirstChild().getType()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
445	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  ==  right.getFirstChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  ==  right.getFirstChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  ==  right.getFirstChild().getNext()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
446	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  ==  null  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  ==  null  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  ==  null  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
447	[BUG]  [BUGGY]  return  left.getFirstChild().getNext()  <=  right.getFirstChild().getType();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext()  <=  right.getFirstChild().getType();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext()  <=  right.getFirstChild().getType();	  return    left.getFirstChild().getNext()    &&    right.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	78	None	replace
448	[BUG]  [BUGGY]  return  rn.cloneTree(left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.cloneTree(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.cloneTree(left);	  return    rn.cloneTree();    	non-compiled	[CE]  	37	None	replace
449	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
450	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  left.getFirstChild().getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  &&  rhType!=  Token.NULL)  {  return  left.getFirstChild().getNext();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getFirstChild().getNext();    }    	non-compiled	[CE]  	58	None	replace
451	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild().getString();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild().getString();    }    	non-compiled	[CE]  	59	None	replace
452	[BUG]  [BUGGY]  return  rn.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.restrictByNotNullOrUndefined()  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    rn.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	18	None	replace
453	[BUG]  [BUGGY]  return  rhtype.cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhtype.cloneTree();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhtype.cloneTree();	  return    right.cloneTree();    	non-compiled	[CE]  	36	None	replace
454	[BUG]  [BUGGY]  return  right.cloneTree()  &&  rhType!=  Token.FALSE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.cloneTree()  &&  rhType!=  Token.FALSE;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.cloneTree()  &&  rhType!=  Token.FALSE;	  return    right.cloneTree();    	non-compiled	[CE]  	36	None	replace
455	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.BITWISE_OPERAND_OUT_OF_RANGE);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
456	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  n);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
457	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  0);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  0);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	87	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right)),  new  NodeTraversal(token));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right)),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  right)),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left),  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left),    new    NodeTraversal(token));    	non-compiled	[CE]  	70	None	replace
460	[BUG]  [BUGGY]  return  n.restrictByNotNullOrUndefined(rhType,  3);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.restrictByNotNullOrUndefined(rhType,  3);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.restrictByNotNullOrUndefined(rhType,  3);	  return    n.restrictByNotNullOrUndefined(rhType,    1);    	non-compiled	[CE]  	96	None	replace
461	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getValue()  &&  right.getLastChild().getString().equals(rhType);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().getValue()  &&  right.getLastChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().getValue()  &&  right.getLastChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
462	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().removeFirstChild().getString().equals(rhType);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.getFirstChild().getNext().removeFirstChild().getString().equals(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.getFirstChild().getNext().removeFirstChild().getString().equals(rhType);	  return    left.getFirstChild().getNext()    &&    right.getLastChild().getString().equals(rhType);    	non-compiled	[CE]  	13	None	replace
463	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  left  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  left  :  n;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  left  :  n;	  return    rhType!=    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	86	None	replace
464	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  right  :  rhType;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  right  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  right  :  rhType;	  return    rhType!=    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	86	None	replace
465	[BUG]  [BUGGY]  return  rhType  ==  null?  null  :  rhType.toString();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  null?  null  :  rhType.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  null?  null  :  rhType.toString();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
466	[BUG]  [BUGGY]  return  rhType.getName();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getName();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getName();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
467	[BUG]  [BUGGY]  return  rhType.toString()  + ": "  +  rhType.toString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.toString()  + ": "  +  rhType.toString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.toString()  + ": "  +  rhType.toString();	  return    rhType.toString();    	non-compiled	[CE]  	20	None	replace
468	[BUG]  [BUGGY]  return  left.replaceChild(n,  rhType);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.replaceChild(n,  rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.replaceChild(n,  rhType);	  return    right.removeFirstChild();    	non-compiled	[CE]  	41	None	replace
469	[BUG]  [BUGGY]  return  rhType  ==  left.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  left.getNext();	  return    rhType!=    left.getFirstChild();    	non-compiled	[CE]  	97	None	replace
470	[BUG]  [BUGGY]  return  rh.getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getParent();	  return    right.getNext();    	non-compiled	[CE]  	50	None	replace
471	[BUG]  [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FIELD  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
472	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  return  false;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType!=  Token.NULL)  {  return  false;  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	56	None	replace
473	[BUG]  [BUGGY]  return  right.restrictByNotNullOrUndefined()  &&  left.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  right.restrictByNotNullOrUndefined()  &&  left.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  right.restrictByNotNullOrUndefined()  &&  left.getFirstChild().getType()!=  Token.FUNCTION;	  return    right.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	16	None	replace
474	[BUG]  [BUGGY]  return  rhtype.restrictByNotNullOrUndefined();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhtype.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhtype.restrictByNotNullOrUndefined();	  return    right.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	16	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  right));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	71	None	replace
476	[BUG]  [BUGGY]  return  rn.restrictByNotNullOrUndefined(rhType);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rn.restrictByNotNullOrUndefined(rhType);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rn.restrictByNotNullOrUndefined(rhType);	  return    n.restrictByNotNullOrUndefined(right);    	non-compiled	[CE]  	73	None	replace
477	[BUG]  [BUGGY]  return  rhType.intValue()  *  2;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.intValue()  *  2;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.intValue()  *  2;	  return    rhType.intValue();    	non-compiled	[CE]  	24	None	replace
478	[BUG]  [BUGGY]  return  rhType!=  null?  false  :  rhType.restrictByNotNullOrUndefined();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  false  :  rhType.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  false  :  rhType.restrictByNotNullOrUndefined();	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
479	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getFirstChild().getString().endsWith( "__ "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getFirstChild().getString().endsWith( "__ "));	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
480	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
481	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "_ ")||  n.getFirstChild().getString().endsWith( "_ "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "_ ")||  n.getFirstChild().getString().endsWith( "_ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "_ ")||  n.getFirstChild().getString().endsWith( "_ "));	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
482	[BUG]  [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "_ ")||  n.getLastChild().getString().endsWith( "_ "));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "_ ")||  n.getLastChild().getString().endsWith( "_ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getString().endsWith( "_ ")||  n.getLastChild().getString().endsWith( "_ "));	  return    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	17	None	replace
483	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  newNode;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  newNode;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  return  newNode;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    newNode;    }    	non-compiled	[CE]  	83	None	replace
484	[BUG]  [BUGGY]  return  n.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getParent();	  return    rn.getNext();    	non-compiled	[CE]  	51	None	replace
485	[BUG]  [BUGGY]  return  newNode.replaceChild(left,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  newNode.replaceChild(left,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  newNode.replaceChild(left,  left);	  return    left.replaceChild(left,    newNode);    	non-compiled	[CE]  	62	None	replace
486	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined()  &&  n.getFirstChild().getType()  ==  Token.NAME;	  return    rh.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	1	None	replace
487	[BUG]  [BUGGY]  return  rhType!=  null?  rhType.cloneTree()  :  left;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  rhType.cloneTree()  :  left;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  rhType.cloneTree()  :  left;	  return    rhType.cloneTree();    	non-compiled	[CE]  	35	None	replace
488	[BUG]  [BUGGY]  return  rhType!=  null?  rhType.cloneTree()  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  rhType.cloneTree()  :  null;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  rhType.cloneTree()  :  null;	  return    rhType.cloneTree();    	non-compiled	[CE]  	35	None	replace
489	[BUG]  [BUGGY]  return  rhType.cloneTree()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.cloneTree()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.cloneTree()  +  1;	  return    rhType.cloneTree();    	non-compiled	[CE]  	35	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left));    	non-compiled	[CE]  	68	None	replace
491	[BUG]  [BUGGY]  return  rhType.getFirstChild().getNext().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getFirstChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getFirstChild().getNext().getNext();	  return    rhType.getFirstChild().getNext();    	non-compiled	[CE]  	95	None	replace
492	[BUG]  [BUGGY]  return  rhType.getFirstChild().getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.getFirstChild().getString();	  return    rhType.getFirstChild().getNext();    	non-compiled	[CE]  	95	None	replace
493	[BUG]  [BUGGY]  return  rh.getFirstChild().getNext()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getFirstChild().getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getFirstChild().getNext()  +  1;	  return    rh.getFirstChild().getNext();    	non-compiled	[CE]  	14	None	replace
494	[BUG]  [BUGGY]  return  rh.restrictByNotNullOrUndefined(rhType,  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.restrictByNotNullOrUndefined(rhType,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.restrictByNotNullOrUndefined(rhType,  1);	  return    rh.restrictByNotNullOrUndefined(rhType);    	non-compiled	[CE]  	76	None	replace
495	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getFirstChild().getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  	52	None	replace
496	[BUG]  [BUGGY]  return  newNode.restrictByNotNullOrUndefined();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  newNode.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  newNode.restrictByNotNullOrUndefined();	  return    n.restrictByNotNullOrUndefined()    +    1;    	non-compiled	[CE]  	19	None	replace
497	[BUG]  [BUGGY]  return  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
498	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  ||  rhType  ==  Token.FALSE)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
499	[BUG]  [BUGGY]  Throwable  rhType  =  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  Throwable  rhType  =  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	Throwable  rhType  =  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
500	[BUG]  [BUGGY]  return  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FALSE  &&  rhType  ==  Token.NULL;	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
501	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY  +  1);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
502	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  2);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  2);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
503	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  Integer.toString(RawConstants.NUMBER_ARRAY,  n);	  return    rhType!=    Token.NULL?    rhType    :    Integer.toString(RawConstants.NUMBER_ARRAY);    	non-compiled	[CE]  	92	None	replace
504	[BUG]  [BUGGY]  return  left.cloneTree()  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.cloneTree()  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.cloneTree()  &&  right.getString().endsWith( "__ ")||  right.getString().endsWith( "__ "));	  return    left.cloneTree();    	non-compiled	[CE]  	34	None	replace
505	[BUG]  [BUGGY]  return  rhType.toIntValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.toIntValue();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.toIntValue();	  return    rhType.intValue;    	non-compiled	[CE]  	22	None	replace
506	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  0);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  0);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
507	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  1);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
508	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  :  Integer.toString(RawConstants.NUMBER_OF_RANGE,  n);	  return    rhType!=    Token.FUNCTION?    rhType    :    Integer.toString(RawConstants.NUMBER_OF_RANGE);    	non-compiled	[CE]  	91	None	replace
509	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  right  :  rhType;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  right  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  right  :  rhType;	  return    rhType    ==    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	90	None	replace
510	[BUG]  [BUGGY]  return  rhType  ==  Token.NULL?  left  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.NULL?  left  :  n;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.NULL?  left  :  n;	  return    rhType    ==    Token.NULL?    left    :    rhType;    	non-compiled	[CE]  	90	None	replace
511	[BUG]  [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.NULL?  rhType  :  n;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.NULL?  rhType  :  n;	  return    rhType!=    Token.NULL?    rhType    :    null;    	non-compiled	[CE]  	89	None	replace
512	[BUG]  [BUGGY]  return  n.getFirstChild().getNext().getNext()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getFirstChild().getNext().getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getFirstChild().getNext().getNext()  +  1;	  return    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	81	None	replace
513	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.NUMBER;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.NUMBER;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION  ||  lhType  ==  Token.NUMBER;	  return    rhType    <=    Token.FUNCTION    ||    rhType    ==    Token.NUMBER;    	non-compiled	[CE]  	63	None	replace
514	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  +  1  :  rhType;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  +  1  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  +  1  :  rhType;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
515	[BUG]  [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  +  1  :  rhType;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  Token.FUNCTION?  rhType  +  1  :  rhType;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  Token.FUNCTION?  rhType  +  1  :  rhType;	  return    rhType    +    1;    	non-compiled	[CE]  	23	None	replace
516	[BUG]  [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.restrictByNotNullOrUndefined();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  left.restrictByNotNullOrUndefined()  &&  right.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  left.restrictByNotNullOrUndefined()  &&  right.restrictByNotNullOrUndefined();	  return    left.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	15	None	replace
517	[BUG]  [BUGGY]  return  n.getfirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  n.getfirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  n.getfirstChild();	  return    left.getfirstChild();    	non-compiled	[CE]  	65	None	replace
518	[BUG]  [BUGGY]  return  rh.getFirstChild().getNext().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getFirstChild().getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getFirstChild().getNext().getNext();	  return    left.getFirstChild().getNext().getNext();    	non-compiled	[CE]  	94	None	replace
519	[BUG]  [BUGGY]  return  rh.getType()  ==  Token.FUNCTION?  left  :  right;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.getType()  ==  Token.FUNCTION?  left  :  right;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.getType()  ==  Token.FUNCTION?  left  :  right;	  return    right;    	non-compiled	[CE]  	42	None	replace
520	[BUG]  [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType  ==  Token.FALSE)  {  return  false;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FIELD  ||  rhType  ==  Token.FALSE)  {  return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FIELD  ||  rhType  ==  Token.FALSE)  {  return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    false;    }    	non-compiled	[CE]  	79	None	replace
521	[BUG]  [BUGGY]  return  rh.cloneBoolean();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.cloneBoolean();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.cloneBoolean();	  return    rh.cloneTree();    	non-compiled	[CE]  	2	None	replace
522	[BUG]  [BUGGY]  return  rh.cloneTreeImpl();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rh.cloneTreeImpl();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rh.cloneTreeImpl();	  return    rh.cloneTree();    	non-compiled	[CE]  	2	None	replace
523	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  rh,  new  NodeTraversal(Token.TRANSIENT,  left,  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
524	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  n);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(Token.TRANSIENT,  left,  right),  n);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(Token.TRANSIENT,    left,    right));    	non-compiled	[CE]  	72	None	replace
525	[BUG]  [BUGGY]  return  rhType  ==  null?  false  :  rhType.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  null?  false  :  rhType.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  null?  false  :  rhType.getFirstChild();	  return    rhType.getFirstChild();    	non-compiled	[CE]  	33	None	replace
526	[BUG]  [BUGGY]  return  rhType!=  null?  rhType.getLastChild()  :  rhType.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  rhType.getLastChild()  :  rhType.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  rhType.getLastChild()  :  rhType.getLastChild();	  return    rhType.getFirstChild();    	non-compiled	[CE]  	33	None	replace
527	[BUG]  [BUGGY]  return  rhType!=  null?  rhType.getFirstChild()  :  left;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  null?  rhType.getFirstChild()  :  left;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  null?  rhType.getFirstChild()  :  left;	  return    rhType.getFirstChild();    	non-compiled	[CE]  	33	None	replace
528	[BUG]  [BUGGY]  return  rhType  ==  null?  null  :  rhType.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType  ==  null?  null  :  rhType.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType  ==  null?  null  :  rhType.getFirstChild();	  return    rhType.getFirstChild();    	non-compiled	[CE]  	33	None	replace
529	[BUG]  [BUGGY]  return  rhType.doubleValue()  *  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType.doubleValue()  *  2;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType.doubleValue()  *  2;	  return    rhType.doubleValue();    	non-compiled	[CE]  	21	None	replace
530	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)return  false;  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)return  false;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)return  false;  }	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  orphaned  case	85	None	replace
531	[BUG]  [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)return  false;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)return  false;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.FALSE  ||  rhType  ==  Token.FUNCTION)return  false;	  if(rhType!=    Token.FALSE    ||    rhType    ==    Token.FUNCTION)    {    return    false;    }    	non-compiled	[CE]  	85	None	replace
532	[BUG]  [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  null  ||  rhType!=  Token.TRUE  ||  rhType  ==  Token.FUNCTION  ||  rhType  ==  Token.NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(rhType!=    null    ||    rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
533	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
534	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
535	[BUG]  [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType  ==  Token.TRUE  ||  rhType!=  Token.FALSE  ||  rhType  ==  Token.NULL)  {  return  left.getFirstChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
536	[BUG]  [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getLastChild();  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	if(rhType!=  Token.TRUE  &&  rhType!=  Token.FALSE)  {  return  left.getLastChild();  }	  if(rhType!=    Token.TRUE    ||    rhType!=    Token.FALSE    ||    rhType    ==    Token.NULL)    {    return    left.getLastChild();    }    	non-compiled	[CE]  	57	None	replace
537	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.MIN_VALUE;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  Integer.MIN_VALUE;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  :  Integer.MIN_VALUE;	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
538	[BUG]  [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  NodeUtil.newNumber(right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (rhType  !=  Token.TRUE  &&  rhType  !=  Token.FALSE  &&  rhType  !=  Token.NULL)  {      [BUGGY]  return  rhType!=  Token.FUNCTION?  rhType  :  NodeUtil.newNumber(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	930	930	3	replace	return  rhType!=  Token.FUNCTION?  rhType  :  NodeUtil.newNumber(right);	  return    rhType!=    Token.FUNCTION?    rhType    :    null;    	non-compiled	[CE]  	88	None	replace
