bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  numValue  =  left.getNumberValue();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getNumberValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getNumberValue();	  double    numValue    =    left.getIntValue();    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  double  numValue  =  left.getLongValue();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getLongValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getLongValue();	  double    numValue    =    left.getIntValue();    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  double  numValue  =  left.getIntValue()  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getIntValue()  +  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getIntValue()  +  1;	  double    numValue    =    left.getIntValue();    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  double  numValue  =  left.getNullValue();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getNullValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getNullValue();	  double    numValue    =    left.getIntValue();    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  *  2;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDouble()  *  2;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDouble()  *  2;	  double    numValue    =    left.getDouble()    /    2;    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  /  2  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDouble()  /  2  +  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDouble()  /  2  +  1;	  double    numValue    =    left.getDouble()    /    2;    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  +  2;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDouble()  +  2;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDouble()  +  2;	  double    numValue    =    left.getDouble()    /    2;    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  /  1;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDouble()  /  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDouble()  /  1;	  double    numValue    =    left.getDouble()    /    2;    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  double  numValue  =  leftVal.getNumber();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  leftVal.getNumber();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  leftVal.getNumber();	  double    numValue    =    leftVal.getDouble();    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  double  numValue  =  leftVal.getDouble()  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  leftVal.getDouble()  +  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  leftVal.getDouble()  +  1;	  double    numValue    =    leftVal.getDouble();    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  double  numValue  =  leftVal.getDouble()  -  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  leftVal.getDouble()  -  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  leftVal.getDouble()  -  1;	  double    numValue    =    leftVal.getDouble();    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  double  numValue  =  leftVal.getDouble()  /  2;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  leftVal.getDouble()  /  2;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  leftVal.getDouble()  /  2;	  double    numValue    =    leftVal.getDouble();    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  double  numValue  =  leftVal.getInt();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  leftVal.getInt();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  leftVal.getInt();	  double    numValue    =    leftVal.getDouble();    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  Double  numValue  =  left.getDouble();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  Double  numValue  =  left.getDouble();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	Double  numValue  =  left.getDouble();	  double    numValue    =    left.getDouble()    +    1;    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  *  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDouble()  *  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDouble()  *  1;	  double    numValue    =    left.getDouble()    +    1;    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  double  numValue  =  left.getNumber()  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getNumber()  +  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getNumber()  +  1;	  double    numValue    =    left.getDouble()    +    1;    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  double  numValue  =  right.getDouble();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  right.getDouble();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  right.getDouble();	  double    numValue    =    left.getDouble()    +    1;    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  double  numValue  =  left.getUpperBound();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getUpperBound();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getUpperBound();	  double    numValue    =    left.getLong();    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  double  numValue  =  left.getInt();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getInt();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getInt();	  double    numValue    =    left.getLong();    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  double  numValue  =  left.getLong()  +  1;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getLong()  +  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getLong()  +  1;	  double    numValue    =    left.getLong();    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  double  numValue  =  left.getLowerBound()  +  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getLowerBound()  +  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getLowerBound()  +  1;	  double    numValue    =    left.getLowerBound();    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  double  numValue  =  left.getLowerBound()  -  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getLowerBound()  -  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getLowerBound()  -  1;	  double    numValue    =    left.getLowerBound();    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  double  numValue  =  left.getOwnerBound();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getOwnerBound();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getOwnerBound();	  double    numValue    =    left.getLowerBound();    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  int  numValue  =  left.getType();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.getType();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.getType();	      	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  Node  n  =  left.getNext();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	Node  n  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  int  numValue  =  left.getLastChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.getLastChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.getLastChild();	      	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  Node  numValue  =  left.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  Node  numValue  =  left.getFirstChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	Node  numValue  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  Node  numValue  =  left.getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  Node  numValue  =  left.getNext();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	Node  numValue  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  Node  leftVal  =  left.getNext();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  Node  leftVal  =  left.getNext();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	Node  leftVal  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  double  numValue  =  left.getNumber()  -  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getNumber()  -  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getNumber()  -  1;	  double    numValue    =    left.getDouble()    -    1;    	non-compiled	[CE]  	2	None	replace
32	[BUG]  [BUGGY]  double  numValue  =  left.getValue();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getValue();	  double    numValue    =    left.getNumber();    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  double  numValue  =  left.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getFirstChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getFirstChild();	  double    numValue    =    left.getLastChild();    	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  double  numValue  =  left.getLastChild()  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getLastChild()  +  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getLastChild()  +  1;	  double    numValue    =    left.getLastChild();    	non-compiled	[CE]  	5	None	replace
35	[BUG]  [BUGGY]  Double  numValue  =  left.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  Double  numValue  =  left.getFirstChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	Double  numValue  =  left.getFirstChild();	  double    numValue    =    left.getLastChild();    	non-compiled	[CE]  	5	None	replace
36	[BUG]  [BUGGY]  double  numValue  =  right.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  right.getFirstChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  right.getFirstChild();	  double    numValue    =    left.getLastChild();    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  double  numValue  =  right.getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  right.getLastChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  right.getLastChild();	  double    numValue    =    left.getLastChild();    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  double  numValue  =  left.removeFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.removeFirstChild();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.removeFirstChild();	  double    numValue    =    left.getLastChild();    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.FALSE  :  Token.TRUE;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.FALSE  :  Token.TRUE;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.toBoolean(true)?  Token.FALSE  :  Token.TRUE;	      	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.TRUE  :  Token.FALSE;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.TRUE  :  Token.FALSE;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.toBoolean(true)?  Token.TRUE  :  Token.FALSE;	      	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.toBoolean(true)?  Token.NUMBER  :  Token.FALSE;	      	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.FALSE  :  Token.NUMBER;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.FALSE  :  Token.NUMBER;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.toBoolean(true)?  Token.FALSE  :  Token.NUMBER;	      	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.toBoolean(true)?  Token.NUMBER  :  Token.TRUE;	      	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.FUNCTION  :  Token.FALSE;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.toBoolean(true)?  Token.FUNCTION  :  Token.FALSE;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.toBoolean(true)?  Token.FUNCTION  :  Token.FALSE;	      	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  double  numValue  =  left.getNum();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getNum();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getNum();	  double    numValue    =    left.getNumber();    	non-compiled	[CE]  	3	None	replace
46	[BUG]  [BUGGY]  double  numValue  =  left.getLong()  -  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getLong()  -  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getLong()  -  1;	  double    numValue    =    left.getDouble()    -    1;    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  >  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDouble()  >  1;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDouble()  >  1;	  double    numValue    =    left.getDouble()    -    1;    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  double  numValue  =  left.getNodeValue();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getNodeValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getNodeValue();	  double    numValue    =    left.getLowerBound();    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  double  numValue  =  left.getNumValue();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getNumValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getNumValue();	  double    numValue    =    left.getLowerBound();    	non-compiled	[CE]  	10	None	replace
50	[BUG]  [BUGGY]  double  numValue  =  left.getDoubleValue();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDoubleValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDoubleValue();	  double    numValue    =    left.getIntValue();    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  double  numValue  =  left.getDouble()  /  4;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getDouble()  /  4;  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getDouble()  /  4;	  double    numValue    =    left.getDouble()    /    2;    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  double  numValue  =  leftVal.getIntValue();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  leftVal.getIntValue();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  leftVal.getIntValue();	  double    numValue    =    leftVal.getDouble();    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  double  numValue  =  leftVal.toBoolean()?  MAX_FOLD_NUMBER  :  leftVal.getDouble();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  leftVal.toBoolean()?  MAX_FOLD_NUMBER  :  leftVal.getDouble();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  leftVal.toBoolean()?  MAX_FOLD_NUMBER  :  leftVal.getDouble();	  double    numValue    =    leftVal.getDouble();    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  double  numValue  =  left.getColumn();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.getColumn();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.getColumn();	  double    numValue    =    left.getNumber();    	non-compiled	[CE]  	3	None	replace
55	[BUG]  [BUGGY]  int  numValue  =  left.getLastChild().getString();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.getLastChild().getString();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.getLastChild().getString();	      	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  int  numValue  =  left.getFirstChild().getType();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  int  numValue  =  left.getFirstChild().getType();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	int  numValue  =  left.getFirstChild().getType();	      	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  double  numValue  =  left.cloneTree();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    TernaryValue  leftVal  =  NodeUtil.getPureBooleanValue(left);  if  (leftVal  ==  TernaryValue.UNKNOWN)  {  return  n;  }  switch  (n.getType())  {  case  Token.NOT:  if  (left.getType()  ==  Token.NUMBER)  {    [BUGGY]  double  numValue  =  left.cloneTree();  [BUGGY]    if  (numValue  ==  0  ||  numValue  ==  1)  {  return  n;  }  }  int  result  =  leftVal.toBoolean(true)  ?  Token.FALSE  :  Token.TRUE;  Node  replacementNode  =  new  Node(result);  parent.replaceChild(n,  replacementNode);  reportCodeChange();  return  replacementNode;  case  Token.POS:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldUnaryOperator  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  numValue  val  value  Node  left  n  negNumNode  notIntValNode  parent  replacementNode  TernaryValue  leftVal  int  intVal  result  UnsupportedOperationException  ex  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.6546536707079772	344	344	3	replace	double  numValue  =  left.cloneTree();	  double    numValue    =    left.getLastChild();    	non-compiled	[CE]  	5	None	replace
