bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  left,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(op,  left,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(op,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	31	None	replace
2	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  left);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  left);	  result    =    compareToUndefined(right,    left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	31	None	replace
3	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	31	None	replace
4	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedRight);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedRight);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  orphaned  case	51	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  leftLiteral);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(op,  leftLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(op,  leftLiteral);	  result    =    compareToUndefined(right,    leftLiteral);    	non-compiled	[CE]  orphaned  case	3	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  leftLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  leftLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  leftLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    leftLiteral);    	non-compiled	[CE]  orphaned  case	3	None	replace
7	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  leftLiteral);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(n,  leftLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(n,  leftLiteral);	  result    =    compareToUndefined(right,    leftLiteral);    	non-compiled	[CE]  orphaned  case	3	None	replace
8	[BUG]  [BUGGY]  result  =  compareToLocal(right,  n);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  n);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  n);	  result    =    compareToLocal(left,    n);    	non-compiled	[CE]  orphaned  case	46	None	replace
9	[BUG]  [BUGGY]  result  =  compareToLocal(rightLiteral,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(rightLiteral,  n);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(rightLiteral,  n);	  result    =    compareToLocal(left,    n);    	non-compiled	[CE]  orphaned  case	46	None	replace
10	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  comparisonToUndefined(right,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  comparisonToUndefined(right,  undefinedLeft);	  result    =    comparisonToUndefined(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	35	None	replace
11	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  op);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  comparatToUndefined(left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  comparatToUndefined(left,  op);	  result    =    comparisonToUndefined(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	35	None	replace
12	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  right.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
13	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  left.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  left.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
14	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  right.getString());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  right.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  right.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
15	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  left.getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  rightLiteral,  left.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
16	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  left.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
17	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  left.getString());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  op,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  op,  left.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
18	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral.getString());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
19	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft,  op);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft,  op);	  result    =    compareToUndefined(right,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	6	None	replace
20	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  leftLiteral);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  leftLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  leftLiteral);	  result    =    compareToUndefined(right,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	6	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  n);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  n);	  result    =    compareToUndefined(right,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	6	None	replace
22	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  left);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  left);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  left);	  result    =    compareToUndefined(left,    left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	40	None	replace
23	[BUG]  [BUGGY]  result  =  compareToLocal(right,  left);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  left);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  left);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
24	[BUG]  [BUGGY]  result  =  compareToLocal(left,  leftLiteral);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  leftLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  leftLiteral);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
25	[BUG]  [BUGGY]  result  =  compareToLocal(n,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(n,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(n,  right);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
26	[BUG]  [BUGGY]  result  =  compareToLocal(left,  newNode);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  newNode);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  newNode);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
27	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  right);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	28	None	replace
28	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToUndefined(rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(n,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	8	None	replace
29	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  op.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  op.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
30	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  right.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  right.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
31	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  op.cloneTree());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  op.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  op.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral.cloneTree());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  rightLiteral.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.cloneTree());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  left.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  left.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  right.cloneTree());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  right.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  right.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
35	[BUG]  [BUGGY]  result  =  compareToLocal(right,  undefinedLeft);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  undefinedLeft);	  result    =    compareToLocal(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
36	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  rightLiteral);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  undefinedLeft,  rightLiteral);	  result    =    compareToLocal(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
37	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  op);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  undefinedLeft,  op);	  result    =    compareToLocal(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
38	[BUG]  [BUGGY]  result  =  compareToLocal(rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(rightLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(rightLiteral,  undefinedLeft);	  result    =    compareToLocal(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
39	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  left.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  undefinedLeft,  left.getString());	  result    =    compareToLocal(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
40	[BUG]  [BUGGY]  result  =  compareToLocal(left,  rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  rightLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  rightLiteral,  undefinedLeft);	  result    =    compareToLocal(left,    op,    rightLiteral);    	non-compiled	[CE]  orphaned  case	49	None	replace
41	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right,  undefinedLeft);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  right,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  right,  undefinedLeft);	  result    =    compareToLocal(left,    op,    rightLiteral);    	non-compiled	[CE]  orphaned  case	49	None	replace
42	[BUG]  [BUGGY]  result  =  compareToLocal(left,  left,  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  left,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  left,  undefinedLeft);	  result    =    compareToLocal(left,    op,    rightLiteral);    	non-compiled	[CE]  orphaned  case	49	None	replace
43	[BUG]  [BUGGY]  result  =  compareToLocal(left,  left,  rightLiteral);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  left,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  left,  rightLiteral);	  result    =    compareToLocal(left,    op,    rightLiteral);    	non-compiled	[CE]  orphaned  case	49	None	replace
44	[BUG]  [BUGGY]  result  =  compareToLocal(left,  n,  rightLiteral);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  n,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  n,  rightLiteral);	  result    =    compareToLocal(left,    op,    rightLiteral);    	non-compiled	[CE]  orphaned  case	49	None	replace
45	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  right.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  right.getString());	  result    =    compareToLocal(left,    left.getString());    	non-compiled	[CE]  orphaned  case	50	None	replace
46	[BUG]  [BUGGY]  result  =  compareToLocal(right,  left.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  left.getString());	  result    =    compareToLocal(left,    left.getString());    	non-compiled	[CE]  orphaned  case	50	None	replace
47	[BUG]  [BUGGY]  result  =  compareToLocal(left,  left.getString(),  undefinedLeft);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  left.getString(),  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  left.getString(),  undefinedLeft);	  result    =    compareToLocal(left,    left.getString());    	non-compiled	[CE]  orphaned  case	50	None	replace
48	[BUG]  [BUGGY]  result  =  compareToLocal(left,  op.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  op.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  op.getString());	  result    =    compareToLocal(left,    left.getString());    	non-compiled	[CE]  orphaned  case	50	None	replace
49	[BUG]  [BUGGY]  result  =  compareToLocal(left,  rightLiteral.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  rightLiteral.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  rightLiteral.getString());	  result    =    compareToLocal(left,    left.getString());    	non-compiled	[CE]  orphaned  case	50	None	replace
50	[BUG]  [BUGGY]  result  =  compareToLocal(right,  right.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  right.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  right.getString());	  result    =    compareToLocal(left,    left.getString());    	non-compiled	[CE]  orphaned  case	50	None	replace
51	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToUndefined(right,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToUndefined(right,  undefinedLeft);	  Result    result    =    compareToUndefined(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	34	None	replace
52	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToUndefined(left,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToUndefined(left,  undefinedLeft);	  Result    result    =    compareToUndefined(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	34	None	replace
53	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  case	43	None	replace
54	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  op.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  op.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  case	43	None	replace
55	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  undefinedLeft);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  left.getString(),  undefinedLeft);	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  case	43	None	replace
56	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.getString());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  left.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  case	43	None	replace
57	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral.getString());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  rightLiteral.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  case	43	None	replace
58	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  case	43	None	replace
59	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  rightLiteral);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToUndefined(left,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToUndefined(left,  rightLiteral);	  Result    result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	24	None	replace
60	[BUG]  [BUGGY]  Result  result  =  compareToLocal(left,  op);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToLocal(left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToLocal(left,  op);	  result    =    compareToLocal(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	12	None	replace
61	[BUG]  [BUGGY]  result  =  comparisonToLocal(left,  op);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  comparisonToLocal(left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  comparisonToLocal(left,  op);	  result    =    compareToLocal(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	12	None	replace
62	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(op,  rightLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(op,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	30	None	replace
63	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(n,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	30	None	replace
64	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(right,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	32	None	replace
65	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  rightLiteral);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  op,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  op,  rightLiteral);	  result    =    compareToUndefined(right,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	32	None	replace
66	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft,  rightLiteral);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(op,  undefinedLeft,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(op,  undefinedLeft,  rightLiteral);	  result    =    compareToUndefined(right,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	32	None	replace
67	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(op,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(op,  right);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
68	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(n,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(n,  right);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
69	[BUG]  [BUGGY]  result  =  compareToUndefined(undefinedLeft,  rightLiteral);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(undefinedLeft,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(undefinedLeft,  rightLiteral);	  result    =    compareToUndefined(rightLiteral,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	5	None	replace
70	[BUG]  [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(lh,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(lh,  undefinedLeft);	  result    =    compareToUndefined(rightLiteral,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	5	None	replace
71	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  op);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  rightLiteral,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	19	None	replace
72	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  op);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  left,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	19	None	replace
73	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  leftLiteral);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  leftLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  leftLiteral);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	19	None	replace
74	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(right,  op);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(right,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(right,  op);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
75	[BUG]  [BUGGY]  result  =  compareToLowerBoolean(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLowerBoolean(left,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLowerBoolean(left,  undefinedLeft);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
76	[BUG]  [BUGGY]  result  =  compareToLowerBoolean(right,  op);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLowerBoolean(right,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLowerBoolean(right,  op);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
77	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(rightLiteral,  op);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(rightLiteral,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(rightLiteral,  op);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
78	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  rightLiteral);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  rightLiteral);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
79	[BUG]  [BUGGY]  result  =  compareToLowerBoolean(rightLiteral,  op);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLowerBoolean(rightLiteral,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLowerBoolean(rightLiteral,  op);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
80	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  n,  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  n,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  n,  undefinedLeft);	  result    =    compareToUndefined(right,    n,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	33	None	replace
81	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  n,  undefinedLeft);	  result    =    compareToUndefined(right,    n,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	33	None	replace
82	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  n,  undefinedLeft);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(op,  n,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(op,  n,  undefinedLeft);	  result    =    compareToUndefined(right,    n,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	33	None	replace
83	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft,  right);	  result    =    compareToUndefined(right,    undefinedLeft,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
84	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(right,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(right,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(right,  undefinedLeft);	  result    =    compareToUpperBoolean(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	13	None	replace
85	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft,  rightLiteral);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  undefinedLeft,  rightLiteral);	  result    =    compareToUpperBoolean(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	13	None	replace
86	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(rightLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(rightLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(rightLiteral,  undefinedLeft);	  result    =    compareToUpperBoolean(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	13	None	replace
87	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft,  op);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  undefinedLeft,  op);	  result    =    compareToUpperBoolean(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	13	None	replace
88	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft,  left.getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  undefinedLeft,  left.getString());	  result    =    compareToUpperBoolean(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	13	None	replace
89	[BUG]  [BUGGY]  result  =  compareToLocal(right,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  right);	  result    =    compareToLocal(left,    left);    	non-compiled	[CE]  orphaned  case	44	None	replace
90	[BUG]  [BUGGY]  result  =  compareToLocal(rightLiteral,  left);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(rightLiteral,  left);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(rightLiteral,  left);	  result    =    compareToLocal(left,    left);    	non-compiled	[CE]  orphaned  case	44	None	replace
91	[BUG]  [BUGGY]  result  =  compareToLocal(right,  rightLiteral);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  rightLiteral);	  result    =    compareToLocal(left,    rightLiteral);    	non-compiled	[CE]  orphaned  case	11	None	replace
92	[BUG]  [BUGGY]  result  =  compareToLocal(right,  leftLiteral);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  leftLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  leftLiteral);	  result    =    compareToLocal(left,    rightLiteral);    	non-compiled	[CE]  orphaned  case	11	None	replace
93	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
94	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
95	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeftLiteral  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeftLiteral  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeftLiteral  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
96	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  op  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  op  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
97	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  rightLiteral  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
98	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft  -  2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft  -  2);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeft  -  2);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
99	[BUG]  [BUGGY]  result  =  compareToLocal(n,  op);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(n,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(n,  op);	  result    =    compareToLocal(right,    op);    	non-compiled	[CE]  orphaned  case	10	None	replace
100	[BUG]  [BUGGY]  result  =  compareToLocal(right,  op,  undefinedLeft);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  op,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  op,  undefinedLeft);	  result    =    compareToLocal(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	45	None	replace
101	[BUG]  [BUGGY]  result  =  compareToLocal(right,  left,  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(right,  left,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(right,  left,  undefinedLeft);	  result    =    compareToLocal(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	45	None	replace
102	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  left);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  undefinedLeft,  left);	  result    =    compareToLocal(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	45	None	replace
103	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  rightLiteral);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  op,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  op,  rightLiteral);	  result    =    compareToUndefined(left,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	18	None	replace
104	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral,  undefinedRight);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral,  undefinedRight);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	18	None	replace
105	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  comparisonToUndefined(left,  undefinedLeft);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	25	None	replace
106	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  leftLiteral,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  leftLiteral,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  leftLiteral,  undefinedLeft);	  result    =    compareToUndefined(left,    leftLiteral);    	non-compiled	[CE]  orphaned  case	37	None	replace
107	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  op);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  left,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	19	None	replace
108	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	28	None	replace
109	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToUndefined(right,  left);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToUndefined(right,  left);	  Result    result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  orphaned  case	47	None	replace
110	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToUndefined(left,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToUndefined(left,  right);	  Result    result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  orphaned  case	47	None	replace
111	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  comparisonToUndefined(left,  rightLiteral);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  orphaned  case	25	None	replace
112	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  left,  undefinedLeft.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
113	[BUG]  [BUGGY]  result  =  compareToLocal(left,  left.getString(),  rightLiteral);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  left.getString(),  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  left.getString(),  rightLiteral);	  result    =    compareToLocal(left,    left.getString());    	non-compiled	[CE]  orphaned  case	50	None	replace
114	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  comparisonToUndefined(left,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  comparisonToUndefined(left,  right);	  result    =    compareToUndefined(right,    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
115	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  left.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  op,  left.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  op,  left.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
116	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  right.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  right.cloneTree());	  result    =    compareToUndefined(right,    op.cloneTree());    	non-compiled	[CE]  orphaned  case	52	None	replace
117	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedRight);	  result    =    compareToUndefined(rightLiteral,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	5	None	replace
118	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  right);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
119	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedLeft  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  undefinedLeft  -  1);	  result    =    compareToUpperBoolean(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	13	None	replace
120	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedRight);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  undefinedRight);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  undefinedRight);	  result    =    compareToUpperBoolean(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	13	None	replace
121	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  left,  rightLiteral);	  result    =    compareToUndefined(right,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	32	None	replace
122	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  op);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  rightLiteral,  op);	  result    =    compareToUndefined(right,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	6	None	replace
123	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right,  undefinedLeft);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  right,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  right,  undefinedLeft);	  result    =    compareToUndefined(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	27	None	replace
124	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right,  op);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  right,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  right,  op);	  result    =    compareToLocal(left,    op,    rightLiteral);    	non-compiled	[CE]  orphaned  case	49	None	replace
125	[BUG]  [BUGGY]  result  =  compareToLocal(left,  n,  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  n,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  n,  undefinedLeft);	  result    =    compareToLocal(left,    n);    	non-compiled	[CE]  orphaned  case	46	None	replace
126	[BUG]  [BUGGY]  Result  =  compareToUndefined(left,  rightLiteral);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  =  compareToUndefined(left,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  =  compareToUndefined(left,  rightLiteral);	  result    =    compareToUndefined(op,    rightLiteral);    	non-compiled	[CE]  orphaned  case	21	None	replace
127	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  undefinedLeft  -  1);	  result    =    compareToLocal(left,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	9	None	replace
128	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  undefinedLeft);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedRight,  undefinedLeft);	  result    =    compareToUndefined(right,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	30	None	replace
129	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  op,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  op,  right);	  result    =    compareToUndefined(right,    undefinedLeft,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
130	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getString()  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  left.getString()  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  left.getString()  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
131	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  left  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  left  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
132	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  left.getString());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedRight,  left.getString());	  result    =    compareToUndefined(left,    undefinedLeft,    left.getString());    	non-compiled	[CE]  orphaned  case	20	None	replace
133	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  undefinedRight);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft,  undefinedRight);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	18	None	replace
134	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  rightLiteral);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedRight,  rightLiteral);	  result    =    compareToUndefined(left,    undefinedLeft,    rightLiteral);    	non-compiled	[CE]  orphaned  case	18	None	replace
135	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  undefinedRight,  op);	  result    =    compareToUndefined(left,    undefinedLeft,    op);    	non-compiled	[CE]  orphaned  case	19	None	replace
136	[BUG]  [BUGGY]  result  =  compareToUpperBoolean(left,  op,  undefinedLeft);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUpperBoolean(left,  op,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUpperBoolean(left,  op,  undefinedLeft);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
137	[BUG]  [BUGGY]  result  =  compareToLowerBoolean(left,  op);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLowerBoolean(left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLowerBoolean(left,  op);	  result    =    compareToUpperBoolean(left,    op);    	non-compiled	[CE]  orphaned  case	14	None	replace
138	[BUG]  [BUGGY]  result  =  compareToUndefined(op,  n);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(op,  n);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(op,  n);	  result    =    compareToUndefined(rightLiteral,    n);    	non-compiled	[CE]  orphaned  case	36	None	replace
139	[BUG]  [BUGGY]  Result  =  compareToLocal(left,  op);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  =  compareToLocal(left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  =  compareToLocal(left,  op);	  result    =    compareToLocal(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	12	None	replace
140	[BUG]  [BUGGY]  result  =  comparatToLocal(left,  op);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  comparatToLocal(left,  op);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  comparatToLocal(left,  op);	  result    =    compareToLocal(rightLiteral,    op);    	non-compiled	[CE]  orphaned  case	12	None	replace
141	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  undefinedLeft,  right);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  undefinedLeft,  right);	  result    =    compareToLocal(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	45	None	replace
142	[BUG]  [BUGGY]  result  =  compareToLocal(left,  undefinedRight,  undefinedLeft);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  undefinedRight,  undefinedLeft);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  undefinedRight,  undefinedLeft);	  result    =    compareToLocal(left,    op,    undefinedLeft);    	non-compiled	[CE]  orphaned  case	45	None	replace
143	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  rightLiteral);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(left,  left.getString(),  rightLiteral);	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  orphaned  case	43	None	replace
144	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(right,  rightLiteral);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  Result  result  =  compareToUndefined(right,  rightLiteral);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	Result  result  =  compareToUndefined(right,  rightLiteral);	  Result    result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  orphaned  case	47	None	replace
145	[BUG]  [BUGGY]  result  =  compareToLocal(left,  op.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToLocal(left,  op.cloneTree());  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToLocal(left,  op.cloneTree());	  result    =    compareToLocal(left,    rightLiteral);    	non-compiled	[CE]  orphaned  case	11	None	replace
146	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }  if  (rightLiteral)  {  boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight  -  1);  [BUGGY]      break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  String  ln  =  left.getString();  String  rn  =  right.getString();  if  (!ln.equals(rn))  {  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5163977794943222	1033	1033	3	replace	result  =  compareToUndefined(right,  undefinedRight  -  1);	  result    =    compareToUndefined(right,    undefinedLeft    -    1);    	non-compiled	[CE]  orphaned  case	38	None	replace
