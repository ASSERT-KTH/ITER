bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(result  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
2	[BUG]  [BUGGY]  if(result  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
3	[BUG]  [BUGGY]  if(result  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  if(result  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  if(result  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  left.getType()!=  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getType()!=  Token.NAME)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
6	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||  left.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.getString().equals( "undefined   "))  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
7	[BUG]  [BUGGY]  if(left!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left!=  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null)  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  if(result!=  null  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  ||  left.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  left.getString().equals( "undefined   "))  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
9	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined   "))  {	  if(right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  if(right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
11	[BUG]  [BUGGY]  if(left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined   "))  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined   "))  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
14	[BUG]  [BUGGY]  if(n!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(n!=  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null)  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
15	[BUG]  [BUGGY]  if(right!=  null  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right!=  null  ||  left.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  left.getString().equals( "undefined   "))  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
16	[BUG]  [BUGGY]  if(n  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(n  ==  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n  ==  null)  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
17	[BUG]  [BUGGY]  if(right!=  null  ||  right.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right!=  null  ||  right.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  right.getString().equals( "undefined   "))  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
18	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  ';'  expected	5	None	replace
19	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined "));	      	non-compiled	[CE]  ';'  expected	5	None	replace
20	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  ';'  expected	5	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  result  =  compareToUndefined(right,  op);  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(right,  op);	      	non-compiled	[CE]  ';'  expected	5	None	replace
22	[BUG]  [BUGGY]  boolean  undefinedLeft  =  (left.getString().equals( "undefined   "));  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  boolean  undefinedLeft  =  (left.getString().equals( "undefined   "));  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedLeft  =  (left.getString().equals( "undefined   "));	      	non-compiled	[CE]  ';'  expected	5	None	replace
23	[BUG]  [BUGGY]  if(right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
24	[BUG]  [BUGGY]  if(n.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(n.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
25	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
27	[BUG]  [BUGGY]  if(right.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||  right.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  right.getString().equals( "undefined   "))  {	  if(result    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
29	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
30	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
31	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals( "undefined ")||  result.equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  result.equals( "undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
32	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
33	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
34	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  right.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  if(result  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  right.getString().equals( "undefined "))  {	  if(result)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
36	[BUG]  [BUGGY]  if(result.booleanValue())  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.booleanValue())  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.booleanValue())  {	  if(result)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
37	[BUG]  [BUGGY]  if(right  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right  ==  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null)  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
38	[BUG]  [BUGGY]  if(left  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left  ==  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null)  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
39	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  left.getString().equals( "undefined "))  {	  if(right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
40	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
41	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getType()!=  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME)  {	  if(right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
42	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {	  if(right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
43	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  result  =  compareToUndefined(left,  op);  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  op);	      	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  left  =  left.getNext();  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  left.getNext();	      	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")||  leftLiteral  ==  null;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")||  leftLiteral  ==  null;  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  leftLiteral  =  left.getString().equals( "undefined ")||  leftLiteral  ==  null;	      	non-compiled	[CE]  ';'  expected	5	None	replace
46	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  result  =  compareToUndefined(left,  op);  break;  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  op);  break;	      	non-compiled	[CE]  ';'  expected	5	None	replace
47	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  left.getFirstChild();	      	non-compiled	[CE]  ';'  expected	5	None	replace
48	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
49	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  result.equals( "right "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals( "undefined ")||  result.equals( "right "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  result.equals( "right "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
50	[BUG]  [BUGGY]  if(result  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getType()  ==  Token.VAR)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
51	[BUG]  [BUGGY]  if(result  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
52	[BUG]  [BUGGY]  if(result  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  right.getType()  ==  Token.NAME)  {	  if(result)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
53	[BUG]  [BUGGY]  if(result  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ||  left.getString()!=  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getString()!=  null)  {	  if(result)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
54	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||  left.getString()!=  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.getString()!=  null)  {	  if(result    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
56	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
58	[BUG]  [BUGGY]  if(left!=  null  ||  right!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left!=  null  ||  right!=  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  right!=  null)  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
59	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
60	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
61	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
62	[BUG]  [BUGGY]  if(right!=  null  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right!=  null  &&  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  left.getString().equals( "undefined "))  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
63	[BUG]  [BUGGY]  if(right!=  null  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right!=  null  &&  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  right.getString().equals( "undefined "))  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
64	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(right!=    null)    {    	non-compiled	[CE]  ';'  expected	7	None	replace
65	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||!result.isEmpty())  {	  if(result    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
66	[BUG]  [BUGGY]  if(result  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME)  {	  if(result)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
67	[BUG]  [BUGGY]  if(result!=  Token.NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  Token.NAME)  {	  if(result)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
68	[BUG]  [BUGGY]  if(result  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  >  0)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  >  0)  {	  if(result)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
69	[BUG]  [BUGGY]  boolean  undefinedRight  =(left.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  boolean  undefinedRight  =(left.getString().equals( "undefined "));  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedRight  =(left.getString().equals( "undefined "));	      	non-compiled	[CE]  ';'  expected	5	None	replace
70	[BUG]  [BUGGY]  boolean  undefinedRight  =  left.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  boolean  undefinedRight  =  left.getString().equals( "undefined "));  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedRight  =  left.getString().equals( "undefined "));	      	non-compiled	[CE]  ';'  expected	5	None	replace
71	[BUG]  [BUGGY]  if(result!=  null  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  &&  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  left.getString().equals( "undefined "))  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
72	[BUG]  [BUGGY]  if(result!=  null  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  &&  right.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  right.getString().equals( "undefined "))  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
73	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty())  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  &&!result.isEmpty())  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&!result.isEmpty())  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
74	[BUG]  [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
75	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||  rightLiteral)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
76	[BUG]  [BUGGY]  if(result!=  null  &&  rightLiteral)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  &&  rightLiteral)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
77	[BUG]  [BUGGY]  if(result!=  null  ||  rightLiteral)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  ||  rightLiteral)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
78	[BUG]  [BUGGY]  if(result!=  rightLiteral)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  rightLiteral)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
79	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  rightLiteral)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals( "undefined ")||  rightLiteral)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
80	[BUG]  [BUGGY]  if(result  >=  null  ||  rightLiteral)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  >=  null  ||  rightLiteral)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  >=  null  ||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
81	[BUG]  [BUGGY]  if(result.equals(right)||  rightLiteral)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals(right)||  rightLiteral)  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(right)||  rightLiteral)  {	  if(result    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  result.equals( "Undefined "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result.equals( "undefined ")||  result.equals( "Undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  result.equals( "Undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
83	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result  ==  null  ||  result.equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  result.equals( "undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
84	[BUG]  [BUGGY]  if(result!=  null  &&  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(result!=  null  &&  result.equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  result.equals( "undefined "))  {	  if(result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
85	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }    [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]    boolean  undefinedLeft  =  (left.getString().equals(   "undefined   "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
