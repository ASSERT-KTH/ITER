bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(left!=  null  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&  right.getString().equals( "undefined "))  {	  if(right!=    null    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	63	None	replace
2	[BUG]  [BUGGY]  if(n!=  null  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  null  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null  &&  right.getString().equals( "undefined "))  {	  if(right!=    null    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	63	None	replace
3	[BUG]  [BUGGY]  if(left!=  null  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&  left.getString().equals( "undefined "))  {	  if(right!=    null    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	63	None	replace
4	[BUG]  [BUGGY]  if(n!=  null  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  null  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null  &&  left.getString().equals( "undefined "))  {	  if(right!=    null    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	63	None	replace
5	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  right.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
6	[BUG]  [BUGGY]  if(n.getString().equals( "undefined   ")||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getString().equals( "undefined   ")||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getString().equals( "undefined   ")||  left.getString().equals( "undefined   "))  {	  if(right.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
7	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  right.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
8	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
9	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
10	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
11	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
12	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()!=  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
13	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  left.getString().equals( "undefined   "))  {	  if(left    ==    null)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
14	[BUG]  [BUGGY]  if(left!=  null  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  left.getString().equals( "undefined   "))  {	  if(left    ==    null)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
15	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")&&  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")&&  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")&&  left.getString().equals( "undefined   "))  {	  if(left.getString().equals(   "undefined   ")||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	85	None	replace
16	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n  ==  null  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n  ==  null  ||  left.getString().equals( "undefined   "))  {	  if(n    ==    null)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
17	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  right.getNext();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  right.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	44	None	replace
18	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  n.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	44	None	replace
19	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  left.getLastChild();	  Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	44	None	replace
20	[BUG]  [BUGGY]  Node  left  =  left.removeFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  left.removeFirstChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  left.removeFirstChild();	  Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	44	None	replace
21	[BUG]  [BUGGY]  Node  left  =  left.getNext()  -  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  left.getNext()  -  1;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  left.getNext()  -  1;	  Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	44	None	replace
22	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(right!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
23	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(right!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
24	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(right!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
25	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(right!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
26	[BUG]  [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(right!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
27	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  result.equals( "undefined "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
28	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()!=  Token.NAME)  {	  if(left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
29	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  ||  left.getString().equals( "undefined   "))  {	  if(left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
30	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	25	None	replace
31	[BUG]  [BUGGY]  if(left.getString()!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString()!=  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
32	[BUG]  [BUGGY]  if(result  ||  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  right.getString()!=  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
33	[BUG]  [BUGGY]  if(result  ||  left.getString()  ==  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  left.getString()  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getString()  ==  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
34	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result!=  null  &&  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result!=  null  &&  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  result!=  null  &&  left.getString()!=  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
35	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  left.getString().equals( "undefined   "))  {	  if(right    ==    null)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
36	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  right.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  right.getString().equals( "undefined   "))  {	  if(right    ==    null)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
37	[BUG]  [BUGGY]  if(result!=  null  ||!result.isEmpty())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||!result.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||!result.isEmpty())  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
38	[BUG]  [BUGGY]  if(result  ==  null  &&!result.isEmpty())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&!result.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  &&!result.isEmpty())  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
39	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME  &&  result!=  null  &&  result.isEmpty())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME  &&  result!=  null  &&  result.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME  &&  result!=  null  &&  result.isEmpty())  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
40	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty()  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&!result.isEmpty()  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&!result.isEmpty()  ||  left.getString().equals( "undefined "))  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
41	[BUG]  [BUGGY]  if(n!=  null  &&!result.isEmpty())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  null  &&!result.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null  &&!result.isEmpty())  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
42	[BUG]  [BUGGY]  if(result.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  if(result    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	1	None	replace
43	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
44	[BUG]  [BUGGY]  if(result  ==  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  &&  left.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
45	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  rightLiteral)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  rightLiteral)  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
46	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  rightLiteral)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")||  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  rightLiteral)  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
47	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  undefinedRight)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  undefinedRight)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  undefinedRight)  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
48	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  left.getString().equals( "right "))  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  left.getString().equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  left.getString().equals( "right "))  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
49	[BUG]  [BUGGY]  if(right!=  null  ||  result  ==  null)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  result  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  result  ==  null)  {	  if(result    >=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
50	[BUG]  [BUGGY]  if(left!=  null  ||  rightLiteral)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  rightLiteral)  {	  if(result    >=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
51	[BUG]  [BUGGY]  if(rightLiteral!=  null  ||  result!=  null)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rightLiteral!=  null  ||  result!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(rightLiteral!=  null  ||  result!=  null)  {	  if(result    >=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
52	[BUG]  [BUGGY]  if(right!=  null  ||  result!=  null)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  result!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  result!=  null)  {	  if(result    >=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
53	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  leftLiteral  ==  null;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  leftLiteral  ==  null;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  leftLiteral  ==  null;	  boolean    leftLiteral    =    left.getString().equals(   "undefined   ")||    leftLiteral    ==    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
54	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")||  leftLiteral!=  null;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")||  leftLiteral!=  null;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  leftLiteral  =  left.getString().equals( "undefined ")||  leftLiteral!=  null;	  boolean    leftLiteral    =    left.getString().equals(   "undefined   ")||    leftLiteral    ==    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
55	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")||  rightLiteral  ==  null;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")||  rightLiteral  ==  null;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  leftLiteral  =  left.getString().equals( "undefined ")||  rightLiteral  ==  null;	  boolean    leftLiteral    =    left.getString().equals(   "undefined   ")||    leftLiteral    ==    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
56	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  leftLiteral!=  null;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  leftLiteral!=  null;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  leftLiteral!=  null;	  boolean    leftLiteral    =    left.getString().equals(   "undefined   ")||    leftLiteral    ==    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
57	[BUG]  [BUGGY]  boolean  leftLiteral  =  right.getString().equals( "undefined   ")||  leftLiteral  ==  null;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  leftLiteral  =  right.getString().equals( "undefined   ")||  leftLiteral  ==  null;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  leftLiteral  =  right.getString().equals( "undefined   ")||  leftLiteral  ==  null;	  boolean    leftLiteral    =    left.getString().equals(   "undefined   ")||    leftLiteral    ==    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
58	[BUG]  [BUGGY]  if(result  ||  leftLiteral  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  leftLiteral  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  leftLiteral  ||  right.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
59	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  result  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
60	[BUG]  [BUGGY]  if(result  ||  rightLiteral  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  rightLiteral  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  rightLiteral  ||  left.getType()!=  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
61	[BUG]  [BUGGY]  if(result  ||  leftLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  leftLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  leftLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
62	[BUG]  [BUGGY]  if(rightLiteral  ||  result.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rightLiteral  ||  result.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(rightLiteral  ||  result.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
63	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  right.getFirstChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	47	None	replace
64	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  n.getFirstChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	47	None	replace
65	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  right.getLastChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	47	None	replace
66	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  n.getLastChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	47	None	replace
67	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  &&  left.getString().equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	30	None	replace
68	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  right.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   ")&&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
69	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  result.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  result.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  ||  result.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
70	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()!=  Token.NAME  ||  left.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
71	[BUG]  [BUGGY]  if(result  ||  right.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  right.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  right.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
72	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  result.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
73	[BUG]  [BUGGY]  if(result  ==  rightLiteral)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  rightLiteral)  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
74	[BUG]  [BUGGY]  if(result  ==  left.getString())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  left.getString())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  left.getString())  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
75	[BUG]  [BUGGY]  if(result!=  left.getString())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  left.getString())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  left.getString())  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
76	[BUG]  [BUGGY]  if(result  ==  right)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  right)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  right)  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
77	[BUG]  [BUGGY]  if(result  ==  right.getString())  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  right.getString())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  right.getString())  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
78	[BUG]  [BUGGY]  if(result  ==  left)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  left)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  left)  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
79	[BUG]  [BUGGY]  if(result.booleanValue()  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.booleanValue()  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.booleanValue()  ||  left.getString().equals( "undefined   "))  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
80	[BUG]  [BUGGY]  if(!result.booleanValue())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(!result.booleanValue())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(!result.booleanValue())  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
81	[BUG]  [BUGGY]  if(result.booleanValue()  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.booleanValue()  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.booleanValue()  &&  left.getString().equals( "undefined "))  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
82	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  result.equals( "right "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  result.equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  result.equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
83	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "right "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  left.getString().equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
84	[BUG]  [BUGGY]  if(right.getString().equals( "undefined ")||  right.getString().equals( "right "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getString().equals( "undefined ")||  right.getString().equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getString().equals( "undefined ")||  right.getString().equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
85	[BUG]  [BUGGY]  if(right.equals( "undefined ")||  right.equals( "right "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.equals( "undefined ")||  right.equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.equals( "undefined ")||  right.equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
86	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
87	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
88	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
89	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n  ==  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n  ==  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
90	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
91	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  left.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
92	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
93	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  &&  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  &&  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  &&  left.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
94	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
95	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  right.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
96	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   ")||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	48	None	replace
97	[BUG]  [BUGGY]  if(result  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
98	[BUG]  [BUGGY]  if(result  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
99	[BUG]  [BUGGY]  if(result  ||  rightLiteral  ||  left.getString().equals( "undefinedRight "))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  rightLiteral  ||  left.getString().equals( "undefinedRight "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  rightLiteral  ||  left.getString().equals( "undefinedRight "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
100	[BUG]  [BUGGY]  if(result  ||  leftLabel  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  leftLabel  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  leftLabel  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
101	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	18	None	replace
102	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	18	None	replace
103	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	18	None	replace
104	[BUG]  [BUGGY]  Node  right  =  left.getNext()  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.getNext()  +  1;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.getNext()  +  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	18	None	replace
105	[BUG]  [BUGGY]  Node  right  =  left.getString();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.getString();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.getString();	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	18	None	replace
106	[BUG]  [BUGGY]  if(left!=  null  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  right.getString().equals( "undefined "))  {	  if(right!=    null    ||    left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
107	[BUG]  [BUGGY]  if(n!=  null  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  null  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null  ||  left.getString().equals( "undefined "))  {	  if(right!=    null    ||    left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	15	None	replace
108	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  result.equals( "Undefined   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  result.equals( "Undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  result.equals( "Undefined   "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "Undefined   "))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
109	[BUG]  [BUGGY]  if(right.getString().equals( "undefined ")||  right.getString().equals( "Undefined   "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getString().equals( "undefined ")||  right.getString().equals( "Undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getString().equals( "undefined ")||  right.getString().equals( "Undefined   "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "Undefined   "))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
110	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "Undefined   "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")||  left.getString().equals( "Undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  left.getString().equals( "Undefined   "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "Undefined   "))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
111	[BUG]  [BUGGY]  boolean  undefinedRight  =  right.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedRight  =  right.getString().equals( "undefined "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedRight  =  right.getString().equals( "undefined "));	  boolean    undefinedRight    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	70	None	replace
112	[BUG]  [BUGGY]  boolean  undefinedRight  =  left.getString().equals( ".undefined "));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedRight  =  left.getString().equals( ".undefined "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedRight  =  left.getString().equals( ".undefined "));	  boolean    undefinedRight    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	70	None	replace
113	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  op);  break;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(right,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  ';'  expected	46	None	replace
114	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(n,  op);  break;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(n,  op);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  ';'  expected	46	None	replace
115	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  right);  break;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  right);  break;	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  ';'  expected	46	None	replace
116	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  op);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(n,  op);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(n,  op);	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  ';'  expected	46	None	replace
117	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  right);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  right);	  result    =    compareToUndefined(left,    op);    break;    	non-compiled	[CE]  ';'  expected	46	None	replace
118	[BUG]  [BUGGY]  if(result  ==  null  &&  right.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&  right.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  &&  right.getString().equals( "undefined   "))  {	  if(result    ==    null    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	28	None	replace
119	[BUG]  [BUGGY]  if(result  ==  null  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||!right.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||!right.isEmpty())  {	  if(result    ==    null    ||!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
120	[BUG]  [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||!right.isEmpty())  {	  if(result    ==    null    ||!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
121	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||!result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||!result.equals( "undefined "))  {	  if(result    ==    null    ||!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
122	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
123	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
124	[BUG]  [BUGGY]  if(result  ||  left.getType()!=  Token.VAR)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  left.getType()!=  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getType()!=  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
125	[BUG]  [BUGGY]  if(result  ||  right.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  right.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
126	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  left.getString()!=  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
127	[BUG]  [BUGGY]  if(left!=  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  left.getString()!=  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
128	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  left.getString()!=  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
129	[BUG]  [BUGGY]  if(right!=  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  left.getString()!=  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
130	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  right.getString()!=  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
131	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n  ==  null  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n  ==  null  ||  left.getString()!=  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
132	[BUG]  [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedLeft  =  right.getString().equals( "undefined "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedLeft  =  right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	19	None	replace
133	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefinedRight "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	19	None	replace
134	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
135	[BUG]  [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
136	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ==    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
137	[BUG]  [BUGGY]  if(left!=  null  &&  rightLiteral)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&  rightLiteral)  {	  if(result!=    null    &&    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
138	[BUG]  [BUGGY]  if(right!=  null  &&  result!=  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  &&  result!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  result!=  null)  {	  if(result!=    null    &&    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
139	[BUG]  [BUGGY]  if(right!=  null  &&  result!=  null  &&  rightLiteral)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  &&  result!=  null  &&  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  result!=  null  &&  rightLiteral)  {	  if(result!=    null    &&    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
140	[BUG]  [BUGGY]  if(result  ==  null  &&  rightLiteral)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  &&  rightLiteral)  {	  if(result!=    null    &&    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
141	[BUG]  [BUGGY]  if(result!=  null  ||  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  result.equals( "undefined "))  {	  if(result    ==    null    ||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	83	None	replace
142	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {	  if(result    ==    null    ||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	83	None	replace
143	[BUG]  [BUGGY]  if(result  ==  null  &&  result.equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&  result.equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  &&  result.equals( "undefined   "))  {	  if(result    ==    null    ||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	83	None	replace
144	[BUG]  [BUGGY]  if(result  ==  null  ||  right.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  right.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  right.equals( "undefined "))  {	  if(result    ==    null    ||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	83	None	replace
145	[BUG]  [BUGGY]  if(left  ==  null  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  &&  left.getString().equals( "undefined "))  {	  if(right!=    null    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	62	None	replace
146	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  n.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
147	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
148	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  n.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
149	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
150	[BUG]  [BUGGY]  if(n!=  null  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  null  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null  ||  right.getString().equals( "undefined "))  {	  if(right!=    null    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
151	[BUG]  [BUGGY]  if(result  ==  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  0)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  0)  {	  if(result    >    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
152	[BUG]  [BUGGY]  if(result  ==  null  ||  result  >  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  result  >  0)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  result  >  0)  {	  if(result    >    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
153	[BUG]  [BUGGY]  if(result!=  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  0)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  0)  {	  if(result    >    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
154	[BUG]  [BUGGY]  if(result.length()  >  0)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.length()  >  0)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.length()  >  0)  {	  if(result    >    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
155	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
156	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  &&  result.equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
157	[BUG]  [BUGGY]  if(left!=  null  ||  right  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  right  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  right  ==  null)  {	  if(left!=    null    ||    right!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
158	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  right!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  right!=  null)  {	  if(left!=    null    ||    right!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
159	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    right!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
160	[BUG]  [BUGGY]  if(n!=  null  ||  right!=  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  null  ||  right!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  null  ||  right!=  null)  {	  if(left!=    null    ||    right!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
161	[BUG]  [BUGGY]  if(result  ==  null  &&  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  &&  left.getString().equals( "undefined   "))  {	  if(result!=    null    ||    left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	8	None	replace
162	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  left);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(right,  left);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  ';'  expected	21	None	replace
163	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(n,  right);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(n,  right);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  ';'  expected	21	None	replace
164	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(right,  rightLiteral);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  ';'  expected	21	None	replace
165	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(right,  undefinedRight);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  ';'  expected	21	None	replace
166	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  left.getString().equals( "undefined   "))  {	  if(result    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
167	[BUG]  [BUGGY]  if(result  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  &&  left.getString().equals( "undefined "))  {	  if(result    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
168	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  result  ==  left.getString())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  result  ==  left.getString())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  result  ==  left.getString())  {	  if(result    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
169	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  &&  left.getString()!=  null)  {	  if(right.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
170	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  &&  right.getString()!=  null)  {	  if(right.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
171	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  ||  left.getString()!=  null)  {	  if(right.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
172	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  right.getType()  ==  Token.NAME)  {	  if(result    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
173	[BUG]  [BUGGY]  if(left.getString().equals( "undefined   ")||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined   ")||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined   ")||  right.getType()  ==  Token.NAME)  {	  if(result    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
174	[BUG]  [BUGGY]  boolean  undefinedRight  =(right.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedRight  =(right.getString().equals( "undefined "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedRight  =(right.getString().equals( "undefined "));	  boolean    undefinedRight    =(left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	69	None	replace
175	[BUG]  [BUGGY]  boolean  undefinedRight  =(n.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedRight  =(n.getString().equals( "undefined "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedRight  =(n.getString().equals( "undefined "));	  boolean    undefinedRight    =(left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	69	None	replace
176	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
177	[BUG]  [BUGGY]  if(left.getString().equals( "undefined   ")||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined   ")||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined   ")||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
178	[BUG]  [BUGGY]  if(result  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  right.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
179	[BUG]  [BUGGY]  if(result  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getType()!=  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
180	[BUG]  [BUGGY]  if(result  ||  left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
181	[BUG]  [BUGGY]  if(n!=  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n!=  Token.NAME)  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
182	[BUG]  [BUGGY]  if(result  ==  null  ||  result!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  result!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  result!=  Token.NAME)  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
183	[BUG]  [BUGGY]  if(result!=  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.NAME  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  Token.NAME  ||  left.getString().equals( "undefined   "))  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
184	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  right.getType()  ==  Token.NAME)  {	  if(left!=    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
185	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {	  if(left!=    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
186	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {	  if(left!=    null    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	59	None	replace
187	[BUG]  [BUGGY]  if(right  ==  null  ||  result  ==  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  result  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  result  ==  null)  {	  if(result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
188	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  rightLiteral.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  rightLiteral.equals( "undefined "))  {	  if(result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
189	[BUG]  [BUGGY]  if(right.equals(result)||  rightLiteral)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.equals(result)||  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.equals(result)||  rightLiteral)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
190	[BUG]  [BUGGY]  if(result.equals(left)||  rightLiteral)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals(left)||  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(left)||  rightLiteral)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
191	[BUG]  [BUGGY]  if(result.equals( "- ")||  rightLiteral)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "- ")||  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "- ")||  rightLiteral)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
192	[BUG]  [BUGGY]  if(result.equals(right)||  rightLiteral.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals(right)||  rightLiteral.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(right)||  rightLiteral.equals( "undefined "))  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
193	[BUG]  [BUGGY]  if(result.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(result    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
194	[BUG]  [BUGGY]  if(result.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.getString().equals( "undefined "))  {	  if(result    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
195	[BUG]  [BUGGY]  if(result.equals(right.getString()))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals(right.getString()))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(right.getString()))  {	  if(result    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
196	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  ';'  expected	43	None	replace
197	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedRight);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  op,  undefinedRight);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  ';'  expected	43	None	replace
198	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  op,  undefinedLeft);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  op,  undefinedLeft);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  ';'  expected	43	None	replace
199	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
200	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  result.getType()  ==  Token.NAME)  {	  if(result    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
201	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   ")&&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
202	[BUG]  [BUGGY]  if(n.getString().equals( "undefined ")||  n.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getString().equals( "undefined ")||  n.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getString().equals( "undefined ")||  n.getString().equals( "undefined "))  {	  if(n.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	24	None	replace
203	[BUG]  [BUGGY]  boolean  undefinedLeft  =  (right.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedLeft  =  (right.getString().equals( "undefined "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedLeft  =  (right.getString().equals( "undefined "));	  boolean    undefinedLeft    =    (left.getString().equals(   "undefined       "));    	non-compiled	[CE]  ';'  expected	22	None	replace
204	[BUG]  [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ");  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedLeft  =  left.getString().equals( "undefined ");  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedLeft  =  left.getString().equals( "undefined ");	  boolean    undefinedLeft    =    (left.getString().equals(   "undefined       "));    	non-compiled	[CE]  ';'  expected	22	None	replace
205	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "undefined ")||  result.equals( "right "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  result.equals( "undefined ")||  result.equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  result.equals( "undefined ")||  result.equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
206	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "right "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  right.getString().equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
207	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  left);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  left);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  ';'  expected	43	None	replace
208	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(left,  n);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(left,  n);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  ';'  expected	43	None	replace
209	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
210	[BUG]  [BUGGY]  if(result!=  null  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
211	[BUG]  [BUGGY]  if(result  ||  left  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ||  left  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ||  left  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
212	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
213	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  right.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(left.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	60	None	replace
214	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(left.getType()    ==    Token.NAME    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	60	None	replace
215	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getString()  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getString()  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  left.getString()  ==  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
216	[BUG]  [BUGGY]  if(result!=  null  &&  result.booleanValue())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  result.booleanValue())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  result.booleanValue())  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
217	[BUG]  [BUGGY]  if(result  ==  null  ||  result.booleanValue())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  result.booleanValue())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  result.booleanValue())  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
218	[BUG]  [BUGGY]  if(result  ==  null  ||  left.booleanValue())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  left.booleanValue())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.booleanValue())  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
219	[BUG]  [BUGGY]  if(result.booleanValue()  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.booleanValue()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.booleanValue()  &&  right.getString().equals( "undefined "))  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
220	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getString().equals( "undefined "))  {	  if(left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
221	[BUG]  [BUGGY]  if(result!=  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  right.getType()  ==  Token.NAME)  {	  if(result    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
222	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(result    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
223	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.replaceChild(n,  newNode);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.replaceChild(n,  newNode);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
224	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getString()  ==  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  left.getString()  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  left.getString()  ==  null)  {	  if(right.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
225	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  &&  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()!=  Token.NAME  &&  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()!=  Token.NAME  &&  left.getString()!=  null)  {	  if(right.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
226	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
227	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.getType()  ==  Token.VAR)  {	  if(result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
228	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   ")&&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
229	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  left.getString().equals( "right "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  left.getString().equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  left.getString().equals( "right "))  {	  if(result.equals(   "undefined   ")&&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
230	[BUG]  [BUGGY]  if(right!=  null  &&  rightLiteral)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  &&  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  rightLiteral)  {	  if(result!=    null    &&    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
231	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
232	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
233	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "Undefined   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")||  right.getString().equals( "Undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  right.getString().equals( "Undefined   "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "Undefined   "))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
234	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  result.equals( "Undefined ")&&  left.getString().equals( "- "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  result.equals( "Undefined ")&&  left.getString().equals( "- "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  result.equals( "Undefined ")&&  left.getString().equals( "- "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "Undefined   "))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
235	[BUG]  [BUGGY]  Node  left  =  left.cloneTree();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  left.cloneTree();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  left.cloneTree();	  Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	44	None	replace
236	[BUG]  [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
237	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
238	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
239	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  left.getString()!=  null)  {	  if(result    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
240	[BUG]  [BUGGY]  if(result!=  null  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  left.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
241	[BUG]  [BUGGY]  if(result.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
242	[BUG]  [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Boolean  undefinedLeft  =  left.getString().equals( "undefined "));  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Boolean  undefinedLeft  =  left.getString().equals( "undefined "));	  boolean    undefinedLeft    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	19	None	replace
243	[BUG]  [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
244	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
245	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  result.equals( "undefined ")&&  left.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
246	[BUG]  [BUGGY]  if(Token.NAME!=  left.getString())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(Token.NAME!=  left.getString())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(Token.NAME!=  left.getString())  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
247	[BUG]  [BUGGY]  if(!result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(!result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(!result.equals( "undefined "))  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
248	[BUG]  [BUGGY]  if(Token.NAME!=  left.getType())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(Token.NAME!=  left.getType())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(Token.NAME!=  left.getType())  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
249	[BUG]  [BUGGY]  if(!result.isEmpty())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(!result.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(!result.isEmpty())  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
250	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  left.getType()  ==  Token.NAME)  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
251	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  left.getType()  ==  Token.FUNCTION)  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
252	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  op);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  comparisonToUndefined(left,  op);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  comparisonToUndefined(left,  op);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  ';'  expected	21	None	replace
253	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  right);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(right,  right);	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  ';'  expected	21	None	replace
254	[BUG]  [BUGGY]  if(result!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(result!=    null    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	84	None	replace
255	[BUG]  [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  left.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
256	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  left.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
257	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  ||  left.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
258	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  right.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  right.equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
259	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  result.equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
260	[BUG]  [BUGGY]  if(result!=  null  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||!right.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||!right.isEmpty())  {	  if(result    ==    null    ||!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
261	[BUG]  [BUGGY]  if(right!=  null  &&!right.isEmpty())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  &&!right.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&!right.isEmpty())  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
262	[BUG]  [BUGGY]  if(left!=  null  &&!right.isEmpty())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&!right.isEmpty())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&!right.isEmpty())  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
263	[BUG]  [BUGGY]  if(result.length()  ==  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.length()  ==  0)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.length()  ==  0)  {	  if(result    >    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
264	[BUG]  [BUGGY]  if(result!=  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  left.getString()!=  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
265	[BUG]  [BUGGY]  if(result!=  null  &&  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  left.getString()!=  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
266	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&  right!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&  right!=  null)  {	  if(left!=    null    ||    right!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
267	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  left.getType()  ==  Token.VAR)  {	  if(left!=    null    ||    right!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
268	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(left.getType()    ==    Token.NAME    &&    left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	13	None	replace
269	[BUG]  [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  rightLiteral  ==  null;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  rightLiteral  ==  null;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  leftLiteral  =  left.getString().equals( "undefined ")&&  rightLiteral  ==  null;	  boolean    leftLiteral    =    left.getString().equals(   "undefined   ")||    leftLiteral    ==    null;    	non-compiled	[CE]  ';'  expected	45	None	replace
270	[BUG]  [BUGGY]  if(result.equals(right)&&  rightLiteral)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals(right)&&  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(right)&&  rightLiteral)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
271	[BUG]  [BUGGY]  if(result.equals( " ")||  rightLiteral)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( " ")||  rightLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( " ")||  rightLiteral)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
272	[BUG]  [BUGGY]  if(result.equals(right)||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals(right)||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(right)||  left.getString().equals( "undefined "))  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
273	[BUG]  [BUGGY]  if(result.equals(right)||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals(right)||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(right)||  left.getType()  ==  Token.NAME)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
274	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  ||  right.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  ||  right.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
275	[BUG]  [BUGGY]  boolean  undefinedRight  =  left.getString().equals( "undefined ");  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  boolean  undefinedRight  =  left.getString().equals( "undefined ");  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	boolean  undefinedRight  =  left.getString().equals( "undefined ");	  boolean    undefinedRight    =    left.getString().equals(   "undefined   "));    	non-compiled	[CE]  ';'  expected	70	None	replace
276	[BUG]  [BUGGY]  if(right  ==  null  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right  ==  null  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right  ==  null  &&  right.getString().equals( "undefined "))  {	  if(right!=    null    &&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	63	None	replace
277	[BUG]  [BUGGY]  if(left.getString().equals( "undefined   ")&&  right.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined   ")&&  right.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined   ")&&  right.getString().equals( "undefined   "))  {	  if(right.getString().equals(   "undefined   ")||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	23	None	replace
278	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
279	[BUG]  [BUGGY]  if(result!=  null  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  rightLiteral  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
280	[BUG]  [BUGGY]  if(result  ==  null  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
281	[BUG]  [BUGGY]  if(result!=  null  &&  rightLiteral  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  rightLiteral  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  rightLiteral  ||  left.getString().equals( "undefined   "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
282	[BUG]  [BUGGY]  if(result!=  null  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  leftLiteral  ||  left.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
283	[BUG]  [BUGGY]  if(result  ==  null  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  leftLiteral  ||  right.getString().equals( "undefined "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
284	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  right.getString().equals( "undefined))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  right.getString().equals( "undefined))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  right.getString().equals( "undefined))  {	  if(result.equals(   "undefined   ")&&    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
285	[BUG]  [BUGGY]  if(result!=  right)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  right)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  right)  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
286	[BUG]  [BUGGY]  if(result!=  left.getType())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  left.getType())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  left.getType())  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
287	[BUG]  [BUGGY]  if(result!=  left)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  left)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  left)  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
288	[BUG]  [BUGGY]  if(result!=  right.getType())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  right.getType())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  right.getType())  {	  if(result    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
289	[BUG]  [BUGGY]  if(result.equals( "Undefined ")||  result.equals( "Undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "Undefined ")||  result.equals( "Undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "Undefined ")||  result.equals( "Undefined "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "Undefined   "))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
290	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  result.equals( "Undefined ")&&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  result.equals( "Undefined ")&&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  result.equals( "Undefined ")&&  left.getString().equals( "undefined "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "Undefined   "))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
291	[BUG]  [BUGGY]  if(result.length  >  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.length  >  0)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.length  >  0)  {	  if(result    >    0)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
292	[BUG]  [BUGGY]  if(result!=  null  ||  rightLiteral.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  rightLiteral.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  rightLiteral.equals( "undefined "))  {	  if(result!=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	77	None	replace
293	[BUG]  [BUGGY]  if(result!=  null  ||  rightLiteral  ==  null)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  rightLiteral  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  rightLiteral  ==  null)  {	  if(result!=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	77	None	replace
294	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  ||  right.getString().equals( "undefined "))  {	  if(left.getType()    ==    Token.NAME    ||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	57	None	replace
295	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  op)+  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  compareToUndefined(right,  op)+  1;  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  compareToUndefined(right,  op)+  1;	  result    =    compareToUndefined(right,    op);    	non-compiled	[CE]  ';'  expected	21	None	replace
296	[BUG]  [BUGGY]  if(left.getString().equals( "undefined ")||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getString().equals( "undefined ")||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getString().equals( "undefined ")||  left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
297	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
298	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  ||  right.getType()  ==  Token.NAME)  {	  if(left.getType()    ==    Token.NAME    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	40	None	replace
299	[BUG]  [BUGGY]  if(result  ==  leftLiteral)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  leftLiteral)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  leftLiteral)  {	  if(result!=    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
300	[BUG]  [BUGGY]  if(result.booleanValue()  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.booleanValue()  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.booleanValue()  ||  right.getString().equals( "undefined "))  {	  if(result.booleanValue())    {    	non-compiled	[CE]  ';'  expected	36	None	replace
301	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  rightLiteral.equals( "right "))  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  rightLiteral.equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  rightLiteral.equals( "right "))  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
302	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  rightLiteral!=  null)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  rightLiteral!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  rightLiteral!=  null)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
303	[BUG]  [BUGGY]  if(result.equals( "undefined ")&&  rightLiteral  ==  null)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")&&  rightLiteral  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")&&  rightLiteral  ==  null)  {	  if(result.equals(right)||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	81	None	replace
304	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getString()  ==  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getString()  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()!=  Token.NAME  ||  left.getString()  ==  null)  {	  if(right.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
305	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getString()  ==  null)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getString()  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()  ==  Token.NAME  ||  right.getString()  ==  null)  {	  if(right.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	42	None	replace
306	[BUG]  [BUGGY]  Node  left  =  left.removeFirst();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  left  =  left.removeFirst();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  left  =  left.removeFirst();	  Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	44	None	replace
307	[BUG]  [BUGGY]  if(result  ==  null  &&  result!=  null  &&  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  &&  result!=  null  &&  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  &&  result!=  null  &&  result.equals( "undefined "))  {	  if(result!=    null    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	84	None	replace
308	[BUG]  [BUGGY]  if(result!=  null  &&  result.equals( "function "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  result.equals( "function "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  result.equals( "function "))  {	  if(result!=    null    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	84	None	replace
309	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()!=  Token.NAME  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()!=  Token.NAME  ||  left.getString().equals( "undefined "))  {	  if(right.getType()    ==    Token.NAME    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
310	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  ||  n.getString().equals( "undefined "))  {	  if(n.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	24	None	replace
311	[BUG]  [BUGGY]  if(result.equals( ". ")||  result.equals( "right "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( ". ")||  result.equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( ". ")||  result.equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
312	[BUG]  [BUGGY]  if(result.equals( ".* ")||  result.equals( "right "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( ".* ")||  result.equals( "right "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( ".* ")||  result.equals( "right "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "right   "))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
313	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  left.getString().equals( "undefined))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  left.getString().equals( "undefined))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  left.getString().equals( "undefined))  {	  if(result.equals(   "undefined   ")&&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	32	None	replace
314	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()  ==  Token.VAR  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()  ==  Token.VAR  &&  left.getString().equals( "undefined "))  {	  if(left.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
315	[BUG]  [BUGGY]  if(result.equals(left)||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals(left)||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals(left)||  left.getString().equals( "undefined "))  {	  if(result    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	1	None	replace
316	[BUG]  [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getType()!=  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getType()!=  Token.NAME  ||  right.getString().equals( "undefined "))  {	  if(right.getType()    ==    Token.NAME    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	9	None	replace
317	[BUG]  [BUGGY]  if(result  ==  null  ||  result.equals( "null "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  result.equals( "null "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  result.equals( "null "))  {	  if(result    ==    null    ||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	83	None	replace
318	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  result  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  result  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  result  ==  null)  {	  if(result    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
319	[BUG]  [BUGGY]  if(result  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(result    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
320	[BUG]  [BUGGY]  if(result  ==  Token.NAME  &&!left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  &&!left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  &&!left.getString().equals( "undefined "))  {	  if(result    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	66	None	replace
321	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  right.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  right.getType()!=  Token.NAME)  {	  if(result    ==    null    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
322	[BUG]  [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
323	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
324	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
325	[BUG]  [BUGGY]  if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {	  if(result    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
326	[BUG]  [BUGGY]  if(right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right.getString().equals( "undefined ")&&  right.getString().equals( "undefined "))  {	  if(right.getString().equals(   "undefined   ")||    right.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	23	None	replace
327	[BUG]  [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  left.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
328	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
329	[BUG]  [BUGGY]  if(result  ==  Token.VAR  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.VAR  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.VAR  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
330	[BUG]  [BUGGY]  if(result  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.VAR  ||  left.getType()  ==  Token.FUNCTION)  {	  if(result    ||    left.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
331	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  ||  left.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
332	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left.getType()!=  Token.NAME  ||  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left.getType()!=  Token.NAME  ||  right.getString()!=  null)  {	  if(left.getType()    ==    Token.NAME    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	61	None	replace
333	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left  ==  null  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left  ==  null  ||  right.getString().equals( "undefined "))  {	  if(left    ==    null)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
334	[BUG]  [BUGGY]  if(result!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.NAME  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  Token.NAME  &&  left.getString().equals( "undefined "))  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
335	[BUG]  [BUGGY]  if(result!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.NAME  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  Token.NAME  &&  right.getString().equals( "undefined "))  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
336	[BUG]  [BUGGY]  if(result!=  Token.NAME  &&!left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  Token.NAME  &&!left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  Token.NAME  &&!left.getString().equals( "undefined "))  {	  if(result!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
337	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(n.getType()  ==  Token.NAME  ||  result.equals( "undefined "))  {	  if(n.getType()    ==    Token.NAME    &&    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
338	[BUG]  [BUGGY]  if(result!=  null  &&  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  rightLiteral  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  rightLiteral  ||  left.getType()  ==  Token.NAME)  {	  if(result    ||    rightLiteral    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	51	None	replace
339	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  left.getString()!=  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
340	[BUG]  [BUGGY]  if(result  >=  null  ||  left.getString()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  >=  null  ||  left.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  >=  null  ||  left.getString()!=  null)  {	  if(result    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
341	[BUG]  [BUGGY]  if(left!=  null  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(left!=  null  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(left!=  null  &&  left.getString().equals( "undefined ")||  left.getString().equals( "undefined "))  {	  if(right!=    null    &&    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	62	None	replace
342	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  left.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
343	[BUG]  [BUGGY]  if(result!=  null  &&  left.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  left.getType()!=  Token.NAME)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  left.getType()!=  Token.NAME)  {	  if(result    ||    left.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	5	None	replace
344	[BUG]  [BUGGY]  if(rightLiteral  ==  null  ||  result!=  null)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rightLiteral  ==  null  ||  result!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(rightLiteral  ==  null  ||  result!=  null)  {	  if(result    >=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
345	[BUG]  [BUGGY]  if(rightLiteral!=  null  ||  result  >=  null)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(rightLiteral!=  null  ||  result  >=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(rightLiteral!=  null  ||  result  >=  null)  {	  if(result    >=    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
346	[BUG]  [BUGGY]  Node  right  =  left.removeFirst();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  Node  right  =  left.removeFirst();  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	Node  right  =  left.removeFirst();	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	18	None	replace
347	[BUG]  [BUGGY]  if(result.equals( "Undefined ")||  result.equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "Undefined ")||  result.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "Undefined ")||  result.equals( "undefined "))  {	  if(result.equals(   "undefined   ")||    result.equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
348	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&!result.isEmpty()  &&  left.getString().equals( "undefined "))  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
349	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&!result.isEmpty()  &&  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&!result.isEmpty()  &&  right.getString().equals( "undefined "))  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
350	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty()  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&!result.isEmpty()  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&!result.isEmpty()  ||  right.getString().equals( "undefined "))  {	  if(result!=    null    &&!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
351	[BUG]  [BUGGY]  if(right!=  null  ||  right!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  ||  right!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  ||  right!=  null)  {	  if(left!=    null    ||    right!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
352	[BUG]  [BUGGY]  if(result!=  null  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  ||  right.getString().equals( "undefined "))  {	  if(result    ==    null    ||    right.getString().equals(   "undefined       "))    {    	non-compiled	[CE]  ';'  expected	28	None	replace
353	[BUG]  [BUGGY]  if(result  ==  null  ||  right.getString()!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  right.getString()!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  right.getString()!=  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
354	[BUG]  [BUGGY]  if(result  ==  null  ||  left.getString()  ==  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  left.getString()  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  left.getString()  ==  null)  {	  if(result    ==    null    ||    left.getString()!=    null)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
355	[BUG]  [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  Token.NAME  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  Token.NAME  ||  left.getType()  ==  Token.BLOCK)  {	  if(result    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
356	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  rightLiteral.equals( "undefined "))  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
357	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  left.getString())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  left.getString())  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  left.getString())  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
358	[BUG]  [BUGGY]  if(result.equals( "undefined ")||  rightLiteral  ==  null)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result.equals( "undefined ")||  rightLiteral  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result.equals( "undefined ")||  rightLiteral  ==  null)  {	  if(result.equals(   "undefined   ")||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	79	None	replace
359	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  left.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  left.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  left.getString().equals( "undefined "))  {	  if(result    ==    null    ||!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
360	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  right.getString().equals( "undefined "))  {	  if(result    ==    null    ||!result.isEmpty())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
361	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  rightLiteral!=  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  rightLiteral!=  null)  {	  if(result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
362	[BUG]  [BUGGY]  if(result  ==  null  ||  rightLiteral  ==  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result  ==  null  ||  rightLiteral  ==  null)  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result  ==  null  ||  rightLiteral  ==  null)  {	  if(result    ==    null    ||    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	75	None	replace
363	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  result  =  comparisonToUndefined(right,  op);  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	result  =  comparisonToUndefined(right,  op);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  ';'  expected	43	None	replace
364	[BUG]  [BUGGY]  if(result!=  null  &&  rightLiteral.equals( "undefined "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  rightLiteral.equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  rightLiteral.equals( "undefined "))  {	  if(result!=    null    &&    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
365	[BUG]  [BUGGY]  if(result!=  null  &&  rightLiteral.equals( " "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  rightLiteral.equals( " "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  rightLiteral.equals( " "))  {	  if(result!=    null    &&    rightLiteral)    {    	non-compiled	[CE]  ';'  expected	76	None	replace
366	[BUG]  [BUGGY]  if(result!=  null  &&  result  ||  rightLiteral  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  result  ||  rightLiteral  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  result  ||  rightLiteral  ||  left.getString().equals( "undefined   "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
367	[BUG]  [BUGGY]  if(result!=  null  &&  leftLiteral  ||  left.getString().equals( "undefined   "))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(result!=  null  &&  leftLiteral  ||  left.getString().equals( "undefined   "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(result!=  null  &&  leftLiteral  ||  left.getString().equals( "undefined   "))  {	  if(result    ||    rightLiteral    ||    left.getString().equals(   "undefined   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
368	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  break;  case  Token.NAME:  if  (undefinedRight)  {  result  =  compareToUndefined(left,  op);  break;  }      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {  [BUGGY]      boolean  undefinedLeft  =  (left.getString().equals(     "undefined     "));  if  (undefinedLeft)  {  result  =  compareToUndefined(right,  op);  break;  }  }  if  (Token.NAME  !=  right.getType())  {  return  n;//  Only  eval  if  they  are  the  same  type  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1030	1030	3	replace	if(right!=  null  &&  left.getType()  ==  Token.NAME  ||  right.getString().equals( "undefined "))  {	  if(right!=    null    &&    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
