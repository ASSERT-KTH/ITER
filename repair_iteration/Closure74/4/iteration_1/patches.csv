bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(right  ==  null)  {  break;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(right  ==  null)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  	10	None	replace
2	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  break;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result  ==  null  ||!result.isEmpty())  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isEmpty())  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(right))  {  break;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result  ==  null  ||!result.equals(right))  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(right))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  result  =  lhType  ==  rhType;  break;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  rhType;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType;  break;	      	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  result  =  lhType!=  rhType;  break;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType!=  rhType;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  rhType;  break;	      	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  result  =  lhType  >>  rhType;  break;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  >>  rhType;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  rhType;  break;	      	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  result  =  lhType  >=  rhType;  break;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  >=  rhType;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >=  rhType;  break;	      	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  result  =  lhType  ==  n;  break;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  n;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n;  break;	      	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  rhType  +  1;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType  +  1;  break;	      	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  result  =  lhType  ==  n;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  n;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  rhType  +  1;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType  +  1;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  result  =  rhType!=  lhType;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  rhType!=  lhType;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType!=  lhType;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  n.addChildToBack(right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToBack(right);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(right);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  n.addChildToBack(left);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToBack(left);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(left);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  n.addChildToBack(right,  result);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToBack(right,  result);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(right,  result);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  n.addChildToBack(ln);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToBack(ln);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(ln);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  n.addChildToBack(newNode);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToBack(newNode);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(newNode);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right));  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToBack(new  Node(left,  right));  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right));	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  rhType  ==  lhType;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  lhType;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  result  =  lhType!=  n;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType!=  n;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  n;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  n,  rhType;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n,  rhType;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getFirstChild();	  n    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
25	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.getLastChild();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getLastChild();	  n    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.getParent();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  right.getNext();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  result  =  lhType  >>  n;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  >>  n;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  n;	  result    =    lhType    >>    rhType;    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  result  =  lhType  ==  n.getType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  n.getType();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n.getType();	  result    =    lhType!=    rhType;    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  if(rhType!=  null)  {  break;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(rhType!=  null)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(rhType!=  null)  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  result  =  lhType  ==  val;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  ==  val;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  val;	  result    =    lhType    ==    rhType;    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeFirstChild();	  n    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.removeChild(right);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.removeChild(right);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right),  result);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToBack(new  Node(left,  right),  result);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right),  result);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  if(left!=  null)  {  break;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(left!=  null)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  if(left!=  null  ||  right!=  null)  {  break;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(left!=  null  ||  right!=  null)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  ||  right!=  null)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  if(left  ==  null)  {  break;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(left  ==  null)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left  ==  null)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  	10	None	replace
38	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isNaN())  {  break;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result  ==  null  ||!result.isNaN())  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isNaN())  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(rhType))  {  break;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result  ==  null  ||!result.equals(rhType))  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(rhType))  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType!=  rhType  +  1;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  rhType  +  1;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  result  =  lhType  >>  rhType  +  1;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  rhType  +  1;	  result    =    lhType    >=    rhType;    	non-compiled	[CE]  	5	None	replace
42	[BUG]  [BUGGY]  n.addChildToFront(result);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToFront(result);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(result);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
43	[BUG]  [BUGGY]  n.addChildToFront(right);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n.addChildToFront(right);  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(right);	  n.addChildToBack(result);    	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty())  {  break;  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result!=  null  &&!result.isEmpty())  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.isEmpty())  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  if(result!=  null  &&!result.equals(rhType))  {  break;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result!=  null  &&!result.equals(rhType))  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.equals(rhType))  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  if(result!=  null  &&!result.equals(right))  {  break;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result!=  null  &&!result.equals(right))  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.equals(right))  {  break;  }	  if(result!=    null)    {    break;    }    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null)    {    break;    }    	non-compiled	[CE]  	10	None	replace
50	[BUG]  [BUGGY]  n  =  left.removeFirst();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.removeFirst();  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeFirst();	  n    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUndefined())  {  break;  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  if(result  ==  null  ||!result.isUndefined())  {  break;  }  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null)    {    break;    }    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  ==  rhType;  break;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  case  Token.CALL:  result  =  lhType  ==  rhType;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType  ==  rhType;  break;	      	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  n  =  left.getNext();  break;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.getNext();  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getNext();  break;	      	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  n  =  left.getFirstChild();  break;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getFirstChild();  break;	      	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType!=  rhType;  break;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;    [BUGGY]  case  Token.CALL:  result  =  lhType!=  rhType;  break;  [BUGGY]      case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType!=  rhType;  break;	      	non-compiled	[CE]  	7	None	replace
