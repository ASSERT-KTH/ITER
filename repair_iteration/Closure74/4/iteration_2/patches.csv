bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  result!=  null  &&!result.isEmpty())  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result!=  null  &&!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result!=  null  &&!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	44	None	replace
2	[BUG]  [BUGGY]  if(result!=  null  ||!result.isEmpty())  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  ||!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  ||!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	44	None	replace
3	[BUG]  [BUGGY]  result  =  result  ==  null  &&!result.isEmpty())  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  &&!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  &&!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	44	None	replace
4	[BUG]  [BUGGY]  result  =  result!=  null?  null  :  result.isEmpty();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result!=  null?  null  :  result.isEmpty();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result!=  null?  null  :  result.isEmpty();	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	44	None	replace
5	[BUG]  [BUGGY]  if(n  ==  null)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(n  ==  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(n  ==  null)  {  break;  }	  if(right    ==    null)    {    break;    }    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right    ==    null)    {    break;    }    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right,  result));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  right,  result));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right,  result));	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
8	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  left,  right));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  left,  right));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  left,  right));	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
9	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right),  newNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  right),  newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right),  newNode);	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
10	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right,  this));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  right,  this));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right,  this));	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
11	[BUG]  [BUGGY]  n.addChildToBack(new  Node(right,  left));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(right,  left));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(right,  left));	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
12	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
13	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  right.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
14	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
15	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  >=  Token.NAME)  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  right.getType()  >=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  >=  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
16	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.getLastChild();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.getLastChild();	  n    =    right.getNext();    	non-compiled	[CE]  	27	None	replace
17	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.getFirstChild();	  n    =    right.getNext();    	non-compiled	[CE]  	27	None	replace
18	[BUG]  [BUGGY]  n  =  right.getNext()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.getNext()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.getNext()  +  1;	  n    =    right.getNext();    	non-compiled	[CE]  	27	None	replace
19	[BUG]  [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
20	[BUG]  [BUGGY]  result  =  lhType  ==  n.restrictByNotNullOrUndefined();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
21	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  lhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
22	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType.restrictByNotNullOrUndefined();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n,  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n,  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
23	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmpty();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmpty();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.restrictByNotEmpty();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
24	[BUG]  [BUGGY]  result  =  lhType  >=  rhType.restrictByNotNullOrUndefined();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >=  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >=  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
25	[BUG]  [BUGGY]  if(result!=  null  ||!result.isNaN())  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  ||!result.isNaN())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  ||!result.isNaN())  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  	38	None	replace
26	[BUG]  [BUGGY]  result  =  result  ==  null  ||!result.isNaN())  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  ||!result.isNaN())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  ||!result.isNaN())  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  	38	None	replace
27	[BUG]  [BUGGY]  result  ==  null  ||!result.isNaN())  {  break;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  ==  null  ||!result.isNaN())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  ==  null  ||!result.isNaN())  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
28	[BUG]  [BUGGY]  if(rhType  ==  null)  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(rhType  ==  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(rhType  ==  null)  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  	30	None	replace
29	[BUG]  [BUGGY]  if(lhType  ==  rhType)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(lhType  ==  rhType)  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  	30	None	replace
30	[BUG]  [BUGGY]  if(lhType!=  null)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(lhType!=  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(lhType!=  null)  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  	30	None	replace
31	[BUG]  [BUGGY]  if(left!=  null  ||  right  ==  null)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  ||  right  ==  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  ||  right  ==  null)  {  break;  }	  if(left    ==    null)    {    break;    }    	non-compiled	[CE]  	37	None	replace
32	[BUG]  [BUGGY]  if(left  ==  null  ||  right  ==  null)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left  ==  null  ||  right  ==  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left  ==  null  ||  right  ==  null)  {  break;  }	  if(left    ==    null)    {    break;    }    	non-compiled	[CE]  	37	None	replace
33	[BUG]  [BUGGY]  if(left  ==  null  ||  left.equals(right))  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left  ==  null  ||  left.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left  ==  null  ||  left.equals(right))  {  break;  }	  if(left    ==    null)    {    break;    }    	non-compiled	[CE]  	37	None	replace
34	[BUG]  [BUGGY]  result  =  rhType  ==  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  n;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  n;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  	12	None	replace
35	[BUG]  [BUGGY]  result  =  lhType  ==  value;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  value;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  value;	  result    =    lhType    ==    val;    	non-compiled	[CE]  	31	None	replace
36	[BUG]  [BUGGY]  if(result!=  null  ||!result.equals(right))  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  ||!result.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  ||!result.equals(right))  {  break;  }	  if(result!=    null    &&!result.equals(right))    {    break;    }    	non-compiled	[CE]  	46	None	replace
37	[BUG]  [BUGGY]  result  =  result!=  null  &&!result.equals(right))  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result!=  null  &&!result.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result!=  null  &&!result.equals(right))  {  break;  }	  if(result!=    null    &&!result.equals(right))    {    break;    }    	non-compiled	[CE]  	46	None	replace
38	[BUG]  [BUGGY]  result  =  right.equals(result)?  result  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  right.equals(result)?  result  :  null;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  right.equals(result)?  result  :  null;	  if(result!=    null    &&!result.equals(right))    {    break;    }    	non-compiled	[CE]  	46	None	replace
39	[BUG]  [BUGGY]  result  =  right.equals(result)&&!result.equals(lhType);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  right.equals(result)&&!result.equals(lhType);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  right.equals(result)&&!result.equals(lhType);	  if(result!=    null    &&!result.equals(right))    {    break;    }    	non-compiled	[CE]  	46	None	replace
40	[BUG]  [BUGGY]  result  =  lhType  ==  n  +  1;  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n  +  1;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n  +  1;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  2;  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  2;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType  +  2;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  1;  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  rhType  +  1;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  rhType  +  1;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  	9	None	replace
43	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  1;  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  lhType  +  1;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  lhType  +  1;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  1;  break;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  rhType  +  1;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  rhType  +  1;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  ==  n;  break;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  ==  n;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType  ==  n;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	52	None	replace
46	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  ==  n,  rhType;  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  ==  n,  rhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType  ==  n,  rhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	52	None	replace
47	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  ==  rhType  +  1;  break;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  ==  rhType  +  1;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType  ==  rhType  +  1;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	52	None	replace
48	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  2;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType  +  2;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	40	None	replace
49	[BUG]  [BUGGY]  result  =  lhType  ==  n  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	40	None	replace
50	[BUG]  [BUGGY]  result  =  rhType!=  lhType  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType!=  lhType  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType!=  lhType  +  1;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	40	None	replace
51	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n,  rhType  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n,  rhType  +  1;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	21	None	replace
52	[BUG]  [BUGGY]  result  =  lhType  ==  n,  newNode;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n,  newNode;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n,  newNode;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	21	None	replace
53	[BUG]  [BUGGY]  n  =  right.getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.getParent();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.getParent();	  n    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
54	[BUG]  [BUGGY]  n  =  left.getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getString();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getString();	  n    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  n.addChildToBack(newNode,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(newNode,  left);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(newNode,  left);	  n.addChildToBack(newNode);    	non-compiled	[CE]  	17	None	replace
56	[BUG]  [BUGGY]  n.addChildToBack(left,  newNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(left,  newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(left,  newNode);	  n.addChildToBack(newNode);    	non-compiled	[CE]  	17	None	replace
57	[BUG]  [BUGGY]  n.addChildToBack(right,  newNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(right,  newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(right,  newNode);	  n.addChildToBack(newNode);    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  result  =  result  ==  null  ||!result.isEmpty())  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  ||!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  ||!result.isEmpty())  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  result  ==  null  ||!result.isEmpty())  {  break;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  ==  null  ||!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  ==  null  ||!result.isEmpty())  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
60	[BUG]  [BUGGY]  result  =  rhType  ==  lhType;  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  lhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  lhType;  break;	  result    =    lhType    ==    n;    break;    	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  result  =  lhType  ==  n.getFirstChild();  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n.getFirstChild();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n.getFirstChild();  break;	  result    =    lhType    ==    n;    break;    	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  n.addChildToBack(rn);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(rn);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(rn);	  n.addChildToBack(ln);    	non-compiled	[CE]  	16	None	replace
63	[BUG]  [BUGGY]  result  =  lhType  >=  rhType  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >=  rhType  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >=  rhType  +  1;	  result    =    lhType    >>    rhType    +    1;    	non-compiled	[CE]  	41	None	replace
64	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(lhType))  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.equals(lhType))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(lhType))  {  break;  }	  if(result    ==    null    ||!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	39	None	replace
65	[BUG]  [BUGGY]  if(result!=  null  ||!result.equals(rhType))  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  ||!result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  ||!result.equals(rhType))  {  break;  }	  if(result    ==    null    ||!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	39	None	replace
66	[BUG]  [BUGGY]  if(result!=  null  ||!result.equals(lhType))  {  break;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  ||!result.equals(lhType))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  ||!result.equals(lhType))  {  break;  }	  if(result    ==    null    ||!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	39	None	replace
67	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(ln))  {  break;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.equals(ln))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(ln))  {  break;  }	  if(result    ==    null    ||!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	39	None	replace
68	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
69	[BUG]  [BUGGY]  result  =  right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
70	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  >=  Token.FUNCTION)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  right.getType()  >=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  >=  Token.FUNCTION)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
71	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
72	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getNext()  +  1;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getNext()  +  1;  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  	53	None	replace
73	[BUG]  [BUGGY]  n  =  left.getLastChild();  break;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getLastChild();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getLastChild();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  	53	None	replace
74	[BUG]  [BUGGY]  n  =  left.getParent();  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getParent();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getParent();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  	53	None	replace
75	[BUG]  [BUGGY]  n  =  right.getNext();  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.getNext();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.getNext();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  	53	None	replace
76	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  break;  }	  if(left!=    null)    {    break;    }    	non-compiled	[CE]  	35	None	replace
77	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  break;  }	  if(left!=    null)    {    break;    }    	non-compiled	[CE]  	35	None	replace
78	[BUG]  [BUGGY]  if(result!=  null  ||!result.isUndefined())  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  ||!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
79	[BUG]  [BUGGY]  result  ==  null  ||!result.isUndefined())  {  break;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  ==  null  ||!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  ==  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
80	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isNullOrUndefined())  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isNullOrUndefined())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isNullOrUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
81	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isNone())  {  break;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isNone())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isNone())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
82	[BUG]  [BUGGY]  n  =  left.removeLast();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.removeLast();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeLast();	  n    =    left.removeFirst();    	non-compiled	[CE]  	50	None	replace
83	[BUG]  [BUGGY]  n  =  right.removeFirst();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.removeFirst();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.removeFirst();	  n    =    left.removeFirst();    	non-compiled	[CE]  	50	None	replace
84	[BUG]  [BUGGY]  n  =  left.removeFirst()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.removeFirst()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeFirst()  +  1;	  n    =    left.removeFirst();    	non-compiled	[CE]  	50	None	replace
85	[BUG]  [BUGGY]  result  =  lhType  ==  n  ||  lhType  ==  rhType;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n  ||  lhType  ==  rhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n  ||  lhType  ==  rhType;	  result    =    lhType    ==    n;    	non-compiled	[CE]  	10	None	replace
86	[BUG]  [BUGGY]  n  =  left.removeLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.removeLastChild();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeLastChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  	32	None	replace
87	[BUG]  [BUGGY]  n  =  right.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.removeFirstChild();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.removeFirstChild();	  n    =    left.removeFirstChild();    	non-compiled	[CE]  	32	None	replace
88	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.replaceChild(left,  newNode);	  n    =    left.removeFirstChild();    	non-compiled	[CE]  	32	None	replace
89	[BUG]  [BUGGY]  n  =  left.getParent()  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getParent()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getParent()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  	23	None	replace
90	[BUG]  [BUGGY]  n  =  left.getFirstChild()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getFirstChild()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getFirstChild()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  	23	None	replace
91	[BUG]  [BUGGY]  n  =  left.getLastChild()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getLastChild()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getLastChild()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  	23	None	replace
92	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getFirstChild().getNext()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  	23	None	replace
93	[BUG]  [BUGGY]  n  =  left.getLastChild().getNext()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getLastChild().getNext()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getLastChild().getNext()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  	23	None	replace
94	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.cloneTree();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.cloneTree();	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  	19	None	replace
95	[BUG]  [BUGGY]  result  =  lhType!=  n;  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  n;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  n;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  	5	None	replace
96	[BUG]  [BUGGY]  result  =  rhType!=  lhType;  break;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType!=  lhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType!=  lhType;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  	5	None	replace
97	[BUG]  [BUGGY]  result  =  lhType  ==  n.type;  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n.type;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n.type;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  	5	None	replace
98	[BUG]  [BUGGY]  n  =  right.getFirstChild();  break;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right.getFirstChild();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right.getFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  	54	None	replace
99	[BUG]  [BUGGY]  n  =  left.getType();  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getType();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getType();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  	54	None	replace
100	[BUG]  [BUGGY]  n.addChildToFront(newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(newNode);	  n.addChildToFront(right);    	non-compiled	[CE]  	43	None	replace
101	[BUG]  [BUGGY]  n.addChildToFront(right,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(right,  newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(right,  newNode);	  n.addChildToFront(right);    	non-compiled	[CE]  	43	None	replace
102	[BUG]  [BUGGY]  n.addChildToFront(left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(left);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(left);	  n.addChildToFront(right);    	non-compiled	[CE]  	43	None	replace
103	[BUG]  [BUGGY]  n.addChildToFront(right,  result);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(right,  result);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(right,  result);	  n.addChildToFront(right);    	non-compiled	[CE]  	43	None	replace
104	[BUG]  [BUGGY]  n.addChildToFront(new  Node(left,  right));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(new  Node(left,  right));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(new  Node(left,  right));	  n.addChildToFront(right);    	non-compiled	[CE]  	43	None	replace
105	[BUG]  [BUGGY]  n.removeChild(result);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.removeChild(result);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.removeChild(result);	  n.removeChild(right);    	non-compiled	[CE]  	33	None	replace
106	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.removeChild(left);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.removeChild(left);	  n.removeChild(right);    	non-compiled	[CE]  	33	None	replace
107	[BUG]  [BUGGY]  n.replaceChild(left,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.replaceChild(left,  right);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.replaceChild(left,  right);	  n.removeChild(right);    	non-compiled	[CE]  	33	None	replace
108	[BUG]  [BUGGY]  n.removeChild(newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.removeChild(newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.removeChild(newNode);	  n.removeChild(right);    	non-compiled	[CE]  	33	None	replace
109	[BUG]  [BUGGY]  n.removeChild(right,  result);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.removeChild(right,  result);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.removeChild(right,  result);	  n.removeChild(right);    	non-compiled	[CE]  	33	None	replace
110	[BUG]  [BUGGY]  n.replaceChild(left,  newNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.replaceChild(left,  newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.replaceChild(left,  newNode);	  n.removeChild(right);    	non-compiled	[CE]  	33	None	replace
111	[BUG]  [BUGGY]  result  =  lhType  ==  n,  rhType;  break;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n,  rhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n,  rhType;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	4	None	replace
112	[BUG]  [BUGGY]  result  =  rhType  ==  lhType  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  lhType  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  lhType  +  1;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  	11	None	replace
113	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  3;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  3;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType  +  3;	  result    =    lhType    ==    rhType    +    1;    	non-compiled	[CE]  	11	None	replace
114	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getType();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getType();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
115	[BUG]  [BUGGY]  result  =  rhType  ==  lhType.getType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  lhType.getType();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  lhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
116	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getValue();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.getValue();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
117	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getReturnType();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getReturnType();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.getReturnType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
118	[BUG]  [BUGGY]  n.addChildToFront(ln);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(ln);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(ln);	  n.addChildToFront(result);    	non-compiled	[CE]  	42	None	replace
119	[BUG]  [BUGGY]  n.addChildToFront(result,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(result,  left);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(result,  left);	  n.addChildToFront(result);    	non-compiled	[CE]  	42	None	replace
120	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType!=  n;  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType!=  n;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType!=  n;  break;	  case    Token.CALL:    result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  	55	None	replace
121	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  ||  right.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.VAR)    {    break;    }    	non-compiled	[CE]  	49	None	replace
122	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  right.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.VAR)    {    break;    }    	non-compiled	[CE]  	49	None	replace
123	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  ||  right.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.VAR)    {    break;    }    	non-compiled	[CE]  	49	None	replace
124	[BUG]  [BUGGY]  n.addChildToBack(left,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(left,  right);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(left,  right);	  n.addChildToBack(right,    result);    	non-compiled	[CE]  	15	None	replace
125	[BUG]  [BUGGY]  n.addChildToBack(left,  result);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(left,  result);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(left,  result);	  n.addChildToBack(right,    result);    	non-compiled	[CE]  	15	None	replace
126	[BUG]  [BUGGY]  n.addChildToBack(newNode,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(newNode,  right);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(newNode,  right);	  n.addChildToBack(right,    result);    	non-compiled	[CE]  	15	None	replace
127	[BUG]  [BUGGY]  n.addChildToBack(result,  right);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(result,  right);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(result,  right);	  n.addChildToBack(right,    result);    	non-compiled	[CE]  	15	None	replace
128	[BUG]  [BUGGY]  n.addChildToBack(newNode,  result);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(newNode,  result);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(newNode,  result);	  n.addChildToBack(right,    result);    	non-compiled	[CE]  	15	None	replace
129	[BUG]  [BUGGY]  result  =  result  ==  null  ||!result.equals(right))  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  ||!result.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  ||!result.equals(right))  {  break;  }	  if(result    ==    null    ||!result.equals(right))    {    break;    }    	non-compiled	[CE]  	3	None	replace
130	[BUG]  [BUGGY]  result  =  right  ==  null  ||!result.equals(right))  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  right  ==  null  ||!result.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  right  ==  null  ||!result.equals(right))  {  break;  }	  if(result    ==    null    ||!result.equals(right))    {    break;    }    	non-compiled	[CE]  	3	None	replace
131	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left  ==  null  ||  right!=  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left  ==  null  ||  right!=  null)  {  break;  }	  if(left!=    null    ||    right!=    null)    {    break;    }    	non-compiled	[CE]  	36	None	replace
132	[BUG]  [BUGGY]  if(right!=  null  ||  left!=  null)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  ||  left!=  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  ||  left!=  null)  {  break;  }	  if(left!=    null    ||    right!=    null)    {    break;    }    	non-compiled	[CE]  	36	None	replace
133	[BUG]  [BUGGY]  if(right  ==  null  ||  left!=  null)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right  ==  null  ||  left!=  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null  ||  left!=  null)  {  break;  }	  if(left!=    null    ||    right!=    null)    {    break;    }    	non-compiled	[CE]  	36	None	replace
134	[BUG]  [BUGGY]  n.addChildToBack(right,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(right,  left);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(right,  left);	  n.addChildToBack(left);    	non-compiled	[CE]  	14	None	replace
135	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right),  result  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  right),  result  +  1);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right),  result  +  1);	  n.addChildToBack(new    Node(left,    right),    result);    	non-compiled	[CE]  	34	None	replace
136	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right),  this);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  right),  this);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right),  this);	  n.addChildToBack(new    Node(left,    right),    result);    	non-compiled	[CE]  	34	None	replace
137	[BUG]  [BUGGY]  n.addChildToBack(new  Node(right,  left),  result);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(right,  left),  result);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(right,  left),  result);	  n.addChildToBack(new    Node(left,    right),    result);    	non-compiled	[CE]  	34	None	replace
138	[BUG]  [BUGGY]  result  =  lhType  >>  n;  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  n;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  n;  break;	  result    =    lhType    >=    rhType;    break;    	non-compiled	[CE]  	7	None	replace
139	[BUG]  [BUGGY]  if(result!=  null  &&!result.equals(lhType))  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  &&!result.equals(lhType))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.equals(lhType))  {  break;  }	  if(result!=    null    &&!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	45	None	replace
140	[BUG]  [BUGGY]  if(result  ==  null  &&!result.equals(rhType))  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  &&!result.equals(rhType))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  &&!result.equals(rhType))  {  break;  }	  if(result!=    null    &&!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	45	None	replace
141	[BUG]  [BUGGY]  if(lhType  ==  null)  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(lhType  ==  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(lhType  ==  null)  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  	30	None	replace
142	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right),  compareResult);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  right),  compareResult);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right),  compareResult);	  n.addChildToBack(new    Node(left,    right),    result);    	non-compiled	[CE]  	34	None	replace
143	[BUG]  [BUGGY]  if(left!=  null  ||  left.equals(right))  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  ||  left.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  ||  left.equals(right))  {  break;  }	  if(left    ==    null)    {    break;    }    	non-compiled	[CE]  	37	None	replace
144	[BUG]  [BUGGY]  result  =  rhType  >>  lhType;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  >>  lhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  >>  lhType;	  result    =    lhType!=    n;    	non-compiled	[CE]  	20	None	replace
145	[BUG]  [BUGGY]  n  =  left.removeFirstChild()  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.removeFirstChild()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeFirstChild()  +  1;	  n    =    left.removeFirstChild();    	non-compiled	[CE]  	32	None	replace
146	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
147	[BUG]  [BUGGY]  if(right  ==  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right  ==  null  &&  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null  &&  right.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
148	[BUG]  [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  rhType.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
149	[BUG]  [BUGGY]  result  =  lhType!=  n.restrictByNotNullOrUndefined();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  n.restrictByNotNullOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  n.restrictByNotNullOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
150	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrUndefined();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
151	[BUG]  [BUGGY]  n  =  left.removeFirst();  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.removeFirst();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeFirst();  break;	  n    =    left.getNext();    break;    	non-compiled	[CE]  	53	None	replace
152	[BUG]  [BUGGY]  result  =  lhType  >>  n  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  n  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  n  +  1;	  result    =    lhType    ==    n;    	non-compiled	[CE]  	10	None	replace
153	[BUG]  [BUGGY]  n  =  right!=  null?  left.getNext()  :  right.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right!=  null?  left.getNext()  :  right.getNext();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right!=  null?  left.getNext()  :  right.getNext();	  n    =    right.getNext();    	non-compiled	[CE]  	27	None	replace
154	[BUG]  [BUGGY]  n  =  right!=  null?  right.getNext()  :  left.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right!=  null?  right.getNext()  :  left.getNext();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right!=  null?  right.getNext()  :  left.getNext();	  n    =    right.getNext();    	non-compiled	[CE]  	27	None	replace
155	[BUG]  [BUGGY]  n  =  right!=  null?  left.getFirstChild()  :  right.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  right!=  null?  left.getFirstChild()  :  right.getNext();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  right!=  null?  left.getFirstChild()  :  right.getNext();	  n    =    right.getNext();    	non-compiled	[CE]  	27	None	replace
156	[BUG]  [BUGGY]  result  =  lhType  >>  rhType  +  2;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  rhType  +  2;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  rhType  +  2;	  result    =    lhType    >>    rhType    +    1;    	non-compiled	[CE]  	41	None	replace
157	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  >>  rhType;  break;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  >>  rhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType  >>  rhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	52	None	replace
158	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhType  >>  n;  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhType  >>  n;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhType  >>  n;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	52	None	replace
159	[BUG]  [BUGGY]  Case  Token.CALL:  result  =  lhType  ==  rhType;  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  Case  Token.CALL:  result  =  lhType  ==  rhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	Case  Token.CALL:  result  =  lhType  ==  rhType;  break;	  case    Token.CALL:    result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  	55	None	replace
160	[BUG]  [BUGGY]  result  =  lhType  ==  val;  break;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  val;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  val;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	4	None	replace
161	[BUG]  [BUGGY]  result  =  lhType!=  rhType.getType();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  rhType.getType();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  rhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
162	[BUG]  [BUGGY]  result  =  lhType  >>  rhType.getType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  rhType.getType();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  rhType.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
163	[BUG]  [BUGGY]  result  =  rhType  ==  n.getType();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  n.getType();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  n.getType();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
164	[BUG]  [BUGGY]  result  =  lhType  ==  n.getType();  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  n.getType();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  n.getType();  break;	  result    =    lhType    >=    rhType;    break;    	non-compiled	[CE]  	7	None	replace
165	[BUG]  [BUGGY]  n.removeChildToBack(new  Node(left,  right));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.removeChildToBack(new  Node(left,  right));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.removeChildToBack(new  Node(left,  right));	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
166	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.replaceChild(n,  newNode);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.replaceChild(n,  newNode);	  n    =    left.getLastChild();    	non-compiled	[CE]  	25	None	replace
167	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
168	[BUG]  [BUGGY]  if(right  ==  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right  ==  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null  &&  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
169	[BUG]  [BUGGY]  Result  =  lhType  ==  rhType;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  Result  =  lhType  ==  rhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	Result  =  lhType  ==  rhType;	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  	19	None	replace
170	[BUG]  [BUGGY]  result  =  lhType  ==  rhReflection;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhReflection;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhReflection;	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  	19	None	replace
171	[BUG]  [BUGGY]  if(result  ==  null  &&!result.equals(right))  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  &&!result.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  &&!result.equals(right))  {  break;  }	  if(result!=    null    &&!result.equals(right))    {    break;    }    	non-compiled	[CE]  	46	None	replace
172	[BUG]  [BUGGY]  if(result!=  null  &&!result.equals(left))  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  &&!result.equals(left))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.equals(left))  {  break;  }	  if(result!=    null    &&!result.equals(right))    {    break;    }    	non-compiled	[CE]  	46	None	replace
173	[BUG]  [BUGGY]  if(result!=  null  ||!result.equals(ln))  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  ||!result.equals(ln))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  ||!result.equals(ln))  {  break;  }	  if(result    ==    null    ||!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	39	None	replace
174	[BUG]  [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left!=  null?  left.getLastChild()  :  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	24	None	replace
175	[BUG]  [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	24	None	replace
176	[BUG]  [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  right.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  right.getLastChild();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left!=  null?  left.getLastChild()  :  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	24	None	replace
177	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  break;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.removeFirstChild();  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.removeFirstChild();  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  	54	None	replace
178	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.replaceChild(left,  newNode);  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.replaceChild(left,  newNode);  break;	  n    =    left.getFirstChild();    break;    	non-compiled	[CE]  	54	None	replace
179	[BUG]  [BUGGY]  result  =  lhType  >>  value;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  value;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  value;	  result    =    lhType    ==    val;    	non-compiled	[CE]  	31	None	replace
180	[BUG]  [BUGGY]  result  =  lhType!=  value;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  value;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  value;	  result    =    lhType    ==    val;    	non-compiled	[CE]  	31	None	replace
181	[BUG]  [BUGGY]  result  =  rhType  ==  rhType;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  rhType  ==  rhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  rhType  ==  rhType;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  	12	None	replace
182	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  left.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.VAR)    {    break;    }    	non-compiled	[CE]  	49	None	replace
183	[BUG]  [BUGGY]  if(right  ==  null  &&  right.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right  ==  null  &&  right.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null  &&  right.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.VAR)    {    break;    }    	non-compiled	[CE]  	49	None	replace
184	[BUG]  [BUGGY]  n  =  left!=  null?  left.getNext()  :  left.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left!=  null?  left.getNext()  :  left.getNext();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left!=  null?  left.getNext()  :  left.getNext();	  n    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
185	[BUG]  [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left!=  null?  left.getLastChild()  :  left.getNext();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left!=  null?  left.getLastChild()  :  left.getNext();	  n    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
186	[BUG]  [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left!=  null?  left.getFirstChild()  :  left.getNext();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left!=  null?  left.getFirstChild()  :  left.getNext();	  n    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
187	[BUG]  [BUGGY]  n.addChildToBack(result,  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(result,  left);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(result,  left);	  n.addChildToBack(right,    result);    	non-compiled	[CE]  	15	None	replace
188	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(left))  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.equals(left))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(left))  {  break;  }	  if(result    ==    null    ||!result.equals(right))    {    break;    }    	non-compiled	[CE]  	3	None	replace
189	[BUG]  [BUGGY]  result  =  result  ==  null  &&!result.equals(right))  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  &&!result.equals(right))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  &&!result.equals(right))  {  break;  }	  if(result    ==    null    ||!result.equals(right))    {    break;    }    	non-compiled	[CE]  	3	None	replace
190	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getFirstChild().getNext();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getFirstChild().getNext();	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  	23	None	replace
191	[BUG]  [BUGGY]  n  =  left.getNumber()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.getNumber()  +  1;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.getNumber()  +  1;	  n    =    left.getNext()    +    1;    	non-compiled	[CE]  	23	None	replace
192	[BUG]  [BUGGY]  result  =  lhType  >>  n  +  1;  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  >>  n  +  1;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  >>  n  +  1;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  	9	None	replace
193	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  right!=  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  right!=  null)  {  break;  }	  if(left!=    null    ||    right!=    null)    {    break;    }    	non-compiled	[CE]  	36	None	replace
194	[BUG]  [BUGGY]  if(right!=  null  ||  right!=  null)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  ||  right!=  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  ||  right!=  null)  {  break;  }	  if(left!=    null    ||    right!=    null)    {    break;    }    	non-compiled	[CE]  	36	None	replace
195	[BUG]  [BUGGY]  if(result!=  null  &&!result.equals(ln))  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  &&!result.equals(ln))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.equals(ln))  {  break;  }	  if(result!=    null    &&!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	45	None	replace
196	[BUG]  [BUGGY]  result  =  result  ==  null  ||!result.isUndefined())  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  ||!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  ||!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
197	[BUG]  [BUGGY]  result  =  result  ==  null  &&!result.isUndefined())  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  &&!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  &&!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
198	[BUG]  [BUGGY]  result  =  lhType  ==  rhType,  n;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType,  n;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType,  n;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	21	None	replace
199	[BUG]  [BUGGY]  result  =  result  ==  null  &&!result.isNaN())  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result  ==  null  &&!result.isNaN())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result  ==  null  &&!result.isNaN())  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  	38	None	replace
200	[BUG]  [BUGGY]  if(result  ==  null  &&!result.isEmpty())  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  &&!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  &&!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	44	None	replace
201	[BUG]  [BUGGY]  result  =  result!=  null  ||!result.isEmpty())  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  result!=  null  ||!result.isEmpty())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  result!=  null  ||!result.isEmpty())  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	44	None	replace
202	[BUG]  [BUGGY]  result  =  lhType  [Delete]  rhType;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  [Delete]  rhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  [Delete]  rhType;	  result    =    lhType    >>    n;    	non-compiled	[CE]  	28	None	replace
203	[BUG]  [BUGGY]  if(result!=  null  &&!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  &&!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }	  if(result!=    null    &&!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	44	None	replace
204	[BUG]  [BUGGY]  n.addChildToBack(new  Node(result,  left,  right));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(result,  left,  right));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(result,  left,  right));	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
205	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  left));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  left));  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  left));	  n.addChildToBack(new    Node(left,    right));    	non-compiled	[CE]  	18	None	replace
206	[BUG]  [BUGGY]  result  =  lhClass  ==  rhType;  break;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhClass  ==  rhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhClass  ==  rhType;  break;	  result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  	5	None	replace
207	[BUG]  [BUGGY]  if(rhType!=  null  ||  lhType  ==  rhType)  {  break;  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(rhType!=  null  ||  lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(rhType!=  null  ||  lhType  ==  rhType)  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  	30	None	replace
208	[BUG]  [BUGGY]  if(rhType!=  null  &&  rhType.equals( "null "))  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(rhType!=  null  &&  rhType.equals( "null "))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(rhType!=  null  &&  rhType.equals( "null "))  {  break;  }	  if(rhType!=    null)    {    break;    }    	non-compiled	[CE]  	30	None	replace
209	[BUG]  [BUGGY]  Result  =  lhType!=  rhType;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  Result  =  lhType!=  rhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	Result  =  lhType!=  rhType;	  result    =    rhType    ==    lhType;    	non-compiled	[CE]  	19	None	replace
210	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lhClass  ==  rhType;  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  case  Token.CALL:  result  =  lhClass  ==  rhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	case  Token.CALL:  result  =  lhClass  ==  rhType;  break;	  case    Token.CALL:    result    =    lhType!=    rhType;    break;    	non-compiled	[CE]  	55	None	replace
211	[BUG]  [BUGGY]  n.addChildToBack(new  Node(left,  right),  result,  rn);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToBack(new  Node(left,  right),  result,  rn);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToBack(new  Node(left,  right),  result,  rn);	  n.addChildToBack(new    Node(left,    right),    result);    	non-compiled	[CE]  	34	None	replace
212	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left  ==  null  ||  left.getType()!=  Token.FUNCTION)  {  break;  }	  if(left    ==    null)    {    break;    }    	non-compiled	[CE]  	37	None	replace
213	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(null))  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.equals(null))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(null))  {  break;  }	  if(result    ==    null    ||!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	39	None	replace
214	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(node))  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.equals(node))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(node))  {  break;  }	  if(result    ==    null    ||!result.equals(rhType))    {    break;    }    	non-compiled	[CE]  	39	None	replace
215	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
216	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  left.getType()  ==  Token.NAME)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
217	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
218	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	48	None	replace
219	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.VAR)    {    break;    }    	non-compiled	[CE]  	49	None	replace
220	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.VAR)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  left.getType()  ==  Token.VAR)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.VAR)    {    break;    }    	non-compiled	[CE]  	49	None	replace
221	[BUG]  [BUGGY]  result  =  lhType  ==  NE;  break;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  NE;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  NE;  break;	  result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	4	None	replace
222	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.replaceChild(left,  n);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.replaceChild(left,  n);	  n    =    left.removeFirstChild();    	non-compiled	[CE]  	32	None	replace
223	[BUG]  [BUGGY]  result  =  lhType!=  n,  rhType;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  n,  rhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  n,  rhType;	  result    =    lhType    ==    n,    rhType;    	non-compiled	[CE]  	21	None	replace
224	[BUG]  [BUGGY]  result  =  lhType!=  rhType  +  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType!=  rhType  +  2;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType!=  rhType  +  2;	  result    =    lhType!=    rhType    +    1;    	non-compiled	[CE]  	40	None	replace
225	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.getName();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.getName();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.getName();	  result    =    lhType    ==    n.getType();    	non-compiled	[CE]  	29	None	replace
226	[BUG]  [BUGGY]  n.addChildToFront(rh);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n.addChildToFront(rh);  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n.addChildToFront(rh);	  n.addChildToFront(result);    	non-compiled	[CE]  	42	None	replace
227	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right  ==  null  ||  right.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
228	[BUG]  [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(right!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(right!=  null  &&  left.getType()  ==  Token.FUNCTION)  {  break;  }	  if(right!=    null    &&    right.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	47	None	replace
229	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType!=  rhType)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  lhType!=  rhType)  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	2	None	replace
230	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isEmpty()  ||  lhType  ==  rhType)  {  break;  }	  if(result    ==    null    ||!result.isEmpty())    {    break;    }    	non-compiled	[CE]  	2	None	replace
231	[BUG]  [BUGGY]  result  =  lhType  ==  rhType;  break;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType;  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType;  break;  }	  result    =    lhType    >=    rhType;    break;    	non-compiled	[CE]  orphaned  case	7	None	replace
232	[BUG]  [BUGGY]  Case  Token.CALL:  result  =  lhType!=  rhType;  break;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  Case  Token.CALL:  result  =  lhType!=  rhType;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	Case  Token.CALL:  result  =  lhType!=  rhType;  break;	  case    Token.CALL:    result    =    lhType    ==    rhType;    break;    	non-compiled	[CE]  	52	None	replace
233	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUndefined()  ||  lhType!=  rhType)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUndefined()  ||  lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isUndefined()  ||  lhType!=  rhType)  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
234	[BUG]  [BUGGY]  if(result!=  null  &&!result.isUndefined())  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result!=  null  &&!result.isUndefined())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result!=  null  &&!result.isUndefined())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
235	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isNull())  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isNull())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isNull())  {  break;  }	  if(result    ==    null    ||!result.isUndefined())    {    break;    }    	non-compiled	[CE]  	51	None	replace
236	[BUG]  [BUGGY]  result  =  lhType  ==  rhType  +  3;  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType  +  3;  break;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType  +  3;  break;	  result    =    lhType    ==    rhType    +    1;    break;    	non-compiled	[CE]  	9	None	replace
237	[BUG]  [BUGGY]  if(left!=  null  &&  right  ==  null)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(left!=  null  &&  right  ==  null)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(left!=  null  &&  right  ==  null)  {  break;  }	  if(left!=    null)    {    break;    }    	non-compiled	[CE]  	35	None	replace
238	[BUG]  [BUGGY]  n  =  left.cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  n  =  left.cloneTree();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	n  =  left.cloneTree();	  n    =    left.removeFirst();    	non-compiled	[CE]  	50	None	replace
239	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isNaN()  ||  lhType!=  rhType)  {  break;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isNaN()  ||  lhType!=  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isNaN()  ||  lhType!=  rhType)  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  	38	None	replace
240	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isNaN()  ||  lhType  ==  rhType)  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isNaN()  ||  lhType  ==  rhType)  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isNaN()  ||  lhType  ==  rhType)  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  	38	None	replace
241	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknownType())  {  break;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUnknownType())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isUnknownType())  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  	38	None	replace
242	[BUG]  [BUGGY]  if(result  ==  null  ||!result.isUnknown())  {  break;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.isUnknown())  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.isUnknown())  {  break;  }	  if(result    ==    null    ||!result.isNaN())    {    break;    }    	non-compiled	[CE]  	38	None	replace
243	[BUG]  [BUGGY]  result  =  lhClass  ==  rhType;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhClass  ==  rhType;  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhClass  ==  rhType;	  result    =    rhType!=    lhType;    	non-compiled	[CE]  	12	None	replace
244	[BUG]  [BUGGY]  if(result  ==  null  ||!result.equals(n))  {  break;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  if(result  ==  null  ||!result.equals(n))  {  break;  }  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	if(result  ==  null  ||!result.equals(n))  {  break;  }	  if(result    ==    null    ||!result.equals(right))    {    break;    }    	non-compiled	[CE]  	3	None	replace
245	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
246	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
247	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
248	[BUG]  [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  switch  (op)  {  case  Token.SHEQ:  case  Token.EQ:  result  =  lhType  ==  rhType;  break;  case  Token.SHNE:  case  Token.NE:  result  =  lhType  !=  rhType;      [BUGGY]  result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();  [BUGGY]        case  Token.GE:  case  Token.LE:  case  Token.GT:  case  Token.LT:  Boolean  compareResult  =  compareAsNumbers(op,  left,  right);  if  (compareResult  !=  null)  {  result  =  compareResult;  }  else  {  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.8164965809277261	941	941	3	replace	result  =  lhType  ==  rhType.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined();	  result    =    lhType    ==    rhType.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	22	None	replace
