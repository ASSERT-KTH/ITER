bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareResult(n,  rightLiteral);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  rightLiteral);	  result    =    compareResult(left,    rightLiteral);    	non-compiled	[CE]  	71	None	replace
2	[BUG]  [BUGGY]  result  =  compareResult(right,  leftLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  leftLiteral);	  result    =    compareResult(left,    rightLiteral);    	non-compiled	[CE]  	71	None	replace
3	[BUG]  [BUGGY]  result  =  compareResult(left,  rightLiteral,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  rightLiteral,  n);	  result    =    compareResult(left,    rightLiteral);    	non-compiled	[CE]  	71	None	replace
4	[BUG]  [BUGGY]  result  =  compareResult(left,  rightLiteral,  undefinedRight);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  rightLiteral,  undefinedRight);	  result    =    compareResult(left,    rightLiteral);    	non-compiled	[CE]  	71	None	replace
5	[BUG]  [BUGGY]  result  =  compareResultToUndefined(n,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(n,  right);	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
6	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  left);	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
7	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left.getLastChild());	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
8	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left.cloneTree());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left.cloneTree());	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
9	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left.next);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left.next);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left.next);	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
10	[BUG]  [BUGGY]  result  =  compareResult(n,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  left);	  result    =    compareResult(n,    right);    	non-compiled	[CE]  	36	None	replace
11	[BUG]  [BUGGY]  result  =  compareResult(right,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  n);	  result    =    compareResult(n,    right);    	non-compiled	[CE]  	36	None	replace
12	[BUG]  [BUGGY]  result  =  compareResult(rightLiteral,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(rightLiteral,  n);	  result    =    compareResult(n,    right);    	non-compiled	[CE]  	36	None	replace
13	[BUG]  [BUGGY]  result  =  compareResult(n,  left.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  left.getLastChild());	  result    =    compareResult(n,    right);    	non-compiled	[CE]  	36	None	replace
14	[BUG]  [BUGGY]  result  =  compareResult(n,  left.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  left.getString());	  result    =    compareResult(n,    right);    	non-compiled	[CE]  	36	None	replace
15	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.node,  rightLiteral);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.node,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.node,  rightLiteral);	  result    =    compareToUndefined(right,    left.node,    rightLiteral);    	non-compiled	[CE]  	26	None	replace
16	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.node,  undefinedRight);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.node,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.node,  undefinedRight);	  result    =    compareToUndefined(right,    left.node,    rightLiteral);    	non-compiled	[CE]  	26	None	replace
17	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.node,  rightLiteral);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.node,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.node,  rightLiteral);	  result    =    compareToUndefined(right,    left.node,    rightLiteral);    	non-compiled	[CE]  	26	None	replace
18	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node,  rightLiteral,  undefinedRight);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.node,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node,  rightLiteral,  undefinedRight);	  result    =    compareToUndefined(right,    left.node,    rightLiteral);    	non-compiled	[CE]  	26	None	replace
19	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node,  rightLiteral,  undefinedLeft);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.node,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    left.node,    rightLiteral);    	non-compiled	[CE]  	26	None	replace
20	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.node,  undefinedLeft);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.node,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.node,  undefinedLeft);	  result    =    compareToUndefined(right,    left.node,    rightLiteral);    	non-compiled	[CE]  	26	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.node,  undefinedRight);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.node,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.node,  undefinedRight);	  result    =    compareToUndefined(right,    left.node,    undefinedRight);    	non-compiled	[CE]  	29	None	replace
22	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.node,  undefinedLeft);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right.node,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.node,  undefinedLeft);	  result    =    compareToUndefined(right,    left.node,    undefinedRight);    	non-compiled	[CE]  	29	None	replace
23	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedRight  +  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedRight  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node,  undefinedRight  +  1);	  result    =    compareToUndefined(right,    left.node,    undefinedRight);    	non-compiled	[CE]  	29	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Compiler());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Compiler());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  Compiler());	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(),  rightLiteral);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  Compiler(),  rightLiteral);	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  Compiler());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  Compiler());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  Compiler());	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(),  right);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  Compiler(),  right);	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  Compiler());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  Compiler());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  Compiler());	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
29	[BUG]  [BUGGY]  result  =  comparisonToUndefined(rightLiteral,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(rightLiteral,  n);	  result    =    comparisonToUndefined(right,    op);    	non-compiled	[CE]  	18	None	replace
30	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  undefinedLeft);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  	52	None	replace
31	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  	52	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedRight);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  rightLiteral,  undefinedRight);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  	52	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left,  undefinedRight);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  	52	None	replace
34	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  	52	None	replace
35	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  undefinedLeft);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  rightLiteral,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
36	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  left,  undefinedLeft);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  left,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  left,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
37	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left,  undefinedLeft);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
38	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left,  undefinedRight);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
39	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  right,  undefinedLeft);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  right,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  right,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
40	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  undefinedLeft);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  rightLiteral,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
41	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
42	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
43	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
44	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
45	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  rightLiteral);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.getString(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.getString(),  rightLiteral);	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
46	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right.getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
47	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  right.getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatToUndefined(left,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatToUndefined(left,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
48	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  rightLiteral,  false);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
49	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  true);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  true);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
50	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  false);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
51	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left,  false);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
52	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left,  false);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
53	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  right,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  right,  false);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
54	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  true);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  true);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  rightLiteral,  true);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
55	[BUG]  [BUGGY]  result  =  compareResult(right,  left,  rightLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left,  rightLiteral);	  result    =    compareResult(right,    left);    	non-compiled	[CE]  	35	None	replace
56	[BUG]  [BUGGY]  result  =  compareResult(right,  left,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left,  false);	  result    =    compareResult(right,    left);    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  result  =  compareResult(right,  left,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left,  n);	  result    =    compareResult(right,    left);    	non-compiled	[CE]  	35	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  rightLiteral));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  this));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  this));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  this));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  right));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(n,  new  NodeTraversal()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(n,  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(n,  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  false));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  false));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  false));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  rightLiteral));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  rightLiteral));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  this));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  this));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  this));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  right));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  right));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  false));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  false));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  false));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(this,  left,  newNodeTraversal()));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(this,  left,  newNodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(this,  left,  newNodeTraversal()));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left,  rightLiteral));  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left,  rightLiteral));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
72	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.removeChild(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.removeChild(right);	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
73	[BUG]  [BUGGY]  n.removeChild(rightLiteral);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.removeChild(rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.removeChild(rightLiteral);	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
74	[BUG]  [BUGGY]  n.replaceChild(left,  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.replaceChild(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.replaceChild(left,  right);	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
75	[BUG]  [BUGGY]  n.replaceChild(left,  newNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.replaceChild(left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.replaceChild(left,  newNode);	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
76	[BUG]  [BUGGY]  n.addChildToFront(right);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.addChildToFront(right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.addChildToFront(right);	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal(left,  right)));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal(left,  right)));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal(left,  right)));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  right)));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  right)));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  right)));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  rightLiteral)));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  rightLiteral)));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  rightLiteral)));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(n,  right)));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(n,  right)));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(n,  right)));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  this));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  this));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  this));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal(left,  left)));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal(left,  left)));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal(left,  left)));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
83	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left,  rightLiteral);	  result    =    compareToUndefined(right,    left,    rightLiteral);    	non-compiled	[CE]  	20	None	replace
84	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral,  undefinedLeft);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    left,    rightLiteral);    	non-compiled	[CE]  	20	None	replace
85	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  rightLiteral,  undefinedRight);	  result    =    compareToUndefined(right,    left,    rightLiteral);    	non-compiled	[CE]  	20	None	replace
86	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  rightLiteral,  n);	  result    =    compareToUndefined(right,    left,    rightLiteral);    	non-compiled	[CE]  	20	None	replace
87	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  leftLocation);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  leftLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  leftLocation);	  result    =    compareToUndefined(n,    leftLocation);    	non-compiled	[CE]  	31	None	replace
88	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  leftLocation);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  leftLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  leftLocation);	  result    =    compareToUndefined(n,    leftLocation);    	non-compiled	[CE]  	31	None	replace
89	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  rightLiteral,  n);	  result    =    compareToUndefined(right,    left,    n);    	non-compiled	[CE]  	66	None	replace
90	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left,  right);	  result    =    compareToUndefined(right,    left,    n);    	non-compiled	[CE]  	66	None	replace
91	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  right);	  result    =    compareToUndefined(right,    left,    n);    	non-compiled	[CE]  	66	None	replace
92	[BUG]  [BUGGY]  result  =  compareResult(n,  left.getNext());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  left.getNext());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  left.getNext());	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
93	[BUG]  [BUGGY]  result  =  compareResult(left,  right.getNext());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  right.getNext());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  right.getNext());	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
94	[BUG]  [BUGGY]  result  =  compareResult(right,  left.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.getLastChild());	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
95	[BUG]  [BUGGY]  result  =  compareResult(right,  right.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  right.getLastChild());	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
96	[BUG]  [BUGGY]  result  =  compareResult(right,  left.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.getFirstChild());	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
97	[BUG]  [BUGGY]  result  =  compareResult(right,  left.getNext(),  rightLiteral);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.getNext(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.getNext(),  rightLiteral);	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
98	[BUG]  [BUGGY]  result  =  compareResult(right,  right.getNext());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  right.getNext());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  right.getNext());	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
99	[BUG]  [BUGGY]  result  =  compareResult(left,  leftLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  leftLiteral);	  result    =    compareResult(right,    rightLiteral);    	non-compiled	[CE]  	37	None	replace
100	[BUG]  [BUGGY]  result  =  compareResult(result,  rightLiteral);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(result,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(result,  rightLiteral);	  result    =    compareResult(right,    rightLiteral);    	non-compiled	[CE]  	37	None	replace
101	[BUG]  [BUGGY]  result  =  compareResult(n,  left.next());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  left.next());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  left.next());	  result    =    compareResult(right,    left.next());    	non-compiled	[CE]  	90	None	replace
102	[BUG]  [BUGGY]  result  =  compareResult(left,  right.next());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  right.next());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  right.next());	  result    =    compareResult(right,    left.next());    	non-compiled	[CE]  	90	None	replace
103	[BUG]  [BUGGY]  result  =  compareResult(right,  right.next());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  right.next());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  right.next());	  result    =    compareResult(right,    left.next());    	non-compiled	[CE]  	90	None	replace
104	[BUG]  [BUGGY]  result  =  compareResult(right,  left.next(),  rightLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.next(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.next(),  rightLiteral);	  result    =    compareResult(right,    left.next());    	non-compiled	[CE]  	90	None	replace
105	[BUG]  [BUGGY]  result  =  compareResult(n,  right.next());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  right.next());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  right.next());	  result    =    compareResult(right,    left.next());    	non-compiled	[CE]  	90	None	replace
106	[BUG]  [BUGGY]  result  =  compareResult(right,  rightLiteral.next());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  rightLiteral.next());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  rightLiteral.next());	  result    =    compareResult(right,    left.next());    	non-compiled	[CE]  	90	None	replace
107	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  rightLiteral,  false);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
108	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  true);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  rightLiteral,  true);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
109	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left,  false);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
110	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  right,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  right,  false);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
111	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  left,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  left,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  left,  false);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
112	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  rightLiteral,  false);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
113	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  leftLiteral,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  leftLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  leftLiteral,  false);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
114	[BUG]  [BUGGY]  result  =  compareToUndefined(leftLiteral,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(leftLiteral,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(leftLiteral,  right);	  result    =    compareToUndefined(rightLiteral,    right);    	non-compiled	[CE]  	89	None	replace
115	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left,  undefinedRight);	  result    =    compareToUndefined(right,    left,    undefinedRight);    	non-compiled	[CE]  	21	None	replace
116	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left,  undefinedRight);	  result    =    compareToUndefined(right,    left,    undefinedRight);    	non-compiled	[CE]  	21	None	replace
117	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right,  undefinedRight);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right,  undefinedRight);	  result    =    compareToUndefined(right,    left,    undefinedRight);    	non-compiled	[CE]  	21	None	replace
118	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  n);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  	6	None	replace
119	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.nextNode());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.nextNode());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.nextNode());	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  	6	None	replace
120	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.next);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.next);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.next);	  result    =    compareToUndefined(right,    n);    	non-compiled	[CE]  	6	None	replace
121	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(n,  left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(n,  left);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
122	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(n,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(n,  right);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
123	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(right,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(right,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(right,  left);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
124	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  right,  n);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
125	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  right,  undefinedRight);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
126	[BUG]  [BUGGY]  result  =  rightLiteral.comparisonToUndefined(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  rightLiteral.comparisonToUndefined(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  rightLiteral.comparisonToUndefined(left,  right);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
127	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  right,  false);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
128	[BUG]  [BUGGY]  result  =  compareResult(left,  right.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  right.getString());	  result    =    compareResult(right,    left.getString());    	non-compiled	[CE]  	91	None	replace
129	[BUG]  [BUGGY]  result  =  compareResult(right,  right.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  right.getString());	  result    =    compareResult(right,    left.getString());    	non-compiled	[CE]  	91	None	replace
130	[BUG]  [BUGGY]  result  =  compareResult(right,  left.getString(),  rightLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.getString(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.getString(),  rightLiteral);	  result    =    compareResult(right,    left.getString());    	non-compiled	[CE]  	91	None	replace
131	[BUG]  [BUGGY]  result  =  compareResult(n,  right.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  right.getString());	  result    =    compareResult(right,    left.getString());    	non-compiled	[CE]  	91	None	replace
132	[BUG]  [BUGGY]  result  =  compareResult(right,  rightLiteral.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  rightLiteral.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  rightLiteral.getString());	  result    =    compareResult(right,    left.getString());    	non-compiled	[CE]  	91	None	replace
133	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  undefinedRight);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  rightLiteral,  undefinedRight);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedRight);    	non-compiled	[CE]  	51	None	replace
134	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  undefinedRight);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedRight);    	non-compiled	[CE]  	51	None	replace
135	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedRight);    	non-compiled	[CE]  	51	None	replace
136	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedRight  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedRight  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  undefinedRight  +  1);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedRight);    	non-compiled	[CE]  	51	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  undefinedRight);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  undefinedRight);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  false);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  right,  leftLiteral);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  right,  leftLiteral);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  null);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  this);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  this);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  reverse);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  reverse);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  reverse);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
143	[BUG]  [BUGGY]  result  =  compareResult(n,  left.nextNode());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  left.nextNode());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  left.nextNode());	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
144	[BUG]  [BUGGY]  result  =  compareResult(left,  right.nextNode());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  right.nextNode());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  right.nextNode());	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
145	[BUG]  [BUGGY]  result  =  compareResult(right,  left.nextNode(),  rightLiteral);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.nextNode(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.nextNode(),  rightLiteral);	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
146	[BUG]  [BUGGY]  result  =  compareResult(n,  right.nextNode());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(n,  right.nextNode());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  right.nextNode());	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
147	[BUG]  [BUGGY]  result  =  compareResult(right,  right.nextNode());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  right.nextNode());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  right.nextNode());	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
148	[BUG]  [BUGGY]  result  =  compareResult(right,  n.nextNode());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  n.nextNode());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  n.nextNode());	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
149	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLocation,  undefinedRight);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  rightLocation,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  rightLocation,  undefinedRight);	  result    =    compareToUndefined(left,    rightLocation,    undefinedRight);    	non-compiled	[CE]  	69	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rightLiteral);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  rightLiteral);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  undefinedRight);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  undefinedRight);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  undefinedRight);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  rightLiteral,  undefinedRight);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  n);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  rightLiteral,  n);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  n);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  n);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  leftLiteral);  [CE]  [FE]                                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  leftLiteral);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
157	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  n);	  result    =    comparisonToUndefined(right,    n);    	non-compiled	[CE]  	17	None	replace
158	[BUG]  [BUGGY]  result  =  comparisonToUndefined(rightLiteral,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(rightLiteral,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(rightLiteral,  left);	  result    =    comparisonToUndefined(right,    n);    	non-compiled	[CE]  	17	None	replace
159	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left.nextNode());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left.nextNode());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left.nextNode());	  result    =    comparisonToUndefined(right,    n);    	non-compiled	[CE]  	17	None	replace
160	[BUG]  [BUGGY]  result  =  compareToLocal(n,  right);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(n,  right);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
161	[BUG]  [BUGGY]  result  =  compareToLocal(n,  left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(n,  left);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
162	[BUG]  [BUGGY]  result  =  compareToLocal(left,  rightLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  rightLiteral);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
163	[BUG]  [BUGGY]  result  =  compareToLocal(right,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(right,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(right,  left);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
164	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(left,  right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  right,  n);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
165	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(left,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  right,  false);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
166	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right,  leftLiteral);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(left,  right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  right,  leftLiteral);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
167	[BUG]  [BUGGY]  result  =  compareResult(rightLiteral,  op);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(rightLiteral,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(rightLiteral,  op);	  result    =    compareResult(n,    op);    	non-compiled	[CE]  	39	None	replace
168	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n,  undefinedRight);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  n,  undefinedRight);	  result    =    compareToUndefined(left,    rightLiteral,    n);    	non-compiled	[CE]  	53	None	replace
169	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n,  undefinedLeft);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  n,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral,    n);    	non-compiled	[CE]  	53	None	replace
170	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left,  n);	  result    =    compareToUndefined(left,    rightLiteral,    n);    	non-compiled	[CE]  	53	None	replace
171	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  rightLiteral,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  rightLiteral,  left);	  result    =    compareToUndefined(left,    rightLiteral,    n);    	non-compiled	[CE]  	53	None	replace
172	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.cloneTree());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
173	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.cloneTree());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
174	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.cloneTree());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.cloneTree());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
175	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.cloneTree());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
176	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral.cloneTree());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral.cloneTree());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
177	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.cloneTree(),  rightLiteral);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.cloneTree(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.cloneTree(),  rightLiteral);	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
178	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.getLastChild());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
179	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.getFirstChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
180	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left.getLastChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
181	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.getLastChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
182	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.getFirstChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
183	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  right.getLastChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
184	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  n.getFirstChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(rightLiteral),  new  NodeTraversal());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(rightLiteral),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(rightLiteral),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  new  NodeTraversal());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal()).traverse(left),  new  NodeTraversal());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal()).traverse(left),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal()).traverse(left),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  rightLiteral,  new  NodeTraversal());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  rightLiteral,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  rightLiteral,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()),  right,  new  NodeTraversal());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()),  right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()),  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right),  new  NodeTraversal());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(left),  new  NodeTraversal());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(left),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(left),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
192	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.node,  undefinedLeft);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.node,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.node,  undefinedLeft);	  result    =    compareToUndefined(right,    left.node,    undefinedLeft);    	non-compiled	[CE]  	80	None	replace
193	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.node,  undefinedRight);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right.node,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.node,  undefinedRight);	  result    =    compareToUndefined(right,    left.node,    undefinedLeft);    	non-compiled	[CE]  	80	None	replace
194	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n.node,  undefinedLeft);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  n.node,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  n.node,  undefinedLeft);	  result    =    compareToUndefined(right,    left.node,    undefinedLeft);    	non-compiled	[CE]  	80	None	replace
195	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  undefinedRight);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  rightLiteral,  undefinedRight);	  result    =    comparisonToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	15	None	replace
196	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  rightLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  rightLiteral);	  result    =    comparisonToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	15	None	replace
197	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  rightLiteral,  n);	  result    =    comparisonToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	15	None	replace
198	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getLocation());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.getLocation());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.getLocation());	  result    =    compareToUndefined(right,    rightLocation);    	non-compiled	[CE]  	32	None	replace
199	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLocation);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  rightLocation);	  result    =    compareToUndefined(right,    rightLocation);    	non-compiled	[CE]  	32	None	replace
200	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedRight);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  right,  undefinedRight);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	2	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  undefinedRight);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  undefinedRight);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  undefinedLeft);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  undefinedLeft);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  this);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  null);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  null);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  false);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  false);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  right,  leftLiteral);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  right,  leftLiteral);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
207	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLocation,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  rightLocation,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  rightLocation,  left);	  result    =    compareToUndefined(left,    rightLocation,    n);    	non-compiled	[CE]  	70	None	replace
208	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  rightLocation);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left,  rightLocation);	  result    =    compareToUndefined(left,    rightLocation,    n);    	non-compiled	[CE]  	70	None	replace
209	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  leftLocation,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  leftLocation,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  leftLocation,  right);	  result    =    compareToUndefined(left,    rightLocation,    n);    	non-compiled	[CE]  	70	None	replace
210	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  rightLiteral);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left,  rightLiteral);	  result    =    compareToUndefined(left,    rightLocation,    n);    	non-compiled	[CE]  	70	None	replace
211	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  undefinedRight);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  	79	None	replace
212	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  	79	None	replace
213	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral,  undefinedRight);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  rightLiteral,  undefinedRight);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
214	[BUG]  [BUGGY]  result  =  compareToUndefined(n.node,  rightLiteral);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n.node,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n.node,  rightLiteral);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
215	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral,  undefinedLeft);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
216	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  right);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
217	[BUG]  [BUGGY]  result  =  compareToUndefined(right.node,  rightLiteral);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right.node,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right.node,  rightLiteral);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
218	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.node,  rightLiteral);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.node,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.node,  rightLiteral);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(token,  rightLiteral));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(token,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(token,  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(token));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(token));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(token));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  token);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  token);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  token);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  token));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
226	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(right,  right);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(right,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(right,  right);	  result    =    this.comparisonToUndefined(left,    op);    	non-compiled	[CE]  	93	None	replace
227	[BUG]  [BUGGY]  result  =  rightLiteral.comparisonToUndefined(left,  op);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  rightLiteral.comparisonToUndefined(left,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  rightLiteral.comparisonToUndefined(left,  op);	  result    =    this.comparisonToUndefined(left,    op);    	non-compiled	[CE]  	93	None	replace
228	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  rightLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  rightLiteral);	  result    =    this.comparisonToUndefined(left,    op);    	non-compiled	[CE]  	93	None	replace
229	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(right,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(right,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(right,  rightLiteral);	  result    =    this.comparisonToUndefined(left,    op);    	non-compiled	[CE]  	93	None	replace
230	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.nextToken());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.nextToken());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.nextToken());	  result    =    compareToUndefined(left,    left.nextToken());    	non-compiled	[CE]  	50	None	replace
231	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.nextToken());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.nextToken());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.nextToken());	  result    =    compareToUndefined(left,    left.nextToken());    	non-compiled	[CE]  	50	None	replace
232	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.nextToken());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right.nextToken());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.nextToken());	  result    =    compareToUndefined(left,    left.nextToken());    	non-compiled	[CE]  	50	None	replace
233	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.nextToken());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.nextToken());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.nextToken());	  result    =    compareToUndefined(left,    left.nextToken());    	non-compiled	[CE]  	50	None	replace
234	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.nextToken(),  rightLiteral);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.nextToken(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.nextToken(),  rightLiteral);	  result    =    compareToUndefined(left,    left.nextToken());    	non-compiled	[CE]  	50	None	replace
235	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right.node);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  right.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  right.node);	  result    =    compareToUndefined(right,    right.node);    	non-compiled	[CE]  	28	None	replace
236	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  right.node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  right.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  right.node);	  result    =    compareToUndefined(right,    right.node);    	non-compiled	[CE]  	28	None	replace
237	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right.node);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right.node);	  result    =    compareToUndefined(right,    right.node);    	non-compiled	[CE]  	28	None	replace
238	[BUG]  [BUGGY]  Result  result  =  compareToUndefined(left,  right.node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  Result  result  =  compareToUndefined(left,  right.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	Result  result  =  compareToUndefined(left,  right.node);	  result    =    compareToUndefined(right,    right.node);    	non-compiled	[CE]  	28	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right),  new  NodeTraversal()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right),  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right),  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  right,  new  NodeTraversal()));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  right,  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  right,  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  right),  new  NodeTraversal()));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  right),  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right,  right),  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal(),  rightLiteral));  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal(),  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal(),  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
245	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedLeft);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  right,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  right,  undefinedLeft);	  result    =    compareToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	3	None	replace
246	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  undefinedLeft);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  	74	None	replace
247	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  undefinedLeft);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  	74	None	replace
248	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.node  -  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.node  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.node  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
249	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.node  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right.node  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.node  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
250	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.node  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  left.node  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.node  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
251	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral  -  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  rightLiteral  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
252	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  right.node  -  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  right.node  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  right.node  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
253	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node  +  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.node  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node  +  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
254	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  rightLiteral);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  rightLiteral);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
255	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  left,  rightLiteral);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  left,  rightLiteral);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
256	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  right,  leftLiteral);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  right,  leftLiteral);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
257	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  leftLiteral,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  leftLiteral,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  leftLiteral,  right);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
258	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRightLiteral);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  undefinedRightLiteral);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
259	[BUG]  [BUGGY]  result  =  compareResultToUndefined(n,  left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(n,  left);	  result    =    compareResultToUndefined(right,    left);    	non-compiled	[CE]  	82	None	replace
260	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  rightLiteral);	  result    =    compareResultToUndefined(right,    left);    	non-compiled	[CE]  	82	None	replace
261	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left,  rightLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left,  rightLiteral);	  result    =    compareResultToUndefined(right,    left);    	non-compiled	[CE]  	82	None	replace
262	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left,  false);	  result    =    compareResultToUndefined(right,    left);    	non-compiled	[CE]  	82	None	replace
263	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  n);	  result    =    compareResultToUndefined(right,    left);    	non-compiled	[CE]  	82	None	replace
264	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  undefinedLeft);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    left,    undefinedLeft);    	non-compiled	[CE]  	23	None	replace
265	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedRight);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  	73	None	replace
266	[BUG]  [BUGGY]  return  left.getFirstChild().getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  left.getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getFirstChild().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
267	[BUG]  [BUGGY]  return  n.getLastChild().getString();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  n.getLastChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  n.getLastChild().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
268	[BUG]  [BUGGY]  return  right.getLastChild().getString();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  right.getLastChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  right.getLastChild().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
269	[BUG]  [BUGGY]  return  n.getFirstChild().getString();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  n.getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  n.getFirstChild().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
270	[BUG]  [BUGGY]  return  right.getFirstChild().getString();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  right.getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  right.getFirstChild().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
271	[BUG]  [BUGGY]  return  left.getLastChild().getNext().getString();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  left.getLastChild().getNext().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getLastChild().getNext().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
272	[BUG]  [BUGGY]  result  =  compareResult(right,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  right);	  result    =    compareResult(left,    left);    	non-compiled	[CE]  	72	None	replace
273	[BUG]  [BUGGY]  result  =  compareResult(rightLiteral,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(rightLiteral,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(rightLiteral,  left);	  result    =    compareResult(left,    left);    	non-compiled	[CE]  	72	None	replace
274	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  op);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  op);	  result    =    compareResultToUndefined(right,    op);    	non-compiled	[CE]  	94	None	replace
275	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  rightLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  rightLiteral);	  result    =    compareResultToUndefined(right,    op);    	non-compiled	[CE]  	94	None	replace
276	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left.node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left.node);	  result    =    compareResultToUndefined(right,    op);    	non-compiled	[CE]  	94	None	replace
277	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  rightLocation);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  rightLocation);	  result    =    compareToUndefined(n,    rightLocation);    	non-compiled	[CE]  	30	None	replace
278	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left,  rightLiteral);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left,  rightLiteral);	  result    =    comparisonToUndefined(right,    left);    	non-compiled	[CE]  	41	None	replace
279	[BUG]  [BUGGY]  result  =  compareToUndefined(leftLiteral,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(leftLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(leftLiteral,  n);	  result    =    compareToUndefined(rightLiteral,    n);    	non-compiled	[CE]  	54	None	replace
280	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.next);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.next);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left.next);	  result    =    compareToUndefined(rightLiteral,    n);    	non-compiled	[CE]  	54	None	replace
281	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.getFirstChild());	  result    =    compareToUndefined(left,    left.getLastChild());    	non-compiled	[CE]  	49	None	replace
282	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.getFirstChild());	  result    =    compareToUndefined(left,    left.getLastChild());    	non-compiled	[CE]  	49	None	replace
283	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.getLastChild());	  result    =    compareToUndefined(left,    left.getLastChild());    	non-compiled	[CE]  	49	None	replace
284	[BUG]  [BUGGY]  result  =  compareResult(result,  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(result,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(result,  right);	  result    =    compareResult(left,    right);    	non-compiled	[CE]  	34	None	replace
285	[BUG]  [BUGGY]  result  =  compareResult(left,  right,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  right,  n);	  result    =    compareResult(left,    right);    	non-compiled	[CE]  	34	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(result));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(result));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal(result));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(result));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(result));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal(result));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal(result));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal(result));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal(result));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(n,  right));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(n,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(n,  right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  result);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  result);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(rightLiteral),  result);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(result,  rightLiteral));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(result,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(result,  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  right);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  rightLiteral);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  rightLiteral);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
298	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  left,  undefinedRight);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  left,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	44	None	replace
299	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  right,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  right,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	44	None	replace
300	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  undefinedRight);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  rightLiteral,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	44	None	replace
301	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  right,  undefinedRight);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  right,  undefinedRight);	  result    =    compareResultToUndefined(left,    right);    	non-compiled	[CE]  	57	None	replace
302	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  right,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  right,  n);	  result    =    compareResultToUndefined(left,    right);    	non-compiled	[CE]  	57	None	replace
303	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  right,  leftLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  right,  leftLiteral);	  result    =    compareResultToUndefined(left,    right);    	non-compiled	[CE]  	57	None	replace
304	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  leftLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  leftLiteral);	  result    =    compareToUndefined(left,    right,    n);    	non-compiled	[CE]  	4	None	replace
305	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  leftLiteral);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  leftLiteral);	  result    =    compareToUndefined(right,    leftLocation);    	non-compiled	[CE]  	33	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  rightLiteral);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  rightLiteral);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(rightLiteral));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  new  PeepholeFoldConstants());	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
312	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  left.node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  left.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  left.node);	  result    =    compareToUndefined(left,    left.node);    	non-compiled	[CE]  	58	None	replace
313	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral.node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral.node);	  result    =    compareToUndefined(left,    right.node);    	non-compiled	[CE]  	24	None	replace
314	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  leftLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  leftLiteral);	  result    =    comparisonToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	16	None	replace
315	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  rightLiteral);	  result    =    comparisonToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	16	None	replace
316	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  leftLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  leftLiteral);	  result    =    comparisonToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	16	None	replace
317	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  rightLiteral,  n);	  result    =    comparisonToUndefined(left,    right,    n);    	non-compiled	[CE]  	67	None	replace
318	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left,  n);	  result    =    comparisonToUndefined(left,    right,    n);    	non-compiled	[CE]  	67	None	replace
319	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(n,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  left,  right);	  result    =    comparisonToUndefined(left,    right,    n);    	non-compiled	[CE]  	67	None	replace
320	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  left,  rightLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  left,  rightLiteral);	  result    =    comparisonToUndefined(left,    right,    n);    	non-compiled	[CE]  	67	None	replace
321	[BUG]  [BUGGY]  result  =  comparatorToUndefined(n,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(n,  right);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
322	[BUG]  [BUGGY]  result  =  comparatorToUndefined(n,  left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(n,  left);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
323	[BUG]  [BUGGY]  result  =  comparatorToUndefined(right,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(right,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(right,  left);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
324	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  right,  undefinedRight);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  right,  undefinedRight);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
325	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  right,  leftLiteral);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  right,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  right,  leftLiteral);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
326	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  right,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  right,  n);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
327	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left.node);	  result    =    compareToUndefined(n,    left.node);    	non-compiled	[CE]  	25	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left,  rightLiteral));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left,  rightLiteral));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral),  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral),  n);	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(n,  rightLiteral));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(n,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(n,  rightLiteral));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  undefinedRight));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  undefinedRight));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  undefinedRight));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(right,  rightLiteral));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(right,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(right,  rightLiteral));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral),  this);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral),  this);	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  n));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  n));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  n));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
335	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  left.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	84	None	replace
336	[BUG]  [BUGGY]  return  rightLiteral.getFirstChild().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  rightLiteral.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  rightLiteral.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	84	None	replace
337	[BUG]  [BUGGY]  return  right.getFirstChild().getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  right.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	84	None	replace
338	[BUG]  [BUGGY]  return  left.getLastChild().getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  left.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	84	None	replace
339	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  n.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	84	None	replace
340	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  n.getFirstChild().getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  n.getFirstChild().getLastChild();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	84	None	replace
341	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  leftLiteral);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(n,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  leftLiteral);	  result    =    compareToUndefined(left,    leftLiteral);    	non-compiled	[CE]  	48	None	replace
342	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  rightLiteral);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatToUndefined(left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatToUndefined(left,  rightLiteral);	  result    =    compareToUndefined(left,    leftLiteral);    	non-compiled	[CE]  	48	None	replace
343	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
344	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.getLastChild();	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
345	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.getFirstChild();	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
346	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
347	[BUG]  [BUGGY]  n  =  left.getNext()  +  rightLiteral;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  left.getNext()  +  rightLiteral;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.getNext()  +  rightLiteral;	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
348	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  left.getParent();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  n,  rightLiteral);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  n,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  n,  rightLiteral);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  undefinedRight);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  rightLiteral,  undefinedRight);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  rightLiteral,  n);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  n,  leftLiteral);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  n,  leftLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  n,  leftLiteral);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  rightLiteral,  false);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  this);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  rightLiteral,  this);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  undefinedLeft);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  rightLiteral,  undefinedLeft);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
356	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  n.getLastChild());	  result    =    compareToUndefined(left,    left.getLastChild());    	non-compiled	[CE]  	49	None	replace
357	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getLastChild(),  rightLiteral);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.getLastChild(),  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.getLastChild(),  rightLiteral);	  result    =    compareToUndefined(left,    left.getLastChild());    	non-compiled	[CE]  	49	None	replace
358	[BUG]  [BUGGY]  result  =  compareToLocal(left,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  n);	  result    =    compareToUndefined(n,    left);    	non-compiled	[CE]  	1	None	replace
359	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left,  undefinedRight);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left,  undefinedRight);	  result    =    compareResultToUndefined(right,    left);    	non-compiled	[CE]  	82	None	replace
360	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(right,  left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left,  n);	  result    =    compareResultToUndefined(right,    left);    	non-compiled	[CE]  	82	None	replace
361	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.node,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.node,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.node,  undefinedRight);	  result    =    compareToUndefined(right,    left.node,    undefinedLeft);    	non-compiled	[CE]  	80	None	replace
362	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  undefinedRight);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  undefinedRight);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
363	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  left.relativeNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  left.relativeNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  left.relativeNode);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
364	[BUG]  [BUGGY]  n.replaceChild(left,  left);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.replaceChild(left,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.replaceChild(left,  left);	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
365	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedRight);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  	79	None	replace
366	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.undefinedLeft);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.undefinedLeft);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  	79	None	replace
367	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedRight,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  	52	None	replace
368	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedLeft,  rightLiteral);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedLeft);    	non-compiled	[CE]  	52	None	replace
369	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  right);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatToUndefined(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatToUndefined(left,  right);	  result    =    compareToUndefined(rightLiteral,    right);    	non-compiled	[CE]  	89	None	replace
370	[BUG]  [BUGGY]  result  =  comparisonResult(left,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonResult(left,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonResult(left,  left);	  result    =    compareResult(right,    rightLiteral);    	non-compiled	[CE]  	37	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  token));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right),  token);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right),  token);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right),  token);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
374	[BUG]  [BUGGY]  result  =  comparisonResult(right,  op);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonResult(right,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonResult(right,  op);	  result    =    compareResult(left,    op);    	non-compiled	[CE]  	38	None	replace
375	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  false);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
376	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  rightLiteral);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedRight,  rightLiteral);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedRight);    	non-compiled	[CE]  	51	None	replace
377	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedRight  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedRight  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  undefinedRight  -  1);	  result    =    compareToUndefined(left,    rightLiteral,    undefinedRight);    	non-compiled	[CE]  	51	None	replace
378	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  leftLiteral,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  leftLiteral,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  leftLiteral,  right);	  result    =    compareToUndefined(left,    leftLiteral);    	non-compiled	[CE]  	48	None	replace
379	[BUG]  [BUGGY]  result  =  compareResult(left,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  n);	  result    =    compareResult(left,    right);    	non-compiled	[CE]  	34	None	replace
380	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  right  -  op);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  right  -  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  right  -  op);	  result    =    compareResultToUndefined(right,    op);    	non-compiled	[CE]  	94	None	replace
381	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  right.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  right.getLastChild());	  result    =    compareResultToUndefined(right,    op);    	non-compiled	[CE]  	94	None	replace
382	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right,  true);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  true);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  result));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  result));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(right,  result));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(Boolean.TRUE)));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(Boolean.TRUE)));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(Boolean.TRUE)));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REACHABLE_FOLD_ERROR));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REACHABLE_FOLD_ERROR));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(REACHABLE_FOLD_ERROR));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
386	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right.cloneTree());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
387	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  n);	  result    =    comparisonToUndefined(right,    n);    	non-compiled	[CE]  	17	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()),  new  NodeTraversal());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()).traverse(n),  new  NodeTraversal());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()).traverse(n),  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal()).traverse(n),  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(),  this);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  n,  new  NodeTraversal());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  n,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  n,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
394	[BUG]  [BUGGY]  result  =  compareResult(right,  left.getNext()  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.getNext()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.getNext()  -  1);	  result    =    compareResult(right,    left.getNext());    	non-compiled	[CE]  	92	None	replace
395	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedRight  -  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedRight  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node,  undefinedRight  -  1);	  result    =    compareToUndefined(right,    left.node,    undefinedRight);    	non-compiled	[CE]  	29	None	replace
396	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedLeft);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  n,  undefinedLeft);	  result    =    compareToUndefined(right,    left,    undefinedLeft);    	non-compiled	[CE]  	23	None	replace
397	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
398	[BUG]  [BUGGY]  result  =  compareToUndefined(result,  left,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(result,  left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(result,  left,  rightLiteral);	  result    =    compareToUndefined(right,    left,    rightLiteral);    	non-compiled	[CE]  	20	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  true));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  true));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  true));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  compareResult);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  compareResult);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  compareResult);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  right);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  right);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
402	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  n);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
403	[BUG]  [BUGGY]  result  =  compareResult(right,  left,  rn);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left,  rn);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left,  rn);	  result    =    compareResult(right,    left);    	non-compiled	[CE]  	35	None	replace
404	[BUG]  [BUGGY]  result  =  compareResult(right,  left.removeFirst());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.removeFirst());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.removeFirst());	  result    =    compareResult(right,    left.next());    	non-compiled	[CE]  	90	None	replace
405	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  undefinedRight  -  1);	  result    =    compareToUndefined(right,    left,    undefinedRight);    	non-compiled	[CE]  	21	None	replace
406	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  undefinedRight  +  1);	  result    =    compareToUndefined(right,    left,    undefinedRight);    	non-compiled	[CE]  	21	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  false));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  false));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  false));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  n));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  n));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right,  n));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  right));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
411	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(right,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(right,  n);	  result    =    this.comparisonToUndefined(left,    op);    	non-compiled	[CE]  	93	None	replace
412	[BUG]  [BUGGY]  result  =  comparisonResult(left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonResult(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonResult(left,  right);	  result    =    compareResult(n,    right);    	non-compiled	[CE]  	36	None	replace
413	[BUG]  [BUGGY]  result  =  comparisonResult(right,  left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonResult(right,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonResult(right,  left);	  result    =    compareResult(left,    left);    	non-compiled	[CE]  	72	None	replace
414	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.node  -  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.node  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.node  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
415	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
416	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right.node  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right.node  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right.node  -  1);	  result    =    compareToUndefined(right,    left.node    -    1);    	non-compiled	[CE]  	59	None	replace
417	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  leftLiteral,  undefinedRight);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  leftLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  leftLiteral,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
418	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  leftLiteral,  undefinedRight);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  leftLiteral,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  leftLiteral,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
419	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  right,  rightLiteral);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  right,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  right,  rightLiteral);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  right);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  MAX_FOLD_NUMBER);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  rightLiteral,  MAX_FOLD_NUMBER);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  n,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  n,  right);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  right);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  right);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  false);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  false);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  newNode);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  this);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  right,  this);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
427	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  rightLocation);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  rightLocation);	  result    =    compareToUndefined(right,    rightLocation);    	non-compiled	[CE]  	32	None	replace
428	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.node,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.node,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.node,  n);	  result    =    compareToUndefined(right,    left.node,    rightLiteral);    	non-compiled	[CE]  	26	None	replace
429	[BUG]  [BUGGY]  return  left.getNext().getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  left.getNext().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getNext().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
430	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  left,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  left,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
431	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedRight,  undefinedLeft);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedRight,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  undefinedRight,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
432	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  n);	  result    =    comparisonToUndefined(n,    left);    	non-compiled	[CE]  	42	None	replace
433	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedRight);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  n,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  n,  undefinedRight);	  result    =    compareToUndefined(left,    rightLocation,    undefinedRight);    	non-compiled	[CE]  	69	None	replace
434	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  rightLocation);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedRight,  rightLocation);	  result    =    compareToUndefined(left,    rightLocation,    undefinedRight);    	non-compiled	[CE]  	69	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  TokenTraversal());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  TokenTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  TokenTraversal());	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
436	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left,  right);	  result    =    compareToUndefined(left,    rightLocation,    n);    	non-compiled	[CE]  	70	None	replace
437	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  n.node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  n.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  n.node);	  result    =    compareToUndefined(left,    right.node);    	non-compiled	[CE]  	24	None	replace
438	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  right.node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  right.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  right.node);	  result    =    compareToUndefined(left,    right.node);    	non-compiled	[CE]  	24	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  MAX_FOLD_NUMBER);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  MAX_FOLD_NUMBER);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  right);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  undefinedLeft);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  undefinedLeft);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
442	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  right,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  right,  false);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
443	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  right,  undefinedLeft);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  right,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  right,  undefinedLeft);	  result    =    comparatorToUndefined(left,    right);    	non-compiled	[CE]  	77	None	replace
444	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  undefinedRight);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  undefinedRight);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  	73	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal(),  this));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal(),  this));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal(),  this));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
446	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  rightLiteral);	  result    =    compareToUndefined(left,    right,    n);    	non-compiled	[CE]  	4	None	replace
447	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  left,  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  left,  right);	  result    =    comparisonToUndefined(left,    right,    n);    	non-compiled	[CE]  	67	None	replace
448	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.removeFirstChild();	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
449	[BUG]  [BUGGY]  return  left.getNext().getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  left.getNext().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getNext().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	84	None	replace
450	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.nextToken(),  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  left.nextToken(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.nextToken(),  right);	  result    =    compareToUndefined(left,    left.nextToken());    	non-compiled	[CE]  	50	None	replace
451	[BUG]  [BUGGY]  result  =  compareResult(right,  left.nextNode()  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.nextNode()  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.nextNode()  -  1);	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
452	[BUG]  [BUGGY]  result  =  compareResult(right,  left.cloneTree());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.cloneTree());	  result    =    compareResult(right,    left.nextNode());    	non-compiled	[CE]  	40	None	replace
453	[BUG]  [BUGGY]  result  =  compareResultToLocal(left,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToLocal(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToLocal(left,  right);	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
454	[BUG]  [BUGGY]  result  =  compareResultToOperand(left,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToOperand(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToOperand(left,  right);	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
455	[BUG]  [BUGGY]  result  =  comparisonResultToUndefined(left,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonResultToUndefined(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonResultToUndefined(left,  right);	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()),  left);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()),  left);	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left),  false);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left),  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left),  false);	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
458	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  undefinedRight,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedRight,  n);	  result    =    compareToUndefined(left,    rightLiteral,    n);    	non-compiled	[CE]  	53	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  n);	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  false));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  false));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  false));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
461	[BUG]  [BUGGY]  result  =  compareToLocal(left,  rightLocation);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(left,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  rightLocation);	  result    =    compareToUndefined(n,    rightLocation);    	non-compiled	[CE]  	30	None	replace
462	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  undefinedRight  -  1);	  result    =    comparisonToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	44	None	replace
463	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  undefinedRight  +  1);	  result    =    comparisonToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	44	None	replace
464	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight  -  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight  -  1);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	2	None	replace
465	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight  +  1);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight  +  1);	  result    =    compareToUndefined(left,    right,    undefinedRight);    	non-compiled	[CE]  	2	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  left);	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
467	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left,  n);	  result    =    compareToUndefined(right,    left,    n);    	non-compiled	[CE]  	66	None	replace
468	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right,  undefinedRight);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToLocal(left,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  right,  undefinedRight);	  result    =    compareToLocal(left,    right);    	non-compiled	[CE]  	75	None	replace
469	[BUG]  [BUGGY]  result  =  getResultToUndefined(left,  op);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  getResultToUndefined(left,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  getResultToUndefined(left,  op);	  result    =    compareResultToUndefined(right,    op);    	non-compiled	[CE]  	94	None	replace
470	[BUG]  [BUGGY]  result  =  compareResultToUndefined(n,  op);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(n,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(n,  op);	  result    =    compareResultToUndefined(right,    op);    	non-compiled	[CE]  	94	None	replace
471	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  n,  rightLocation);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  n,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  n,  rightLocation);	  result    =    compareToUndefined(left,    rightLocation,    n);    	non-compiled	[CE]  	70	None	replace
472	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLocation,  rightLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLocation,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLocation,  rightLiteral);	  result    =    compareToUndefined(left,    rightLocation,    n);    	non-compiled	[CE]  	70	None	replace
473	[BUG]  [BUGGY]  result  =  compareResult(right,  left,  undefinedRight);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  left,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left,  undefinedRight);	  result    =    compareResult(right,    left);    	non-compiled	[CE]  	35	None	replace
474	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  tryFoldComparison);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  tryFoldComparison);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral,  tryFoldComparison);	  NodeTraversal.traverse(comparisonResult,    n,    left,    rightLiteral);    	non-compiled	[CE]  	86	None	replace
475	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.replaceChild(left,  new  Node(Token.EMPTY));	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
476	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(rightLiteral));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n.replaceChild(left,  new  Node(rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.replaceChild(left,  new  Node(rightLiteral));	  n.removeChild(left);    	non-compiled	[CE]  	85	None	replace
477	[BUG]  [BUGGY]  result  =  compareResult(ln,  op);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(ln,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(ln,  op);	  result    =    compareResult(n,    op);    	non-compiled	[CE]  	39	None	replace
478	[BUG]  [BUGGY]  result  =  getResult(left,  op);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  getResult(left,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  getResult(left,  op);	  result    =    compareResult(n,    op);    	non-compiled	[CE]  	39	None	replace
479	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  right.cloneTree());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  right.cloneTree());	  result    =    compareResultToUndefined(left,    right);    	non-compiled	[CE]  	57	None	replace
480	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  left.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  left.cloneTree());	  result    =    compareResultToUndefined(left,    right);    	non-compiled	[CE]  	57	None	replace
481	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n.node,  undefinedRight);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  n.node,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  n.node,  undefinedRight);	  result    =    compareToUndefined(right,    left.node,    undefinedRight);    	non-compiled	[CE]  	29	None	replace
482	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedRight);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  n,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  n,  undefinedRight);	  result    =    compareToUndefined(right,    left.node,    undefinedRight);    	non-compiled	[CE]  	29	None	replace
483	[BUG]  [BUGGY]  result  =  compareResult(right,  n.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  n.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  n.getString());	  result    =    compareResult(right,    left.getString());    	non-compiled	[CE]  	91	None	replace
484	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  undefinedLeft);	  result    =    comparisonToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	16	None	replace
485	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(right,  op);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(right,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(right,  op);	  result    =    comparisonToUndefined(right,    op);    	non-compiled	[CE]  	18	None	replace
486	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  op);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatorToUndefined(left,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  op);	  result    =    comparisonToUndefined(right,    op);    	non-compiled	[CE]  	18	None	replace
487	[BUG]  [BUGGY]  result  =  getResult(left,  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  getResult(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  getResult(left,  right);	  result    =    compareResult(left,    right);    	non-compiled	[CE]  	34	None	replace
488	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.undefinedRight);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.undefinedRight);	  result    =    compareToUndefined(left,    undefinedRight);    	non-compiled	[CE]  	73	None	replace
489	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  n.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  n.getLastChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
490	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(rightLiteral,  left.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left.getFirstChild());	  result    =    compareToUndefined(n,    left.getLastChild());    	non-compiled	[CE]  	55	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()).traverse(n),    new    NodeTraversal());    	non-compiled	[CE]  	61	None	replace
492	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left.node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  left.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left.node);	  result    =    compareToUndefined(left,    left.node);    	non-compiled	[CE]  	58	None	replace
493	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.getNextToken());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.getNextToken());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.getNextToken());	  result    =    compareToUndefined(left,    left.nextToken());    	non-compiled	[CE]  	50	None	replace
494	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  this.rightLiteral);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  this.rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  right,  this.rightLiteral);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
495	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  this.node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  this.comparisonToUndefined(left,  right,  this.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  right,  this.node);	  result    =    this.comparisonToUndefined(left,    right);    	non-compiled	[CE]  	81	None	replace
496	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  left.cloneTree());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  left.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  left.cloneTree());	  result    =    compareToUndefined(left,    rightLiteral,    n);    	non-compiled	[CE]  	53	None	replace
497	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  right.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  right.getString());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  right.getString());	  result    =    compareToUndefined(left,    left.getString());    	non-compiled	[CE]  	95	None	replace
498	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left),  right);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal(),  left),  right);	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
499	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()).traverse(rightLiteral));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()).traverse(rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()).traverse(rightLiteral));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	12	None	replace
500	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n,  rightLiteral);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  n,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  n,  rightLiteral);	  result    =    compareToUndefined(right,    left,    n);    	non-compiled	[CE]  	66	None	replace
501	[BUG]  [BUGGY]  result  =  compareResult(rightLiteral,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(rightLiteral,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(rightLiteral,  right);	  result    =    compareResult(n,    right);    	non-compiled	[CE]  	36	None	replace
502	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  n  =  left.replaceChild(left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.replaceChild(left,  newNode);	  n    =    left.getNext();    	non-compiled	[CE]  	8	None	replace
503	[BUG]  [BUGGY]  result  =  getResult(left,  rightLiteral);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  getResult(left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  getResult(left,  rightLiteral);	  result    =    compareResult(left,    left);    	non-compiled	[CE]  	72	None	replace
504	[BUG]  [BUGGY]  result  =  comparatToUndefined(left,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparatToUndefined(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatToUndefined(left,  n);	  result    =    compareToUndefined(rightLiteral,    n);    	non-compiled	[CE]  	54	None	replace
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  n);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  left,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  newNode);	  NodeTraversal.traverse(compareResult,    left,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
507	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  right,  undefinedLeft);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  right,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  right,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right,    undefinedLeft);    	non-compiled	[CE]  	45	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  rightLiteral));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right),  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left,    right)));    	non-compiled	[CE]  	63	None	replace
509	[BUG]  [BUGGY]  return  left.getFirstChild().getNext().getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  return  left.getFirstChild().getNext().getString();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getFirstChild().getNext().getString();	  return    left.getLastChild().getString();    	non-compiled	[CE]  	9	None	replace
510	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  right.cloneTree());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  right.cloneTree());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  right.cloneTree());	  result    =    compareToUndefined(left,    left.cloneTree());    	non-compiled	[CE]  	78	None	replace
511	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  right,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  right,  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  right,  false);	  result    =    comparisonToUndefined(left,    right,    false);    	non-compiled	[CE]  	68	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  rightLocation));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  rightLocation));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(),  rightLocation));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this,  new  NodeTraversal()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this,  new  NodeTraversal()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this,  new  NodeTraversal()));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal()));    	non-compiled	[CE]  	60	None	replace
514	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  undefinedLeft);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  undefinedLeft);	  result    =    comparisonToUndefined(right,    left);    	non-compiled	[CE]  	41	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  n);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  n);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left);	  NodeTraversal.traverse(compiler,    left,    rightLiteral);    	non-compiled	[CE]  	13	None	replace
517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this,  rightLiteral));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(this,  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  	11	None	replace
518	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(rightLiteral));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  Compiler(rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
519	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(),  this);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler(),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  Compiler(),  this);	  NodeTraversal.traverse(compiler,    left,    new    Compiler());    	non-compiled	[CE]  	88	None	replace
520	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  n,  undefinedRight);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right,  n,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  n,  undefinedRight);	  result    =    compareToUndefined(left,    right,    n);    	non-compiled	[CE]  	4	None	replace
521	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  rightLocation);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResultToUndefined(left,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  rightLocation);	  result    =    compareToUndefined(n,    rightLocation);    	non-compiled	[CE]  	30	None	replace
522	[BUG]  [BUGGY]  result  =  compareResult(rightLiteral,  rightLocation);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(rightLiteral,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(rightLiteral,  rightLocation);	  result    =    compareToUndefined(n,    rightLocation);    	non-compiled	[CE]  	30	None	replace
523	[BUG]  [BUGGY]  result  =  compareResult(right,  rightLocation);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareResult(right,  rightLocation);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  rightLocation);	  result    =    compareToUndefined(n,    rightLocation);    	non-compiled	[CE]  	30	None	replace
524	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n.node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  n.node);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  n.node);	  result    =    compareToUndefined(n,    left.node);    	non-compiled	[CE]  	25	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rightLiteral,  new  NodeTraversal(result));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rightLiteral,  new  NodeTraversal(result));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  rightLiteral,  new  NodeTraversal(result));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(result));    	non-compiled	[CE]  	62	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right)));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right)));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(right)));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(new    NodeTraversal(left),    new    NodeTraversal()));    	non-compiled	[CE]  	65	None	replace
527	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  right,  undefinedRight);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(right,  right,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  right,  undefinedRight);	  result    =    comparisonToUndefined(left,    right,    leftLiteral);    	non-compiled	[CE]  	46	None	replace
528	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.undefinedRight);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.undefinedRight);	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  	79	None	replace
529	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.next());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left.next());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.next());	  result    =    compareToUndefined(right,    undefinedRight);    	non-compiled	[CE]  	79	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  reverse);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  reverse);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral,  reverse);	  NodeTraversal.traverse(compiler,    n,    left,    rightLiteral);    	non-compiled	[CE]  	87	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(0));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(0));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(0));	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(2));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(2));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(2));	  NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  	83	None	replace
533	[BUG]  [BUGGY]  result  =  comparisonResult(left,  rightLiteral);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonResult(left,  rightLiteral);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonResult(left,  rightLiteral);	  result    =    compareResult(right,    rightLiteral);    	non-compiled	[CE]  	37	None	replace
534	[BUG]  [BUGGY]  result  =  comparisonToUndefined(rightLiteral,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(rightLiteral,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(rightLiteral,  right);	  result    =    comparisonToUndefined(n,    right);    	non-compiled	[CE]  	43	None	replace
535	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal(token));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal(token));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  rightLiteral,  new  NodeTraversal(token));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(left,  rightLiteral));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(left,  rightLiteral));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(left,  rightLiteral));	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal(token));    	non-compiled	[CE]  	64	None	replace
537	[BUG]  [BUGGY]  result  =  getResultToUndefined(left,  right);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  getResultToUndefined(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  getResultToUndefined(left,  right);	  result    =    compareResultToUndefined(right,    right);    	non-compiled	[CE]  	19	None	replace
538	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  comparisonToUndefined(left,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right.getLastChild());	  result    =    compareToUndefined(left,    left.getLastChild());    	non-compiled	[CE]  	49	None	replace
539	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  right.relativeNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left.node,  right.relativeNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  right.relativeNode);	  result    =    compareToUndefined(left.node,    rightLiteral);    	non-compiled	[CE]  	27	None	replace
540	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.undefinedLeft);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(left,  right.undefinedLeft);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.undefinedLeft);	  result    =    compareToUndefined(left,    undefinedLeft);    	non-compiled	[CE]  	74	None	replace
541	[BUG]  [BUGGY]  result  =  right.comparisonToUndefined(left,  op);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  right.comparisonToUndefined(left,  op);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  right.comparisonToUndefined(left,  op);	  result    =    this.comparisonToUndefined(left,    op);    	non-compiled	[CE]  	93	None	replace
542	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  false,  undefinedRight);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  result  =  compareToUndefined(right,  left,  false,  undefinedRight);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  false,  undefinedRight);	  result    =    compareToUndefined(right,    left,    false);    	non-compiled	[CE]  	22	None	replace
543	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  undefinedRight));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  undefinedRight));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  undefinedRight));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
544	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left,  undefinedRight));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  if  (!rightLiteral)  {  return  n;  }  else  {      [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left,  undefinedRight));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  left,  undefinedRight));	  NodeTraversal.traverse(compareResult,    new    NodeTraversal(left,    rightLiteral));    	non-compiled	[CE]  	10	None	replace
