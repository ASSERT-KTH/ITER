bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(n,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  undefinedRight);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  right,  undefinedLeft);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  undefinedLeft);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  right,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right,  n);	  result    =    compareToUndefined(left,    right);    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  n);	  result    =    compareToUndefined(left,    op);    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compareResult,  left,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  left,  rightLiteral);	      	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  n  =  left.getNext();  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n  =  left.getNext();	      	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  return  left.getLastChild().getString();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  return  left.getLastChild().getString();  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  left.getLastChild().getString();	      	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral));  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(left,  rightLiteral));	      	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());	      	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()));  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compareResult,  new  NodeTraversal(new  NodeTraversal()));	      	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral);  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  rightLiteral);	      	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(right,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  right);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
15	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(left,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  rightLiteral);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
16	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(right,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  rightLiteral);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(right,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  n);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  op);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(right,  op);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  op);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResultToUndefined(right,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  right);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  rightLiteral);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  undefinedRight);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  false);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left,  false);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  false);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left,  undefinedLeft);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  undefinedLeft);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  right.node);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  right.node);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  right.node);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.node);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(n,  left.node);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.node);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node,  rightLiteral);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left.node,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node,  rightLiteral);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left.node,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left.node,  rightLiteral);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  right.node);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  right.node);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  right.node);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedRight);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node,  undefinedRight);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLocation);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(n,  rightLocation);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  rightLocation);	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  leftLocation);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(n,  leftLocation);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  leftLocation);	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
32	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  rightLocation);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  rightLocation);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  rightLocation);	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
33	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  leftLocation);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  leftLocation);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  leftLocation);	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  result  =  compareResult(left,  right);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(left,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  right);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  result  =  compareResult(right,  left);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(right,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
36	[BUG]  [BUGGY]  result  =  compareResult(n,  right);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(n,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  right);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
37	[BUG]  [BUGGY]  result  =  compareResult(right,  rightLiteral);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(right,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  rightLiteral);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
38	[BUG]  [BUGGY]  result  =  compareResult(left,  op);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(left,  op);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  op);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
39	[BUG]  [BUGGY]  result  =  compareResult(n,  op);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(n,  op);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(n,  op);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
40	[BUG]  [BUGGY]  result  =  compareResult(right,  left.nextNode());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(right,  left.nextNode());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.nextNode());	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  result  =  comparisonToUndefined(right,  left);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(right,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(right,  left);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  left);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(n,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  left);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  result  =  comparisonToUndefined(n,  right);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(n,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(n,  right);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  undefinedRight);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedLeft);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(left,  right,  undefinedLeft);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  undefinedLeft);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  leftLiteral);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(left,  right,  leftLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  leftLiteral);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
47	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  rightLiteral);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(n,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  rightLiteral);	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  leftLiteral);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  leftLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  leftLiteral);	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getLastChild());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  left.getLastChild());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.getLastChild());	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
50	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.nextToken());  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  left.nextToken());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.nextToken());	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
51	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedRight);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  undefinedRight);	  result    =    compareToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	2	None	replace
53	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  rightLiteral,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLiteral,  n);	  result    =    compareToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	2	None	replace
54	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  n);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(rightLiteral,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  n);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  	5	None	replace
55	[BUG]  [BUGGY]  result  =  compareToUndefined(n,  left.getLastChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(n,  left.getLastChild());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(n,  left.getLastChild());	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  	5	None	replace
56	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  left);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(rightLiteral,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  left);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  	5	None	replace
57	[BUG]  [BUGGY]  result  =  compareResultToUndefined(left,  right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResultToUndefined(left,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(left,  right);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
58	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.node);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  left.node);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.node);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
59	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node  -  1);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left.node  -  1);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node  -  1);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()));	      	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  new  NodeTraversal());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  new  NodeTraversal());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal()).traverse(n),  new  NodeTraversal());	      	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(result));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(result));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(result));	      	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right)));  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right)));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left,  right)));	      	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(token));  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(token));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(token));	      	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  NodeTraversal(new  NodeTraversal(left),  new  NodeTraversal()));	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left,  n);	  result    =    compareToUndefined(right,    left);    	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(left,  right,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  n);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
68	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  right,  false);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(left,  right,  false);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  right,  false);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
69	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLocation,  undefinedRight);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  rightLocation,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLocation,  undefinedRight);	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  rightLocation,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  rightLocation,  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  rightLocation,  n);	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
71	[BUG]  [BUGGY]  result  =  compareResult(left,  rightLiteral);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(left,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  rightLiteral);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
72	[BUG]  [BUGGY]  result  =  compareResult(left,  left);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(left,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(left,  left);	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
73	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedRight);	  result    =    compareToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	2	None	replace
74	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  undefinedLeft);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  undefinedLeft);	  result    =    compareToUndefined(left,    rightLiteral);    	non-compiled	[CE]  	2	None	replace
75	[BUG]  [BUGGY]  result  =  compareToLocal(left,  right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToLocal(left,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToLocal(left,  right);	  result    =    compareToUndefined(left,    left);    	non-compiled	[CE]  	9	None	replace
76	[BUG]  [BUGGY]  result  =  comparisonToUndefined(left,  left);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparisonToUndefined(left,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparisonToUndefined(left,  left);	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  result  =  comparatorToUndefined(left,  right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  comparatorToUndefined(left,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  comparatorToUndefined(left,  right);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  	5	None	replace
78	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.cloneTree());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  left.cloneTree());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.cloneTree());	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
79	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  undefinedRight);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  undefinedRight);	  result    =    compareToUndefined(left,    rightLocation);    	non-compiled	[CE]  	11	None	replace
80	[BUG]  [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedLeft);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(right,  left.node,  undefinedLeft);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(right,  left.node,  undefinedLeft);	  result    =    compareToUndefined(right,    left.node);    	non-compiled	[CE]  	6	None	replace
81	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  right);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  this.comparisonToUndefined(left,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  right);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
82	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  left);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResultToUndefined(right,  left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  left);	  result    =    comparisonToUndefined(left,    right);    	non-compiled	[CE]  	10	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants());	      	non-compiled	[CE]  	8	None	replace
84	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	return  n.getFirstChild().getNext();	      	non-compiled	[CE]  	8	None	replace
85	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  n.removeChild(left);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	n.removeChild(left);	      	non-compiled	[CE]  	8	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(comparisonResult,  n,  left,  rightLiteral);	      	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  rightLiteral);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  n,  left,  rightLiteral);	      	non-compiled	[CE]  	8	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler());  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  Compiler());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	NodeTraversal.traverse(compiler,  left,  new  Compiler());	      	non-compiled	[CE]  	8	None	replace
89	[BUG]  [BUGGY]  result  =  compareToUndefined(rightLiteral,  right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(rightLiteral,  right);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(rightLiteral,  right);	  result    =    compareToUndefined(n,    right);    	non-compiled	[CE]  	5	None	replace
90	[BUG]  [BUGGY]  result  =  compareResult(right,  left.next());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(right,  left.next());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.next());	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
91	[BUG]  [BUGGY]  result  =  compareResult(right,  left.getString());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(right,  left.getString());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.getString());	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
92	[BUG]  [BUGGY]  result  =  compareResult(right,  left.getNext());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResult(right,  left.getNext());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResult(right,  left.getNext());	  result    =    compareResult(right,    op);    	non-compiled	[CE]  	13	None	replace
93	[BUG]  [BUGGY]  result  =  this.comparisonToUndefined(left,  op);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  this.comparisonToUndefined(left,  op);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  this.comparisonToUndefined(left,  op);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
94	[BUG]  [BUGGY]  result  =  compareResultToUndefined(right,  op);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareResultToUndefined(right,  op);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareResultToUndefined(right,  op);	  result    =    comparisonToUndefined(left,    op);    	non-compiled	[CE]  	12	None	replace
95	[BUG]  [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (!rightLiteral)  {  return  n;  }  else  {    [BUGGY]  result  =  compareToUndefined(left,  left.getString());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldComparison  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  Locale  ROOT_LOCALE  boolean  result  rightLiteral  undefinedLeft  undefinedRight  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  numValue  result  rval  val  value  Node  left  n  newNode  right  String  ln  rn  Boolean  compareResult  int  lhType  op  rhType  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	916	916	3	replace	result  =  compareToUndefined(left,  left.getString());	  result    =    compareToUndefined(right,    rightLiteral);    	non-compiled	[CE]  	7	None	replace
