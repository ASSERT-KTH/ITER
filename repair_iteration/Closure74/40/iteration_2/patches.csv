bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  valueNull);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  valueNull);	  return    ValueUtils.equal(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	106	None	replace
2	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  op);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  op);	  return    ValueUtils.equal(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	106	None	replace
3	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  equal);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  equal);	  return    ValueUtils.equal(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	106	None	replace
4	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  equalizer);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  equalizer);	  return    ValueUtils.equal(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	106	None	replace
5	[BUG]  [BUGGY]  return  ValueUtils.equal(valueUndefined,  valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueUndefined,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueUndefined,  valueNull);	  return    ValueUtils.equal(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	106	None	replace
6	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.EMPTY_STRING;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.EMPTY_STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.EMPTY_STRING;	  return    valueNull?    valueUndefined    :    ValueUtils.EMPTY_STRING;    	non-compiled	[CE]  ';'  expected	89	None	replace
7	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.EMPTY_STRING  :  ValueUtils.EMPTY_STRING;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.EMPTY_STRING  :  ValueUtils.EMPTY_STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.EMPTY_STRING  :  ValueUtils.EMPTY_STRING;	  return    valueNull?    valueUndefined    :    ValueUtils.EMPTY_STRING;    	non-compiled	[CE]  ';'  expected	89	None	replace
8	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.EMPTY_STRING;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.EMPTY_STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.EMPTY_STRING;	  return    valueNull?    valueUndefined    :    ValueUtils.EMPTY_STRING;    	non-compiled	[CE]  ';'  expected	89	None	replace
9	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.EMPTY_STRING  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.EMPTY_STRING  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.EMPTY_STRING  +  1;	  return    valueNull?    valueUndefined    :    ValueUtils.EMPTY_STRING;    	non-compiled	[CE]  ';'  expected	89	None	replace
10	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtils.escapeHtml(value.getLastChild());    	non-compiled	[CE]  ';'  expected	63	None	replace
11	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.escapeHtml(value.getLastChild()):  ValueUtils.escapeHtml(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.escapeHtml(value.getLastChild()):  ValueUtils.escapeHtml(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.escapeHtml(value.getLastChild()):  ValueUtils.escapeHtml(value.getLastChild());	  return    valueUndefined?    valueNull    :    ValueUtils.escapeHtml(value.getLastChild());    	non-compiled	[CE]  ';'  expected	63	None	replace
12	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.escapeHtml(value.getLastChild()):  ValueUtils.escapeHtml(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.escapeHtml(value.getLastChild()):  ValueUtils.escapeHtml(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.escapeHtml(value.getLastChild()):  ValueUtils.escapeHtml(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtils.escapeHtml(value.getLastChild());    	non-compiled	[CE]  ';'  expected	63	None	replace
13	[BUG]  [BUGGY]  return  valueNull  &&  valueNull;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	57	None	replace
14	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueNull;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	57	None	replace
15	[BUG]  [BUGGY]  return  valueNull  ||  op;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  op;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	57	None	replace
16	[BUG]  [BUGGY]  return  equalise(value,  value.getType());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  value.getType());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  value.getType());	  return    equalise(valueNull,    value.getType());    	non-compiled	[CE]  ';'  expected	100	None	replace
17	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getValue());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getValue());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getValue());	  return    equalise(valueNull,    value.getType());    	non-compiled	[CE]  ';'  expected	100	None	replace
18	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getType(),  false);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getType(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getType(),  false);	  return    equalise(valueNull,    value.getType());    	non-compiled	[CE]  ';'  expected	100	None	replace
19	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getType(),  true);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getType(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getType(),  true);	  return    equalise(valueNull,    value.getType());    	non-compiled	[CE]  ';'  expected	100	None	replace
20	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false);    	non-compiled	[CE]  ';'  expected	136	None	replace
21	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false);    	non-compiled	[CE]  ';'  expected	136	None	replace
22	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false);    	non-compiled	[CE]  ';'  expected	136	None	replace
23	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false);    	non-compiled	[CE]  ';'  expected	136	None	replace
24	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getFirstChild());	  return    valueNull?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	6	None	replace
25	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getString());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getString());	  return    valueNull?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false);	  return    valueNull?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  return  op?   "null "  :  valueNull;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?   "null "  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?   "null "  :  valueNull;	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
28	[BUG]  [BUGGY]  return  valueNull?  null  :  op;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  op;	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
29	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  op,  valueNull);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  op,  valueNull);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equalValue(value,  op,  valueNull);  }	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
30	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  value);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull,  value);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
31	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  equalizer);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  equalizer);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
32	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  equal);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  equal);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
33	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  null);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  null);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
34	[BUG]  [BUGGY]  return  equalise(value,  valueNull?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull?  Double.NaN  :  equalise(valueNull,  valueUndefined));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
35	[BUG]  [BUGGY]  return  equalise(value,  valueUndefined?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueUndefined?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueUndefined?  Double.NaN  :  equalise(valueNull,  valueUndefined));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
36	[BUG]  [BUGGY]  return  equalise(valueNull,  op?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  op?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  op?  Double.NaN  :  equalise(valueNull,  valueUndefined));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
37	[BUG]  [BUGGY]  return  equalise(valueUndefined,  valueNull?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueUndefined,  valueNull?  Double.NaN  :  equalise(valueNull,  valueUndefined));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueUndefined,  valueNull?  Double.NaN  :  equalise(valueNull,  valueUndefined));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
38	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLineno());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLineno());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLineno());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
39	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getString());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getString());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
40	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocalName());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocalName());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocalName());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
41	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocalPart());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocalPart());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocalPart());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
42	[BUG]  [BUGGY]  return  valueNull  &&  this.valueUndefined;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  this.valueUndefined;	  return    this.valueNull    &&    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	145	None	replace
43	[BUG]  [BUGGY]  return  this.valueNull?  valueNull  :  this.valueUndefined;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  valueNull  :  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  valueNull  :  this.valueUndefined;	  return    this.valueNull    &&    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	145	None	replace
44	[BUG]  [BUGGY]  return  this.valueUndefined  &&  this.valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined  &&  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined  &&  this.valueNull;	  return    this.valueNull    &&    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	145	None	replace
45	[BUG]  [BUGGY]  return  this.valueUndefined  &&  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined  &&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined  &&  valueNull;	  return    this.valueNull    &&    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	145	None	replace
46	[BUG]  [BUGGY]  return  this.valueNull  &&  valueUndefined;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  &&  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  &&  valueUndefined;	  return    this.valueNull    &&    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	145	None	replace
47	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  this);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  this);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  this);	  return    ValueUtils.getValue(value,    op,    null);    	non-compiled	[CE]  ';'  expected	87	None	replace
48	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  null,  valueNull);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  null,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  null,  valueNull);	  return    ValueUtils.getValue(value,    op,    null);    	non-compiled	[CE]  ';'  expected	87	None	replace
49	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  equalizer);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  equalizer);	  return    ValueUtils.getValue(value,    op,    null);    	non-compiled	[CE]  ';'  expected	87	None	replace
50	[BUG]  [BUGGY]  return  equalizer?   "null "  :  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?   "null "  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?   "null "  :  valueNull;	  return    valueNull?   "null   "    :    equalizer;    	non-compiled	[CE]  ';'  expected	162	None	replace
51	[BUG]  [BUGGY]  return  valueNull?  null  :  equalizer;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  equalizer;	  return    valueNull?   "null   "    :    equalizer;    	non-compiled	[CE]  ';'  expected	162	None	replace
52	[BUG]  [BUGGY]  return  op  ==  0?  value.getFirstChild().getNext()  :  op;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  ==  0?  value.getFirstChild().getNext()  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  ==  0?  value.getFirstChild().getNext()  :  op;	  return    op    >    0?    value.getFirstChild().getNext()    :    op;    	non-compiled	[CE]  ';'  expected	170	None	replace
53	[BUG]  [BUGGY]  return  op!=  0?  value.getFirstChild().getNext()  :  op;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op!=  0?  value.getFirstChild().getNext()  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op!=  0?  value.getFirstChild().getNext()  :  op;	  return    op    >    0?    value.getFirstChild().getNext()    :    op;    	non-compiled	[CE]  ';'  expected	170	None	replace
54	[BUG]  [BUGGY]  return  value.getFirstChild().getNext()  >  0?  value.getFirstChild().getNext()  :  op;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getFirstChild().getNext()  >  0?  value.getFirstChild().getNext()  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getFirstChild().getNext()  >  0?  value.getFirstChild().getNext()  :  op;	  return    op    >    0?    value.getFirstChild().getNext()    :    op;    	non-compiled	[CE]  ';'  expected	170	None	replace
55	[BUG]  [BUGGY]  return  op  <  0?  value.getFirstChild().getNext()  :  op;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  <  0?  value.getFirstChild().getNext()  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  <  0?  value.getFirstChild().getNext()  :  op;	  return    op    >    0?    value.getFirstChild().getNext()    :    op;    	non-compiled	[CE]  ';'  expected	170	None	replace
56	[BUG]  [BUGGY]  return  op  >=  0?  value.getFirstChild().getNext()  :  op;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  >=  0?  value.getFirstChild().getNext()  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  >=  0?  value.getFirstChild().getNext()  :  op;	  return    op    >    0?    value.getFirstChild().getNext()    :    op;    	non-compiled	[CE]  ';'  expected	170	None	replace
57	[BUG]  [BUGGY]  return  value  >  0?  value.getFirstChild().getNext()  :  op;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value  >  0?  value.getFirstChild().getNext()  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value  >  0?  value.getFirstChild().getNext()  :  op;	  return    op    >    0?    value.getFirstChild().getNext()    :    op;    	non-compiled	[CE]  ';'  expected	170	None	replace
58	[BUG]  [BUGGY]  return  value.getFirstChild().getNext()  -  op;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getFirstChild().getNext()  -  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getFirstChild().getNext()  -  op;	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
59	[BUG]  [BUGGY]  return  value  -  op.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value  -  op.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value  -  op.getFirstChild().getNext();	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
60	[BUG]  [BUGGY]  return  op  -  value.getLastChild().getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  -  value.getLastChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  -  value.getLastChild().getNext();	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
61	[BUG]  [BUGGY]  return  value.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getFirstChild().getNext();	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
62	[BUG]  [BUGGY]  return  value.getFirstChild().getNext()  -  op.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getFirstChild().getNext()  -  op.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getFirstChild().getNext()  -  op.getFirstChild().getNext();	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
63	[BUG]  [BUGGY]  return  valueNull  -  value.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  -  value.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  -  value.getFirstChild().getNext();	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
64	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull,  valueUndefined);	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
65	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  equalizer);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull,  equalizer);	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
66	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op),  valueNull);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op),  valueNull);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op),  valueNull);  }	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
67	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  false);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull,  false);	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
68	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  null);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull,  null);	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
69	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  equalizer);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  equalizer);	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
70	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op),  valueNull,  valueUndefined);	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
71	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&  valueNull;	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
72	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op),  valueNull;	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
73	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)||  valueNull;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)||  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)||  valueNull;	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
74	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull,  null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull,  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op),  valueNull,  null);	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
75	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op),  equalizer);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op),  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op),  equalizer);	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
76	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.NUMBER;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  value.getType()  ==  Token.NUMBER;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
77	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.NUMBER;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()!=  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()!=  Token.NUMBER;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
78	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.NUMBER;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.NUMBER;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
79	[BUG]  [BUGGY]  return  valueNull?  null  :  value.getType()  ==  Token.NUMBER;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  value.getType()  ==  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  value.getType()  ==  Token.NUMBER;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
80	[BUG]  [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.NUMBER;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.getType()  ==  Token.NUMBER;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
81	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER_ERROR;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER_ERROR;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  ==  Token.NUMBER_ERROR;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
82	[BUG]  [BUGGY]  Node  value  =  this.value.getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  ';'  expected	71	None	replace
83	[BUG]  [BUGGY]  Node  value  =  op.getNext();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  ';'  expected	71	None	replace
84	[BUG]  [BUGGY]  Node  value  =  value.getNext()  :  null;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getNext()  :  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getNext()  :  null;	  Node    value    =    value.getNext();    	non-compiled	[CE]  ';'  expected	71	None	replace
85	[BUG]  [BUGGY]  Node  value  =  value.getNext(),  valueNull);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getNext(),  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getNext(),  valueNull);	  Node    value    =    value.getNext();    	non-compiled	[CE]  ';'  expected	71	None	replace
86	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getLastChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	140	None	replace
87	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getNext());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getNext());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	140	None	replace
88	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getString());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getString());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	140	None	replace
89	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getType());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getType());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLiteralValue(value.getType());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	140	None	replace
90	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getFirstChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	140	None	replace
91	[BUG]  [BUGGY]  return  op?  false  :  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  false  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  false  :  valueNull;	  return    op?    false    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	3	None	replace
92	[BUG]  [BUGGY]  return  op?  true  :  valueUndefined;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  true  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  true  :  valueUndefined;	  return    op?    false    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	3	None	replace
93	[BUG]  [BUGGY]  return  false  :  valueUndefined;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  false  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  false  :  valueUndefined;	  return    op?    false    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	3	None	replace
94	[BUG]  [BUGGY]  return  false?  valueNull  :  valueUndefined;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  false?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  false?  valueNull  :  valueUndefined;	  return    op?    false    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	3	None	replace
95	[BUG]  [BUGGY]  return  false  :  valueNull;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  false  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  false  :  valueNull;	  return    op?    false    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	3	None	replace
96	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op  +  2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op  +  2);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op  +  2);	  return    ValueUtils.getValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	111	None	replace
97	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op  +  1,  valueNull);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op  +  1,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op  +  1,  valueNull);	  return    ValueUtils.getValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	111	None	replace
98	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op  *  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op  *  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op  *  1);	  return    ValueUtils.getValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	111	None	replace
99	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op  +  3);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op  +  3);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op  +  3);	  return    ValueUtils.getValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	111	None	replace
100	[BUG]  [BUGGY]  ReturnValueUtils.getValue(value,  op  +  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ReturnValueUtils.getValue(value,  op  +  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	ReturnValueUtils.getValue(value,  op  +  1);	  return    ValueUtils.getValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	111	None	replace
101	[BUG]  [BUGGY]  return  equalizerNull?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizerNull?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizerNull?  valueNull  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
102	[BUG]  [BUGGY]  return  equalizer.equalizer?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equalizer?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equalizer?  valueNull  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
103	[BUG]  [BUGGY]  return  equalizer  null?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  null?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  null?  valueNull  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
104	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  equalizer.equivalent;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
105	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.isScalarValue(value.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.isScalarValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.isScalarValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	37	None	replace
106	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	37	None	replace
107	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.isScalarValue(value.getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.isScalarValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtils.isScalarValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	37	None	replace
108	[BUG]  [BUGGY]  return  equalise(valueNull,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);	  return    equalise(valueNull,    valueUndefined?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  ';'  expected	31	None	replace
109	[BUG]  [BUGGY]  return  equalise(value,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);	  return    equalise(valueNull,    valueUndefined?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  ';'  expected	31	None	replace
110	[BUG]  [BUGGY]  return  equalise(valueUndefined,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueUndefined,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueUndefined,  valueNull?  Double.POSITIVE_INFINITY  :  Double.POSITIVE_INFINITY);	  return    equalise(valueNull,    valueUndefined?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  ';'  expected	31	None	replace
111	[BUG]  [BUGGY]  return  valueNull?  null  :  value.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  value.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  value.getValue();	  return    valueNull?    valueNull    :    value.getValue();    	non-compiled	[CE]  ';'  expected	150	None	replace
112	[BUG]  [BUGGY]  return  valueNull  ||  valueNull  :  value.getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  valueNull  :  value.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  valueNull  :  value.getValue();	  return    valueNull?    valueNull    :    value.getValue();    	non-compiled	[CE]  ';'  expected	150	None	replace
113	[BUG]  [BUGGY]  return  this.valueNull?  this.valueNull  :  value;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  this.valueNull  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  this.valueNull  :  value;	  return    valueNull?    this.valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	147	None	replace
114	[BUG]  [BUGGY]  return  this.valueNull?  this.valueNull  :  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  this.valueNull  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  this.valueNull  :  valueNull;	  return    valueNull?    this.valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	147	None	replace
115	[BUG]  [BUGGY]  return  this.valueNull?  this.valueNull  :  valueUndefined;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  this.valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  this.valueNull  :  valueUndefined;	  return    valueNull?    this.valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	147	None	replace
116	[BUG]  [BUGGY]  Node  value  =  op.getLastChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getLastChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getLastChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
117	[BUG]  [BUGGY]  Node  value  =  this.value.getLastChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getLastChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getLastChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
118	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getFirstChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
119	[BUG]  [BUGGY]  Node  value  =  item.getLastChild();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  item.getLastChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  item.getLastChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
120	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.STRING;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  value.getType()  ==  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
121	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.STRING;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()!=  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()!=  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
122	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.STRING;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
123	[BUG]  [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.STRING;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.getType()  ==  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
124	[BUG]  [BUGGY]  return  valueNull?  null  :  value.getType()  ==  Token.STRING;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  value.getType()  ==  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
125	[BUG]  [BUGGY]  return  valueNull?  true  :  value.getType()  ==  Token.STRING;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  true  :  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  true  :  value.getType()  ==  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
126	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isEquivalentValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isEquivalentValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isEquivalentValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isEquivalentValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	133	None	replace
127	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isNegatedValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isNegatedValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isNegatedValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isEquivalentValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	133	None	replace
128	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isShortValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isShortValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isShortValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isEquivalentValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	133	None	replace
129	[BUG]  [BUGGY]  return  equalise(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getFirstChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	118	None	replace
130	[BUG]  [BUGGY]  return  equalise(value,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	118	None	replace
131	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op,  valueUndefined);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op,  valueUndefined);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
132	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull,  equal);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull,  equal);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
133	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull,  equalizer);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull,  equalizer);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
134	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalizer,  valueNull,  valueUndefined);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
135	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull,  equality);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull,  equality);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull,  equality);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
136	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	104	None	replace
137	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  true));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	104	None	replace
138	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	104	None	replace
139	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	104	None	replace
140	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	104	None	replace
141	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLabelName(value.getString());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLabelName(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLabelName(value.getString());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLabelName(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	142	None	replace
142	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLabelName(value.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLabelName(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isLabelName(value.getLastChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLabelName(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	142	None	replace
143	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isScalarName(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isScalarName(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isScalarName(value.getFirstChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLabelName(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	142	None	replace
144	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isName(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isName(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isName(value.getFirstChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLabelName(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	142	None	replace
145	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isExpressionNode(value.getFirstChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isExpressionNode(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isExpressionNode(value.getFirstChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLabelName(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	142	None	replace
146	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.getValue(value.getFirstChild()):  ValueUtils.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.getValue(value.getFirstChild()):  ValueUtils.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.getValue(value.getFirstChild()):  ValueUtils.getValue(value.getLastChild());	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	51	None	replace
147	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	51	None	replace
148	[BUG]  [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild());	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	51	None	replace
149	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  valueUndefined);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  valueUndefined);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
150	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  equal);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull,  equal);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
151	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  equalizer);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull,  equalizer);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
152	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  valueNull,  valueUndefined);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  valueNull,  valueUndefined);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equalValue(value,  valueNull,  valueUndefined);  }	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
153	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equal,  valueUndefined);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equal,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equal,  valueUndefined);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
154	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	7	None	replace
155	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	7	None	replace
156	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.escapeHtml(value.getFirstChild()):  ValueUtils.escapeHtml(value.getLastChild());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.escapeHtml(value.getFirstChild()):  ValueUtils.escapeHtml(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.escapeHtml(value.getFirstChild()):  ValueUtils.escapeHtml(value.getLastChild());	  return    valueNull?    valueNull    :    ValueUtils.escapeHtml(value.getLastChild());    	non-compiled	[CE]  ';'  expected	62	None	replace
157	[BUG]  [BUGGY]  return  valueNull  ||  this.valueUndefined;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  this.valueUndefined;	  return    this.valueNull    ||    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	146	None	replace
158	[BUG]  [BUGGY]  return  this.valueUndefined  ||  this.valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined  ||  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined  ||  this.valueNull;	  return    this.valueNull    ||    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	146	None	replace
159	[BUG]  [BUGGY]  return  valueNull? "null "  :  value.getType();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  value.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  value.getType();	  return    valueNull?    null    :    value.getType();    	non-compiled	[CE]  ';'  expected	58	None	replace
160	[BUG]  [BUGGY]  return  valueNull?  false  :  value.getType();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.getType();	  return    valueNull?    null    :    value.getType();    	non-compiled	[CE]  ';'  expected	58	None	replace
161	[BUG]  [BUGGY]  return  valueNull? "   "  :  value.getType();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "   "  :  value.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "   "  :  value.getType();	  return    valueNull?    null    :    value.getType();    	non-compiled	[CE]  ';'  expected	58	None	replace
162	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op,  valueNull);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op,  valueNull);	  return    ValueUtils.equal(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	81	None	replace
163	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull,  value);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull,  value);	  return    ValueUtils.equal(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	81	None	replace
164	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull,  op,  false);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull,  op,  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull,  op,  false);	  return    ValueUtils.equal(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	81	None	replace
165	[BUG]  [BUGGY]  return  valueNull  -  this.valueUndefined;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  -  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  -  this.valueUndefined;	  return    this.valueNull    -    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	121	None	replace
166	[BUG]  [BUGGY]  return  this.valueNull  -  valueUndefined;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  -  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  -  valueUndefined;	  return    this.valueNull    -    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	121	None	replace
167	[BUG]  [BUGGY]  return  this.valueUndefined  -  this.valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined  -  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined  -  this.valueNull;	  return    this.valueNull    -    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	121	None	replace
168	[BUG]  [BUGGY]  return  this.valueNull  -  this.valueUndefined  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  -  this.valueUndefined  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  -  this.valueUndefined  +  1;	  return    this.valueNull    -    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	121	None	replace
169	[BUG]  [BUGGY]  return  this.valueNull  /  this.valueUndefined;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  /  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  /  this.valueUndefined;	  return    this.valueNull    -    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	121	None	replace
170	[BUG]  [BUGGY]  return  op  -  this.valueUndefined;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  -  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  -  this.valueUndefined;	  return    this.valueNull    -    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	121	None	replace
171	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  null;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  null;	  return    this.valueNull?    valueNull    :    null;    	non-compiled	[CE]  ';'  expected	28	None	replace
172	[BUG]  [BUGGY]  return  valueNull?  this.valueNull  :  null;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  this.valueNull  :  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  this.valueNull  :  null;	  return    this.valueNull?    valueNull    :    null;    	non-compiled	[CE]  ';'  expected	28	None	replace
173	[BUG]  [BUGGY]  return(valueNull?  valueNull  :  null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull?  valueNull  :  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull?  valueNull  :  null);	  return    this.valueNull?    valueNull    :    null;    	non-compiled	[CE]  ';'  expected	28	None	replace
174	[BUG]  [BUGGY]  return  this.valueNull?  valueUndefined  :  null;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  valueUndefined  :  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  valueUndefined  :  null;	  return    this.valueNull?    valueNull    :    null;    	non-compiled	[CE]  ';'  expected	28	None	replace
175	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull  ||  valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
176	[BUG]  [BUGGY]  ||  valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	||  valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
177	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull  ||  valueNull)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull  ||  valueNull)  {  throw  new  IllegalStateException( " ");  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
178	[BUG]  [BUGGY]  if(valueNull  ||  equal)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull  ||  equal)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull  ||  equal)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
179	[BUG]  [BUGGY]  tryReturn(valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  tryReturn(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	tryReturn(valueNull)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
180	[BUG]  [BUGGY]  if(valueNull)  {  return  true;  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  true;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  true;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
181	[BUG]  [BUGGY]  return  opNull?  valueNull  :  op;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  opNull?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  opNull?  valueNull  :  op;	  return    valueNull?    op    :    op;    	non-compiled	[CE]  ';'  expected	115	None	replace
182	[BUG]  [BUGGY]  return  op  null?  valueNull  :  op;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  null?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  null?  valueNull  :  op;	  return    valueNull?    op    :    op;    	non-compiled	[CE]  ';'  expected	115	None	replace
183	[BUG]  [BUGGY]  return  op?  valueNull  :  op;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  valueNull  :  op;	  return    valueNull?    op    :    op;    	non-compiled	[CE]  ';'  expected	115	None	replace
184	[BUG]  [BUGGY]  return  equalise(value,  value.getLocalPart());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  value.getLocalPart());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  value.getLocalPart());	  return    equalise(valueNull,    value.getLocalPart());    	non-compiled	[CE]  ';'  expected	102	None	replace
185	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getLocalPart(),  false);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getLocalPart(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getLocalPart(),  false);	  return    equalise(valueNull,    value.getLocalPart());    	non-compiled	[CE]  ';'  expected	102	None	replace
186	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getNode());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getNode());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getNode());	  return    equalise(valueNull,    value.getLocalPart());    	non-compiled	[CE]  ';'  expected	102	None	replace
187	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getOp());  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getOp());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getOp());	  return    equalise(valueNull,    value.getLocalPart());    	non-compiled	[CE]  ';'  expected	102	None	replace
188	[BUG]  [BUGGY]  return  equalise(valueNull,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);	  return    equalise(valueNull,    valueUndefined?    Boolean.TRUE    :    Boolean.FALSE);    	non-compiled	[CE]  ';'  expected	33	None	replace
189	[BUG]  [BUGGY]  return  equalise(valueNull,  valueNull?  Boolean.FALSE  :  Boolean.TRUE);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueNull?  Boolean.FALSE  :  Boolean.TRUE);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueNull?  Boolean.FALSE  :  Boolean.TRUE);	  return    equalise(valueNull,    valueUndefined?    Boolean.TRUE    :    Boolean.FALSE);    	non-compiled	[CE]  ';'  expected	33	None	replace
190	[BUG]  [BUGGY]  return  equalise(value,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);	  return    equalise(valueNull,    valueUndefined?    Boolean.TRUE    :    Boolean.FALSE);    	non-compiled	[CE]  ';'  expected	33	None	replace
191	[BUG]  [BUGGY]  return  equalise(valueUndefined,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueUndefined,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueUndefined,  valueNull?  Boolean.TRUE  :  Boolean.FALSE);	  return    equalise(valueNull,    valueUndefined?    Boolean.TRUE    :    Boolean.FALSE);    	non-compiled	[CE]  ';'  expected	33	None	replace
192	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op  +  2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op  +  2);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op  +  2);	  return    ValueUtils.equalValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	90	None	replace
193	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op  +  1,  valueNull);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op  +  1,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op  +  1,  valueNull);	  return    ValueUtils.equalValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	90	None	replace
194	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  +  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  +  1);	  return    ValueUtils.equalValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	90	None	replace
195	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op  +  3);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op  +  3);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op  +  3);	  return    ValueUtils.equalValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	90	None	replace
196	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	8	None	replace
197	[BUG]  [BUGGY]  return  valueNull?  ValueUtil.isLiteralValue(value.getLastChild()):  ValueUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtil.isLiteralValue(value.getLastChild()):  ValueUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtil.isLiteralValue(value.getLastChild()):  ValueUtil.isLiteralValue(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	8	None	replace
198	[BUG]  [BUGGY]  return  valueNull?  ValueUtil.isLiteralValue(value.getLastChild()):  ValueUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtil.isLiteralValue(value.getLastChild()):  ValueUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtil.isLiteralValue(value.getLastChild()):  ValueUtil.isLiteralValue(value.getLastChild());	  return    valueUndefined?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	8	None	replace
199	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isEquivalentValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isEquivalentValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isEquivalentValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isEquivalentValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	164	None	replace
200	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isScalarValue(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isScalarValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isScalarValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isEquivalentValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	164	None	replace
201	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isNegatedValue(value.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isNegatedValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isNegatedValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isEquivalentValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	164	None	replace
202	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isShortValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isShortValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isShortValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isEquivalentValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	164	None	replace
203	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	99	None	replace
204	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	99	None	replace
205	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	99	None	replace
206	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
207	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
208	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
209	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
210	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
211	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()!=  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
212	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
213	[BUG]  [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
214	[BUG]  [BUGGY]  return  valueNull?  true  :  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  true  :  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  true  :  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
215	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  value.getType()!=  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
216	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.getValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	9	None	replace
217	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getString());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getString());	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	9	None	replace
218	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLocalPart());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLocalPart());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLocalPart());	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	9	None	replace
219	[BUG]  [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
220	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()!=  Token.GETELEM;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()!=  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()!=  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
221	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
222	[BUG]  [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
223	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
224	[BUG]  [BUGGY]  return  valueNull?  true  :  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  true  :  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  true  :  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
225	[BUG]  [BUGGY]  Node  value  =  op.getNext();  break;  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getNext();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getNext();  break;	  Node    value    =    value.getNext();    break;    	non-compiled	[CE]  ';'  expected	75	None	replace
226	[BUG]  [BUGGY]  Node  value  =  this.value.getNext();  break;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getNext();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getNext();  break;	  Node    value    =    value.getNext();    break;    	non-compiled	[CE]  ';'  expected	75	None	replace
227	[BUG]  [BUGGY]  Node  value  =  node.getNext();  break;  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  node.getNext();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  node.getNext();  break;	  Node    value    =    value.getNext();    break;    	non-compiled	[CE]  ';'  expected	75	None	replace
228	[BUG]  [BUGGY]  Node  value  =  item.getNext();  break;  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  item.getNext();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  item.getNext();  break;	  Node    value    =    value.getNext();    break;    	non-compiled	[CE]  ';'  expected	75	None	replace
229	[BUG]  [BUGGY]  Node  value  =  getValue();  break;  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  getValue();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  getValue();  break;	  Node    value    =    value.getNext();    break;    	non-compiled	[CE]  ';'  expected	75	None	replace
230	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  true  :  this.valueNull;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  valueNull)?  true  :  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  valueNull)?  true  :  this.valueNull;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
231	[BUG]  [BUGGY]  return(valueNull  &&  valueNull)?  false  :  this.valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  &&  valueNull)?  false  :  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  &&  valueNull)?  false  :  this.valueNull;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
232	[BUG]  [BUGGY]  return(this.valueNull  ||  valueNull)?  false  :  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(this.valueNull  ||  valueNull)?  false  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(this.valueNull  ||  valueNull)?  false  :  valueNull;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
233	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :  this.valueUndefined;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  valueNull)?  false  :  this.valueUndefined;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
234	[BUG]  [BUGGY]  return(this.valueNull  ||  valueNull)?  false  :  this.valueNull;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(this.valueNull  ||  valueNull)?  false  :  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(this.valueNull  ||  valueNull)?  false  :  this.valueNull;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
235	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :  this.valueValue;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :  this.valueValue;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  valueNull)?  false  :  this.valueValue;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
236	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getString());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getString());	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	47	None	replace
237	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLocalPart());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLocalPart());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLocalPart());	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	47	None	replace
238	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)/  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)/  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)/  1;	  return    ValueUtils.equalValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	67	None	replace
239	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)-  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)-  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)-  2;	  return    ValueUtils.equalValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	67	None	replace
240	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)-  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)-  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull)-  1;	  return    ValueUtils.equalValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	67	None	replace
241	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull  -  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op),  valueNull  -  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op),  valueNull  -  1;	  return    ValueUtils.equalValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	67	None	replace
242	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)-  1L;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)-  1L;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)-  1L;	  return    ValueUtils.equalValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	67	None	replace
243	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  break;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getFirstChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	73	None	replace
244	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  break;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getFirstChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	73	None	replace
245	[BUG]  [BUGGY]  Node  value  =  this.value.getLastChild();  break;  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getLastChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getLastChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	73	None	replace
246	[BUG]  [BUGGY]  Node  value  =  node.getFirstChild();  break;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  node.getFirstChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  node.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	73	None	replace
247	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op  -  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op  -  1);	  return    ValueUtils.equalValue(value,    valueNull    -    1);    	non-compiled	[CE]  ';'  expected	94	None	replace
248	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  2);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  2);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  -  2);	  return    ValueUtils.equalValue(value,    valueNull    -    1);    	non-compiled	[CE]  ';'  expected	94	None	replace
249	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  1,  valueUndefined);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  1,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  -  1,  valueUndefined);	  return    ValueUtils.equalValue(value,    valueNull    -    1);    	non-compiled	[CE]  ';'  expected	94	None	replace
250	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  /  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  /  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  /  1);	  return    ValueUtils.equalValue(value,    valueNull    -    1);    	non-compiled	[CE]  ';'  expected	94	None	replace
251	[BUG]  [BUGGY]  if(valueNull)  {  return  this.valueUndefined;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  this.valueUndefined;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  this.valueUndefined;  }	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
252	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  this.valueUndefined  :  this.valueUndefined;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  valueNull)?  this.valueUndefined  :  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  valueNull)?  this.valueUndefined  :  this.valueUndefined;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
253	[BUG]  [BUGGY]  return  valueNull?  this.valueUndefined  :  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  this.valueUndefined  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  this.valueUndefined  :  valueNull;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
254	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  equivalent);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  equivalent);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  equivalent);	  return    ValueUtils.equal(value,    equivalent);    	non-compiled	[CE]  ';'  expected	82	None	replace
255	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  value);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  value);	  return    ValueUtils.equal(value,    equivalent);    	non-compiled	[CE]  ';'  expected	82	None	replace
256	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valueNull);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalizer,  valueNull);	  return    ValueUtils.equal(value,    equalizer);    	non-compiled	[CE]  ';'  expected	78	None	replace
257	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalizer,  op);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalizer,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalizer,  op);	  return    ValueUtils.equal(value,    equalizer);    	non-compiled	[CE]  ';'  expected	78	None	replace
258	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull?  equalizer  :  equalizer);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull?  equalizer  :  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull?  equalizer  :  equalizer);	  return    ValueUtils.equal(value,    equalizer);    	non-compiled	[CE]  ';'  expected	78	None	replace
259	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  valueNull;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	125	None	replace
260	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  equalizer;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	125	None	replace
261	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.valueUndefined;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  equalizer.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  equalizer.valueUndefined;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	125	None	replace
262	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  value;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  value;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	125	None	replace
263	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.getValue();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  equalizer.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  equalizer.getValue();	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	125	None	replace
264	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getString());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getString());    	non-compiled	[CE]  ';'  expected	40	None	replace
265	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getQualifiedName());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getQualifiedName());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getQualifiedName());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getString());    	non-compiled	[CE]  ';'  expected	40	None	replace
266	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getString()  +  1);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getString()  +  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getString()  +  1);	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getString());    	non-compiled	[CE]  ';'  expected	40	None	replace
267	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  equal);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	138	None	replace
268	[BUG]  [BUGGY]  return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild(),  equal);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	138	None	replace
269	[BUG]  [BUGGY]  return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild(),  value);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild(),  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild(),  value);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	138	None	replace
270	[BUG]  [BUGGY]  return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  value);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  value);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	138	None	replace
271	[BUG]  [BUGGY]  return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  valueNull);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  valueNull);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	138	None	replace
272	[BUG]  [BUGGY]  return  equalise(valueUndefined,  valueNull);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueUndefined,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueUndefined,  valueNull);	  return    equalise(valueNull,    valueNull);    	non-compiled	[CE]  ';'  expected	29	None	replace
273	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	132	None	replace
274	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isLiteralValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	132	None	replace
275	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getString());	  return    valueNull?    valueUndefined    :    ValueUtils.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	132	None	replace
276	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getNext());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getNext());	  return    valueNull?    valueUndefined    :    ValueUtils.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	132	None	replace
277	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  ==  0;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  ==  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  ==  0;	  return    ValueUtils.getValue(value,    op)    >=    0;    	non-compiled	[CE]  ';'  expected	160	None	replace
278	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)!=  0;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)!=  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)!=  0;	  return    ValueUtils.getValue(value,    op)    >=    0;    	non-compiled	[CE]  ';'  expected	160	None	replace
279	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  >>  0;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  >>  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  >>  0;	  return    ValueUtils.getValue(value,    op)    >=    0;    	non-compiled	[CE]  ';'  expected	160	None	replace
280	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  <=  0;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  <=  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  <=  0;	  return    ValueUtils.getValue(value,    op)    >=    0;    	non-compiled	[CE]  ';'  expected	160	None	replace
281	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)>  0;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)>  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)>  0;	  return    ValueUtils.getValue(value,    op)    >=    0;    	non-compiled	[CE]  ';'  expected	160	None	replace
282	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  ==  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  ==  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  ==  1;	  return    ValueUtils.getValue(value,    op)    >=    0;    	non-compiled	[CE]  ';'  expected	160	None	replace
283	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)/  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)/  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)/  1;	  return    ValueUtils.getValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
284	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)-  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)-  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)-  2;	  return    ValueUtils.getValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
285	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull  -  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull  -  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull  -  1;	  return    ValueUtils.getValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
286	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)-  1L;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)-  1L;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)-  1L;	  return    ValueUtils.getValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
287	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)-  1  +  valueNull;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)-  1  +  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)-  1  +  valueNull;	  return    ValueUtils.getValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
288	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)-  3;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)-  3;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)-  3;	  return    ValueUtils.getValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
289	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  valueNull);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalizer,  valueNull);	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
290	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  equalizer);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  equalizer);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equalValue(value,  equalizer);  }	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
291	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  op);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalizer,  op);	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
292	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  value);	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
293	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  equivalent);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  equivalent);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equalValue(value,  equivalent);  }	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
294	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  null);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  null);	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
295	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  equal);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  equal);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equalValue(value,  equal);  }	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
296	[BUG]  [BUGGY]  ReturnValueUtils.equalValue(value,  op);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ReturnValueUtils.equalValue(value,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	ReturnValueUtils.equalValue(value,  op);	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
297	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
298	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
299	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
300	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
301	[BUG]  [BUGGY]  return  valueNull  -  this.valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  -  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  -  this.valueNull;	  return    this.valueNull    -    valueNull;    	non-compiled	[CE]  ';'  expected	122	None	replace
302	[BUG]  [BUGGY]  return  this.valueNull  -  valueNull  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  -  valueNull  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  -  valueNull  +  1;	  return    this.valueNull    -    valueNull;    	non-compiled	[CE]  ';'  expected	122	None	replace
303	[BUG]  [BUGGY]  return  this.valueNull  /  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  /  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  /  valueNull;	  return    this.valueNull    -    valueNull;    	non-compiled	[CE]  ';'  expected	122	None	replace
304	[BUG]  [BUGGY]  return  op  -  valueNull;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  -  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  -  valueNull;	  return    this.valueNull    -    valueNull;    	non-compiled	[CE]  ';'  expected	122	None	replace
305	[BUG]  [BUGGY]  return  equalise(value,  op);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  op);	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
306	[BUG]  [BUGGY]  return  valueNull?  equalise(value,  valueUndefined):  equalise(value,  valueUndefined);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalise(value,  valueUndefined):  equalise(value,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalise(value,  valueUndefined):  equalise(value,  valueUndefined);	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
307	[BUG]  [BUGGY]  if(valueNull)  {  return  equalise(value,  valueUndefined);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  equalise(value,  valueUndefined);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  equalise(value,  valueUndefined);  }  else  {  throw  new  IllegalStateException( " ");  }	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
308	[BUG]  [BUGGY]  if(valueNull)  {  return  equalise(value,  valueUndefined);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  equalise(value,  valueUndefined);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  equalise(value,  valueUndefined);  }	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
309	[BUG]  [BUGGY]  if(valueNull)  {  return  equalise(value,  valueUndefined);  }  else  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  equalise(value,  valueUndefined);  }  else  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  equalise(value,  valueUndefined);  }  else  {  return  false;  }	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
310	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  Double.POSITIVE_INFINITY;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  Double.POSITIVE_INFINITY;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  Double.POSITIVE_INFINITY;	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
311	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  Boolean.TRUE;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  Boolean.TRUE;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  Boolean.TRUE;	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
312	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  Boolean.FALSE;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  Boolean.FALSE;	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
313	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  Integer.toString(value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  Integer.toString(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  Integer.toString(value.getLastChild());	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
314	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  Integer.parseInt(value.getLastChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  Integer.parseInt(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  Integer.parseInt(value.getLastChild());	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
315	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  0L);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  0L);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  0L);	  return    ValueUtils.equalValue(value,    0);    	non-compiled	[CE]  ';'  expected	92	None	replace
316	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  1);	  return    ValueUtils.equalValue(value,    0);    	non-compiled	[CE]  ';'  expected	92	None	replace
317	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  false);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  false);	  return    ValueUtils.equalValue(value,    0);    	non-compiled	[CE]  ';'  expected	92	None	replace
318	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	10	None	replace
319	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	10	None	replace
320	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	10	None	replace
321	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	10	None	replace
322	[BUG]  [BUGGY]  return  valueNull  &&  equalizer;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  equalizer;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
323	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull  ||  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull  ||  valueNull;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
324	[BUG]  [BUGGY]  return  equalizer  &&  valueNull.booleanValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull.booleanValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull.booleanValue();	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
325	[BUG]  [BUGGY]  return  equalizer  &&  valueUndefined;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueUndefined;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
326	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getString());	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	50	None	replace
327	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLocalPart());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLocalPart());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLocalPart());	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	50	None	replace
328	[BUG]  [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equal  :  ValueUtils.getValue(value.getFirstChild());	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	50	None	replace
329	[BUG]  [BUGGY]  return  valueNull?  true  :  valueUndefined  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  true  :  valueUndefined  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  true  :  valueUndefined  +  1;	  return    valueNull?    false    :    valueUndefined    +    1;    	non-compiled	[CE]  ';'  expected	108	None	replace
330	[BUG]  [BUGGY]  return  valueNull?  false  :  valueUndefined  +  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueUndefined  +  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueUndefined  +  2;	  return    valueNull?    false    :    valueUndefined    +    1;    	non-compiled	[CE]  ';'  expected	108	None	replace
331	[BUG]  [BUGGY]  return  valueNull?  false  :  valueNull  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueNull  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueNull  +  1;	  return    valueNull?    false    :    valueUndefined    +    1;    	non-compiled	[CE]  ';'  expected	108	None	replace
332	[BUG]  [BUGGY]  Node  value  =  op.getLastChild();  break;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getLastChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getLastChild();  break;	  Node    value    =    value.getLastChild();    break;    	non-compiled	[CE]  ';'  expected	76	None	replace
333	[BUG]  [BUGGY]  Node  value  =  item.getLastChild();  break;  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  item.getLastChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  item.getLastChild();  break;	  Node    value    =    value.getLastChild();    break;    	non-compiled	[CE]  ';'  expected	76	None	replace
334	[BUG]  [BUGGY]  Node  value  =  node.getLastChild();  break;  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  node.getLastChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  node.getLastChild();  break;	  Node    value    =    value.getLastChild();    break;    	non-compiled	[CE]  ';'  expected	76	None	replace
335	[BUG]  [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.equals(valueNull)?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.equals(valueNull)?  valueNull  :  equalizer;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
336	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueUndefined)?  valueNull  :  equalizer;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
337	[BUG]  [BUGGY]  return  valueNull.equals(equivalent)?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.equals(equivalent)?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.equals(equivalent)?  valueNull  :  equalizer;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
338	[BUG]  [BUGGY]  return  valueNull.equals(equalizer)?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.equals(equalizer)?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.equals(equalizer)?  valueNull  :  equalizer;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
339	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  valueUndefined  :  equalizer;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
340	[BUG]  [BUGGY]  return  op.equals(valueNull)?  valueNull  :  equalizer;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op.equals(valueNull)?  valueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op.equals(valueNull)?  valueNull  :  equalizer;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
341	[BUG]  [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(valueUndefined);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalise(valueUndefined):  equalise(valueUndefined);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
342	[BUG]  [BUGGY]  if(valueNull)  {  return  equalise(valueUndefined);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  equalise(valueUndefined);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  equalise(valueUndefined);  }	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
343	[BUG]  [BUGGY]  if(valueNull)  {  return  equalise(valueUndefined);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  equalise(valueUndefined);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  equalise(valueUndefined);  }  else  {  throw  new  IllegalStateException( " ");  }	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
344	[BUG]  [BUGGY]  return!equivalent?  equalise(valueUndefined):  equalise(valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!equivalent?  equalise(valueUndefined):  equalise(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!equivalent?  equalise(valueUndefined):  equalise(valueNull);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
345	[BUG]  [BUGGY]  return  op.equals(valueUndefined);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op.equals(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op.equals(valueUndefined);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
346	[BUG]  [BUGGY]  return!equivalent?  equalise(valueUndefined):  equalise(valueUndefined);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!equivalent?  equalise(valueUndefined):  equalise(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!equivalent?  equalise(valueUndefined):  equalise(valueUndefined);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
347	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  1);	  return    ValueUtils.getValue(value,    op,    0);    	non-compiled	[CE]  ';'  expected	86	None	replace
348	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  2);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  2);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  2);	  return    ValueUtils.getValue(value,    op,    0);    	non-compiled	[CE]  ';'  expected	86	None	replace
349	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  3);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  3);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  3);	  return    ValueUtils.getValue(value,    op,    0);    	non-compiled	[CE]  ';'  expected	86	None	replace
350	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  0L);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  0L);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  0L);	  return    ValueUtils.getValue(value,    op,    0);    	non-compiled	[CE]  ';'  expected	86	None	replace
351	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	24	None	replace
352	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	24	None	replace
353	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getFirstChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getFirstChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	24	None	replace
354	[BUG]  [BUGGY]  return  ValueUtils.equal(valueUndefined,  value);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueUndefined,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueUndefined,  value);	  return    ValueUtils.equal(valueNull,    value);    	non-compiled	[CE]  ';'  expected	105	None	replace
355	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueUndefined);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueUndefined);	  return    ValueUtils.equal(valueNull,    value);    	non-compiled	[CE]  ';'  expected	105	None	replace
356	[BUG]  [BUGGY]  return  valueNull?  true  :  value;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  true  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  true  :  value;	  return    valueNull?    false    :    value;    	non-compiled	[CE]  ';'  expected	4	None	replace
357	[BUG]  [BUGGY]  return  valueNull?  false  :  value.toString();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.toString();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.toString();	  return    valueNull?    false    :    value;    	non-compiled	[CE]  ';'  expected	4	None	replace
358	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtil.getValue(value.getFirstChild());	  return    valueNull?    equalizer    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
359	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtil.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtil.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtil.getValue(value.getFirstChild());	  return    valueNull?    equalizer    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
360	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtil.getValue(value.getLastChild());	  return    valueNull?    equalizer    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
361	[BUG]  [BUGGY]  return  equalizer?  ValueUtil.getValue(value.getFirstChild()):  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  ValueUtil.getValue(value.getFirstChild()):  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  ValueUtil.getValue(value.getFirstChild()):  ValueUtil.getValue(value.getLastChild());	  return    valueNull?    equalizer    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
362	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  equalizer);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  equalizer);	  return    valueNull?    equalizer    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
363	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
364	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op).doubleValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op).doubleValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op).doubleValue();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
365	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op).shortValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op).shortValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op).shortValue();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
366	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op).toString();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op).toString();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op).toString();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
367	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  value).booleanValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  value).booleanValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  value).booleanValue();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
368	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  value.booleanValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  value.booleanValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull,  value.booleanValue();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
369	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  this.value;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  this.value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  this.value;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
370	[BUG]  [BUGGY]  return  valueNull?  this.valueNull  :  value;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  this.valueNull  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  this.valueNull  :  value;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
371	[BUG]  [BUGGY]  return  valueNull?  this.valueNull  :  valueNull;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  this.valueNull  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  this.valueNull  :  valueNull;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
372	[BUG]  [BUGGY]  return  valueNull?  this.valueNull  :  valueUndefined;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  this.valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  this.valueNull  :  valueUndefined;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
373	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	103	None	replace
374	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtil.getValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	103	None	replace
375	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	103	None	replace
376	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getString(),  true);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getString(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getString(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	103	None	replace
377	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	103	None	replace
378	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.getValue(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
379	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  valueNull,  op);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  valueNull,  op);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equalValue(value,  valueNull,  op);  }	  return    ValueUtils.equalValue(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	46	None	replace
380	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  op,  numValue);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  op,  numValue);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull,  op,  numValue);	  return    ValueUtils.equalValue(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	46	None	replace
381	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  op,  null);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  op,  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull,  op,  null);	  return    ValueUtils.equalValue(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	46	None	replace
382	[BUG]  [BUGGY]  return  valueNull.equals(equivalent);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.equals(equivalent);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.equals(equivalent);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
383	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
384	[BUG]  [BUGGY]  return  valueNull.equals(equalizer);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.equals(equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.equals(equalizer);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
385	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(valueUndefined);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)&&  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
386	[BUG]  [BUGGY]  return  op.equals(valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op.equals(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op.equals(valueNull);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
387	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)||  equalizer.equals(valueUndefined);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)||  equalizer.equals(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)||  equalizer.equals(valueUndefined);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
388	[BUG]  [BUGGY]  return  valueNull?  true  :  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  true  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  true  :  valueNull;	  return    valueNull?    true    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	1	None	replace
389	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getUpperBound();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getUpperBound();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getUpperBound();	  return    valueNull?    valueNull    :    value.getLocalPart();    	non-compiled	[CE]  ';'  expected	152	None	replace
390	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getNode();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getNode();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getNode();	  return    valueNull?    valueNull    :    value.getLocalPart();    	non-compiled	[CE]  ';'  expected	152	None	replace
391	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getGlobalScope();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getGlobalScope();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getGlobalScope();	  return    valueNull?    valueNull    :    value.getLocalPart();    	non-compiled	[CE]  ';'  expected	152	None	replace
392	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getLocalPart();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getLocalPart();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getLocalPart();	  return    valueNull?    valueNull    :    value.getLocalPart();    	non-compiled	[CE]  ';'  expected	152	None	replace
393	[BUG]  [BUGGY]  return  valueNull?  null  :  value.getLocalPart();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  value.getLocalPart();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  value.getLocalPart();	  return    valueNull?    valueNull    :    value.getLocalPart();    	non-compiled	[CE]  ';'  expected	152	None	replace
394	[BUG]  [BUGGY]  return  value.getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getValue();	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
395	[BUG]  [BUGGY]  return  valueNull.getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.getValue();	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
396	[BUG]  [BUGGY]  return  valueNull?  equalizer.getValue()  :  equalizer.getValue();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer.getValue()  :  equalizer.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer.getValue()  :  equalizer.getValue();	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
397	[BUG]  [BUGGY]  return  valueNull?  equalizer.getValue()  :  null;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer.getValue()  :  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer.getValue()  :  null;	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
398	[BUG]  [BUGGY]  return  valueUndefined?  equalizer.getValue()  :  equalizer.getValue();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  equalizer.getValue()  :  equalizer.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  equalizer.getValue()  :  equalizer.getValue();	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
399	[BUG]  [BUGGY]  return  valueNull? "null "  :  equalizer.getValue();  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  equalizer.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  equalizer.getValue();	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
400	[BUG]  [BUGGY]  return  valueNull  ||  equalizer.getValue();  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  equalizer.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  equalizer.getValue();	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
401	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  lv);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  lv);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  lv);	  return    ValueUtils.equalValue(value,    rval);    	non-compiled	[CE]  ';'  expected	91	None	replace
402	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  val);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  val);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  val);	  return    ValueUtils.equalValue(value,    rval);    	non-compiled	[CE]  ';'  expected	91	None	replace
403	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  lval);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  lval);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  lval);	  return    ValueUtils.equalValue(value,    rval);    	non-compiled	[CE]  ';'  expected	91	None	replace
404	[BUG]  [BUGGY]  return!equivalent;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!equivalent;	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
405	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueUndefined;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull  ||  valueNull)  {  return!valueUndefined;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull  ||  valueNull)  {  return!valueUndefined;  }	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
406	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)return!valueUndefined;  if(valueNull)  {  return  false;  }	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
407	[BUG]  [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)return!valueUndefined;  if(valueNull  ||  valueNull)  {  return  false;  }	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
408	[BUG]  [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  if(valueNull)  {  return  false;  }  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  if(valueNull)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return!valueUndefined;  }  else  if(valueNull)  {  return  false;  }	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
409	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getLastChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild());    	non-compiled	[CE]  ';'  expected	20	None	replace
410	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild());    	non-compiled	[CE]  ';'  expected	20	None	replace
411	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  valueNull,  equalizer);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  valueNull,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  valueNull,  equalizer);	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
412	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  valueNull);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  valueNull);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op,  valueNull);  }	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
413	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  valueNull,  valueUndefined);	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
414	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  valueNull,  equal);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  valueNull,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  valueNull,  equal);	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
415	[BUG]  [BUGGY]  return  equalise(value,  value.getFirstChild());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  value.getFirstChild());	  return    equalise(valueNull,    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	18	None	replace
416	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getFirstChild(),  false);	  return    equalise(valueNull,    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	18	None	replace
417	[BUG]  [BUGGY]  return  equalise(value,  value.getLastChild());  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  value.getLastChild());	  return    equalise(valueNull,    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	18	None	replace
418	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getFirstChild(),  true);	  return    equalise(valueNull,    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	18	None	replace
419	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getNext());  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getNext());	  return    equalise(valueNull,    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	18	None	replace
420	[BUG]  [BUGGY]  return  op?  0  :  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  0  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  0  :  valueNull;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
421	[BUG]  [BUGGY]  return  valueNull?  0  :  op  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  0  :  op  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  0  :  op  +  1;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
422	[BUG]  [BUGGY]  return  valueNull?  1  :  op;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  1  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  1  :  op;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
423	[BUG]  [BUGGY]  return  opNull?  0  :  valueNull;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  opNull?  0  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  opNull?  0  :  valueNull;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
424	[BUG]  [BUGGY]  return  valueNull?  0  :  value;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  0  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  0  :  value;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
425	[BUG]  [BUGGY]  return  op  null?  0  :  valueNull;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  null?  0  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  null?  0  :  valueNull;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
426	[BUG]  [BUGGY]  return  equalise(value,  valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull,  valueUndefined);	  return    equalise(value,    valueNull);    	non-compiled	[CE]  ';'  expected	32	None	replace
427	[BUG]  [BUGGY]  return  equalise(value,  valueNull,  op);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull,  op);	  return    equalise(value,    valueNull);    	non-compiled	[CE]  ';'  expected	32	None	replace
428	[BUG]  [BUGGY]  return  equalise(value,  valueNull,  value);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull,  value);	  return    equalise(value,    valueNull);    	non-compiled	[CE]  ';'  expected	32	None	replace
429	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
430	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getLastChild(),  true));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getLastChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getLastChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
431	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
432	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
433	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equal)&&  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equal)&&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equal)&&  valueNull;	  return    ValueUtils.equal(value,    equal);    	non-compiled	[CE]  ';'  expected	79	None	replace
434	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equal  -  valueNull);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equal  -  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equal  -  valueNull);	  return    ValueUtils.equal(value,    equal);    	non-compiled	[CE]  ';'  expected	79	None	replace
435	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equal)-  valueNull;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equal)-  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equal)-  valueNull;	  return    ValueUtils.equal(value,    equal);    	non-compiled	[CE]  ';'  expected	79	None	replace
436	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
437	[BUG]  [BUGGY]  Node  value  =  item.getFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  item.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  item.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
438	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getNext());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getNext());	  return    valueNull?    valueNull    :    ValueUtils.isScalarValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	39	None	replace
439	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  valueUndefined);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull  -  valueUndefined);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
440	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equalValue);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equalValue);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull  -  equalValue);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
441	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equal);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull  -  equal);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
442	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op  -  value);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op  -  value);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
443	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equalizer);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull  -  equalizer);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
444	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equality);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  equality);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull  -  equality);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
445	[BUG]  [BUGGY]  return  valueNull?  equalizer.valueUndefined  :  equalizer.valueUndefined;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer.valueUndefined  :  equalizer.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer.valueUndefined  :  equalizer.valueUndefined;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
446	[BUG]  [BUGGY]  return  equalizer.valueUndefined?  valueNull  :  equalizer.valueUndefined;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.valueUndefined?  valueNull  :  equalizer.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.valueUndefined?  valueNull  :  equalizer.valueUndefined;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
447	[BUG]  [BUGGY]  return  equalizer.valueUndefined  -  valueNull;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.valueUndefined  -  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.valueUndefined  -  valueNull;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
448	[BUG]  [BUGGY]  return  equalizer.valueUndefined  &&  valueNull;  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.valueUndefined  &&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.valueUndefined  &&  valueNull;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
449	[BUG]  [BUGGY]  return  valueNull  ||  equalizer.valueUndefined;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  equalizer.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  equalizer.valueUndefined;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
450	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  ||  valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getLastChild();  return(valueNull  ||  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	97	None	replace
451	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  &&  valueNull);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  &&  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getFirstChild();  return(valueNull  &&  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	97	None	replace
452	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  &&  valueNull);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  &&  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getLastChild();  return(valueNull  &&  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	97	None	replace
453	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  return(valueNull  ||  valueNull);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getFirstChild();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getFirstChild();  return(valueNull  ||  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	97	None	replace
454	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||  equal);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getFirstChild();  return(valueNull  ||  equal);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	97	None	replace
455	[BUG]  [BUGGY]  return  valueNull  ||  equalizer;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  equalizer;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
456	[BUG]  [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.FUNCTION;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
457	[BUG]  [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
458	[BUG]  [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()!=  Token.FUNCTION;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
459	[BUG]  [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull  &&  value.getFirstChild().getType()  ==  Token.NAME;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
460	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtils.getValue(value.getFirstChild());	  return    valueNull?    equalizer    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	48	None	replace
461	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtils.getValue(value.getFirstChild());	  return    valueNull?    equalizer    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	48	None	replace
462	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild());	  return    valueNull?    equalizer    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	48	None	replace
463	[BUG]  [BUGGY]  return  equalizer?  ValueUtils.getValue(value.getFirstChild()):  ValueUtils.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  ValueUtils.getValue(value.getFirstChild()):  ValueUtils.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  ValueUtils.getValue(value.getFirstChild()):  ValueUtils.getValue(value.getLastChild());	  return    valueNull?    equalizer    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	48	None	replace
464	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getString());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
465	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild().getString());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
466	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getLastChild().getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getLastChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.parseInt(value.getLastChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
467	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
468	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getFirstChild();	  return    valueNull?    valueUndefined    :    value;    	non-compiled	[CE]  ';'  expected	34	None	replace
469	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getType();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getType();	  return    valueNull?    valueUndefined    :    value;    	non-compiled	[CE]  ';'  expected	34	None	replace
470	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getLastChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getLastChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getLastChild();	  return    valueNull?    valueUndefined    :    value;    	non-compiled	[CE]  ';'  expected	34	None	replace
471	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  equalizer;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  equalizer;	  return    valueNull?    valueUndefined    :    value;    	non-compiled	[CE]  ';'  expected	34	None	replace
472	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getType();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getType();	  return    valueNull?    valueNull    :    value;    	non-compiled	[CE]  ';'  expected	128	None	replace
473	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getFirstChild();	  return    valueNull?    valueNull    :    value;    	non-compiled	[CE]  ';'  expected	128	None	replace
474	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getLastChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getLastChild();	  return    valueNull?    valueNull    :    value;    	non-compiled	[CE]  ';'  expected	128	None	replace
475	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	134	None	replace
476	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	134	None	replace
477	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	134	None	replace
478	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	134	None	replace
479	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	134	None	replace
480	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)+  2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)+  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)+  2;	  return    ValueUtils.equalValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
481	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)+  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull)+  1;	  return    ValueUtils.equalValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
482	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)+  3;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)+  3;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)+  3;	  return    ValueUtils.equalValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
483	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  value)+  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  value)+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  value)+  1;	  return    ValueUtils.equalValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
484	[BUG]  [BUGGY]  return  this.valueNull  &&  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  &&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  &&  valueNull;	  return    this.valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	27	None	replace
485	[BUG]  [BUGGY]  return  valueNull  ||  this.valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  this.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  this.valueNull;	  return    this.valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	27	None	replace
486	[BUG]  [BUGGY]  return  this.valueNull  ||  op;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  ||  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  ||  op;	  return    this.valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	27	None	replace
487	[BUG]  [BUGGY]  return  this.valueNull?  valueNull  :  valueNull;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  valueNull  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  valueNull  :  valueNull;	  return    this.valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	27	None	replace
488	[BUG]  [BUGGY]  return  this.valueUndefined  ||  valueNull;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined  ||  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined  ||  valueNull;	  return    this.valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	27	None	replace
489	[BUG]  [BUGGY]  return  this.valueNull?  valueNull  :  valueUndefined;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  valueNull  :  valueUndefined;	  return    this.valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	27	None	replace
490	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op)+  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op)+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op)+  1;	  return    ValueUtils.equal(value,    op);    	non-compiled	[CE]  ';'  expected	77	None	replace
491	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op)-  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op)-  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op)-  1;	  return    ValueUtils.equal(value,    op);    	non-compiled	[CE]  ';'  expected	77	None	replace
492	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op  +  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op  +  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op  +  1);	  return    ValueUtils.equal(value,    op);    	non-compiled	[CE]  ';'  expected	77	None	replace
493	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op)/  2;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op)/  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op)/  2;	  return    ValueUtils.equal(value,    op);    	non-compiled	[CE]  ';'  expected	77	None	replace
494	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getLastChild(),  false);	  return    equalise(valueNull,    value.getLastChild());    	non-compiled	[CE]  ';'  expected	17	None	replace
495	[BUG]  [BUGGY]  return  equalise(value.getFirstChild(),  value.getLastChild());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value.getFirstChild(),  value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value.getFirstChild(),  value.getLastChild());	  return    equalise(valueNull,    value.getLastChild());    	non-compiled	[CE]  ';'  expected	17	None	replace
496	[BUG]  [BUGGY]  return  equalise(valueUndefined,  value.getLastChild());  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueUndefined,  value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueUndefined,  value.getLastChild());	  return    equalise(valueNull,    value.getLastChild());    	non-compiled	[CE]  ';'  expected	17	None	replace
497	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getLastChild(),  true);	  return    equalise(valueNull,    value.getLastChild());    	non-compiled	[CE]  ';'  expected	17	None	replace
498	[BUG]  [BUGGY]  return  op  ==  0?  valueNull  :  op;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  ==  0?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  ==  0?  valueNull  :  op;	  return    op    >    0?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	113	None	replace
499	[BUG]  [BUGGY]  return  op!=  0?  valueNull  :  op;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op!=  0?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op!=  0?  valueNull  :  op;	  return    op    >    0?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	113	None	replace
500	[BUG]  [BUGGY]  return  valueNull  >  0?  valueNull  :  op;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  >  0?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  >  0?  valueNull  :  op;	  return    op    >    0?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	113	None	replace
501	[BUG]  [BUGGY]  return  op  >=  0?  valueNull  :  op;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  >=  0?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  >=  0?  valueNull  :  op;	  return    op    >    0?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	113	None	replace
502	[BUG]  [BUGGY]  return  valueNull?  ValueUtil.getValue(value.getFirstChild()):  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtil.getValue(value.getFirstChild()):  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtil.getValue(value.getFirstChild()):  ValueUtil.getValue(value.getLastChild());	  return    valueNull?    valueNull    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
503	[BUG]  [BUGGY]  return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equal  :  ValueUtil.getValue(value.getLastChild());	  return    valueNull?    valueNull    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
504	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getString();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getString();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getString();	  return    valueNull?    valueUndefined    :    value.getValue();    	non-compiled	[CE]  ';'  expected	144	None	replace
505	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  value.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  value.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  value.getValue();	  return    valueNull?    valueUndefined    :    value.getValue();    	non-compiled	[CE]  ';'  expected	144	None	replace
506	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  true);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  true);	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
507	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
508	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  throw  new  IllegalStateException( " ");  }	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
509	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  false,  valueNull);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  false,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  false,  valueNull);	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
510	[BUG]  [BUGGY]  ReturnValueUtils.getValue(value,  op,  true);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ReturnValueUtils.getValue(value,  op,  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	ReturnValueUtils.getValue(value,  op,  true);	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
511	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  Preconditions.checkState(value.getType()  ==  Token.EXPR_RESULT);  }	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
512	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  this.valueUndefined);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  this.valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  this.valueUndefined);	  return    ValueUtils.equalValue(value,    this.valueNull);    	non-compiled	[CE]  ';'  expected	157	None	replace
513	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull,  op);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  this.valueNull,  op);	  return    ValueUtils.equalValue(value,    this.valueNull);    	non-compiled	[CE]  ';'  expected	157	None	replace
514	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull,  valueNull);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  this.valueNull,  valueNull);	  return    ValueUtils.equalValue(value,    this.valueNull);    	non-compiled	[CE]  ';'  expected	157	None	replace
515	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  this.valueNull);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equalValue(value,  this.valueNull);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equalValue(value,  this.valueNull);  }	  return    ValueUtils.equalValue(value,    this.valueNull);    	non-compiled	[CE]  ';'  expected	157	None	replace
516	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false));    	non-compiled	[CE]  ';'  expected	137	None	replace
517	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild(),  true));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false));    	non-compiled	[CE]  ';'  expected	137	None	replace
518	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  true));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getLastChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false));    	non-compiled	[CE]  ';'  expected	137	None	replace
519	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isScalarValue(value.getFirstChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false));    	non-compiled	[CE]  ';'  expected	137	None	replace
520	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(valueNull);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(valueNull);	  return    ValueUtils.equalValue(value,    op)&&!Double.isNaN(value);    	non-compiled	[CE]  ';'  expected	141	None	replace
521	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)||!Double.isNaN(value);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)||!Double.isNaN(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)||!Double.isNaN(value);	  return    ValueUtils.equalValue(value,    op)&&!Double.isNaN(value);    	non-compiled	[CE]  ';'  expected	141	None	replace
522	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(value  +  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(value  +  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(value  +  1);	  return    ValueUtils.equalValue(value,    op)&&!Double.isNaN(value);    	non-compiled	[CE]  ';'  expected	141	None	replace
523	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(value;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(value;	  return    ValueUtils.equalValue(value,    op)&&!Double.isNaN(value);    	non-compiled	[CE]  ';'  expected	141	None	replace
524	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)&&!Double.isNaN(value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)&&!Double.isNaN(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull)&&!Double.isNaN(value);	  return    ValueUtils.equalValue(value,    op)&&!Double.isNaN(value);    	non-compiled	[CE]  ';'  expected	141	None	replace
525	[BUG]  [BUGGY]  return  valueNull.equals(valueNull)?  equalizer  :  equalizer;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.equals(valueNull)?  equalizer  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.equals(valueNull)?  equalizer  :  equalizer;	  return    equalizer.equals(valueNull)?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	163	None	replace
526	[BUG]  [BUGGY]  return  equalizer.equals(valueUndefined)?  equalizer  :  equalizer;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueUndefined)?  equalizer  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueUndefined)?  equalizer  :  equalizer;	  return    equalizer.equals(valueNull)?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	163	None	replace
527	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  equalizer  :  valueNull;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  equalizer  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  equalizer  :  valueNull;	  return    equalizer.equals(valueNull)?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	163	None	replace
528	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  equalizer  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  equalizer  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  equalizer  :  equalizer.equivalent;	  return    equalizer.equals(valueNull)?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	163	None	replace
529	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)&&  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)&&  equalise(valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)&&  equalise(valueNull,  valueUndefined);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
530	[BUG]  [BUGGY]  return  equalise(value,  valueUndefined)&&  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueUndefined)&&  equalise(valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueUndefined)&&  equalise(valueNull,  valueUndefined);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
531	[BUG]  [BUGGY]  return  equalise(value,  valueUndefined)||  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueUndefined)||  equalise(valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueUndefined)||  equalise(valueNull,  valueUndefined);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
532	[BUG]  [BUGGY]  return  equalise(value,  valueNull)&&  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull)&&  equalise(valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull)&&  equalise(valueNull,  valueUndefined);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
533	[BUG]  [BUGGY]  return  equalise(valueNull,  op)||  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  op)||  equalise(valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  op)||  equalise(valueNull,  valueUndefined);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
534	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)||  equalise(valueNull,  op);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)||  equalise(valueNull,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)||  equalise(valueNull,  op);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
535	[BUG]  [BUGGY]  return  equalise(valueUndefined,  value);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueUndefined,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueUndefined,  value);	  return    equalise(valueNull,    value);    	non-compiled	[CE]  ';'  expected	16	None	replace
536	[BUG]  [BUGGY]  return  equalise(value,  value);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  value);	  return    equalise(valueNull,    value);    	non-compiled	[CE]  ';'  expected	16	None	replace
537	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.equalValue(value);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.equalValue(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.equalValue(value);	  return    valueNull?    valueUndefined    :    ValueUtils.equalValue(value);    	non-compiled	[CE]  ';'  expected	143	None	replace
538	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value)+  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value)+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value)+  1;	  return    valueNull?    valueUndefined    :    ValueUtils.equalValue(value);    	non-compiled	[CE]  ';'  expected	143	None	replace
539	[BUG]  [BUGGY]  return  valueNull?  equalValueUndefined  :  ValueUtils.equalValue(value);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalValueUndefined  :  ValueUtils.equalValue(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalValueUndefined  :  ValueUtils.equalValue(value);	  return    valueNull?    valueUndefined    :    ValueUtils.equalValue(value);    	non-compiled	[CE]  ';'  expected	143	None	replace
540	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value));	  return    valueNull?    valueUndefined    :    ValueUtils.equalValue(value);    	non-compiled	[CE]  ';'  expected	143	None	replace
541	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)+  2;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)+  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)+  2;	  return    ValueUtils.getValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
542	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)+  3;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)+  3;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)+  3;	  return    ValueUtils.getValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
543	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)+  4;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)+  4;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)+  4;	  return    ValueUtils.getValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
544	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)+  1  +  1;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)+  1  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)+  1  +  1;	  return    ValueUtils.getValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
545	[BUG]  [BUGGY]  return  valueNull?  equalizer.equivalent  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer.equivalent  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer.equivalent  :  equalizer.equivalent;	  return    equalizer.equivalent;    	non-compiled	[CE]  ';'  expected	54	None	replace
546	[BUG]  [BUGGY]  return  valueNull  ||  equalizer.equivalent;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  equalizer.equivalent;	  return    equalizer.equivalent;    	non-compiled	[CE]  ';'  expected	54	None	replace
547	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer.equivalent;	  return    equalizer.equivalent;    	non-compiled	[CE]  ';'  expected	54	None	replace
548	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  false  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  false  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  false  :  equalizer.equivalent;	  return    equalizer.equivalent;    	non-compiled	[CE]  ';'  expected	54	None	replace
549	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isLhsValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	165	None	replace
550	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.isLhsValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	165	None	replace
551	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLhsValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLhsValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.isLhsValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isLhsValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	165	None	replace
552	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.isLhsValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	165	None	replace
553	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isExpressionNode(value.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isExpressionNode(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isExpressionNode(value.getLastChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isExpressionNode(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	120	None	replace
554	[BUG]  [BUGGY]  return  equalise(value,  valueUndefined)&&!NodeUtil.isExpressionNode(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueUndefined)&&!NodeUtil.isExpressionNode(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueUndefined)&&!NodeUtil.isExpressionNode(value.getFirstChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isExpressionNode(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	120	None	replace
555	[BUG]  [BUGGY]  return  equalise(value,  valueNull)&&!NodeUtil.isExpressionNode(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull)&&!NodeUtil.isExpressionNode(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull)&&!NodeUtil.isExpressionNode(value.getFirstChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isExpressionNode(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	120	None	replace
556	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.toString(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.toString(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.toString(value.getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
557	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.toString(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  op  :  Integer.toString(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  op  :  Integer.toString(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
558	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.toString(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.toString(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION  ||  op  :  Integer.toString(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
559	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.toString(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.toString(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.toString(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
560	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.toString(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.toString(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.toString(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
561	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)/  2  +  1;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
562	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)/  3;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)/  3;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)/  3;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
563	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)/  4;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)/  4;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)/  4;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
564	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2  +  valueNull;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2  +  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)/  2  +  valueNull;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
565	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2L;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2L;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)/  2L;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
566	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalValue,  valueNull);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalValue,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalValue,  valueNull);	  return    ValueUtils.equal(value,    equalValue);    	non-compiled	[CE]  ';'  expected	171	None	replace
567	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  equalValue);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  equalValue);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  equalValue);	  return    ValueUtils.equal(value,    equalValue);    	non-compiled	[CE]  ';'  expected	171	None	replace
568	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.equal(value,  equalValue);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.equal(value,  equalValue);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.equal(value,  equalValue);  }	  return    ValueUtils.equal(value,    equalValue);    	non-compiled	[CE]  ';'  expected	171	None	replace
569	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalValue  -  valueNull);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalValue  -  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalValue  -  valueNull);	  return    ValueUtils.equal(value,    equalValue);    	non-compiled	[CE]  ';'  expected	171	None	replace
570	[BUG]  [BUGGY]  Context.report(JSError.make(value.getFirstChild(),  op));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value.getFirstChild(),  op));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value.getFirstChild(),  op));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
571	[BUG]  [BUGGY]  Context.report(JSError.make(value.getLastChild(),  op));  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value.getLastChild(),  op));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value.getLastChild(),  op));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
572	[BUG]  [BUGGY]  Context.report(JSError.make(value.getLastChild(),  valueNull));  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value.getLastChild(),  valueNull));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value.getLastChild(),  valueNull));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
573	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op));  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  op));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  op));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
574	[BUG]  [BUGGY]  Context.report(JSError.make(value.getFirstChild(),  valueNull));  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value.getFirstChild(),  valueNull));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value.getFirstChild(),  valueNull));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
575	[BUG]  [BUGGY]  Context.report(JSError.make(value,  valueNull,  op));  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  valueNull,  op));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  valueNull,  op));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
576	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  equal);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
577	[BUG]  [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild(),  equal);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
578	[BUG]  [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild(),  value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild(),  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equal  :  ValueUtils.getValue(value.getLastChild(),  value);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
579	[BUG]  [BUGGY]  return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  value);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  value);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
580	[BUG]  [BUGGY]  return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  valueNull);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  valueNull);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
581	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getString());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getString());	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
582	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getNext());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getNext());	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
583	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull);  }	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
584	[BUG]  [BUGGY]  tryReturnValue(value,  valueNull);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  tryReturnValue(value,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	tryReturnValue(value,  valueNull);	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
585	[BUG]  [BUGGY]  Context.checkState(valueNull);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.checkState(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.checkState(valueNull);	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
586	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueUndefined);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueUndefined);	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
587	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getLastChild());	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
588	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getFirstChild(),  false);	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
589	[BUG]  [BUGGY]  return  equalise(value.getFirstChild()  -  value.getFirstChild());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value.getFirstChild()  -  value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value.getFirstChild()  -  value.getFirstChild());	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
590	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getLocalPart());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getLocalPart());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getLocalPart());	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
591	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getFirstChild(),  true);	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
592	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getString());  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getString());	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
593	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	109	None	replace
594	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	109	None	replace
595	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtil.isLiteralValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	109	None	replace
596	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getString(),  true);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getString(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getString(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	109	None	replace
597	[BUG]  [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  ||!valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getLastChild();  return(valueNull  ||!valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getLastChild();  return(valueNull  ||!valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||!valueNull);    	non-compiled	[CE]  ';'  expected	155	None	replace
598	[BUG]  [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||!valueNull);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||!valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getNext();  return(valueNull  ||!valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||!valueNull);    	non-compiled	[CE]  ';'  expected	155	None	replace
599	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  &&!valueNull);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  &&!valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getFirstChild();  return(valueNull  &&!valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||!valueNull);    	non-compiled	[CE]  ';'  expected	155	None	replace
600	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  op;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  op;	  return    valueNull?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	114	None	replace
601	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  op.getType();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  op.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  op.getType();	  return    valueNull?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	114	None	replace
602	[BUG]  [BUGGY]  return  valueNull  &&  equalizer.equals(value);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  equalizer.equals(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  equalizer.equals(value);	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
603	[BUG]  [BUGGY]  return  equalizer  ||  valueNull.equals(value);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull.equals(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull.equals(value);	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
604	[BUG]  [BUGGY]  return  equalizer  &&  valueNull.equals(valueUndefined);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull.equals(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull.equals(valueUndefined);	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
605	[BUG]  [BUGGY]  return  equalizer  &&  value.equals(value);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  value.equals(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  value.equals(value);	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
606	[BUG]  [BUGGY]  return  valueUndefined  &&  valueNull.equals(value);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined  &&  valueNull.equals(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined  &&  valueNull.equals(value);	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
607	[BUG]  [BUGGY]  return  equalizer  &&  valueNull.compareTo(value);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull.compareTo(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull.compareTo(value);	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
608	[BUG]  [BUGGY]  return  valueNull  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  +  1;	  return    op    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
609	[BUG]  [BUGGY]  return  valueNull?  op  +  1  :  op  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  op  +  1  :  op  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  op  +  1  :  op  +  1;	  return    op    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
610	[BUG]  [BUGGY]  return  valueNull?  op  +  1  :  op;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  op  +  1  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  op  +  1  :  op;	  return    op    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
611	[BUG]  [BUGGY]  return  op  +  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  +  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  +  2;	  return    op    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
612	[BUG]  [BUGGY]  if(valueNull)  {  return!equivalent;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return!equivalent;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return!equivalent;  }	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
613	[BUG]  [BUGGY]  valueUndefined  =  value.getFirstChild().getNext().getNext();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  valueUndefined  =  value.getFirstChild().getNext().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	valueUndefined  =  value.getFirstChild().getNext().getNext();	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
614	[BUG]  [BUGGY]  return  equalise(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull)&&!NodeUtil.isLiteralValue(value.getLastChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	119	None	replace
615	[BUG]  [BUGGY]  return  equalise(value,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	119	None	replace
616	[BUG]  [BUGGY]  return  valueNull?  true  :  valueValue;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  true  :  valueValue;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  true  :  valueValue;	  return    valueNull?    false    :    valueValue;    	non-compiled	[CE]  ';'  expected	172	None	replace
617	[BUG]  [BUGGY]  return  valueNull?  false  :  valueValue.toString();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueValue.toString();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueValue.toString();	  return    valueNull?    false    :    valueValue;    	non-compiled	[CE]  ';'  expected	172	None	replace
618	[BUG]  [BUGGY]  return  valueNull?  false  :  valueValue.getType();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueValue.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueValue.getType();	  return    valueNull?    false    :    valueValue;    	non-compiled	[CE]  ';'  expected	172	None	replace
619	[BUG]  [BUGGY]  return  valueNull?  false  :  valueValue.cloneTree();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueValue.cloneTree();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueValue.cloneTree();	  return    valueNull?    false    :    valueValue;    	non-compiled	[CE]  ';'  expected	172	None	replace
620	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  valueUndefined);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  -  valueUndefined);	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
621	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op  -  value);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op  -  value);	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
622	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  equal);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  -  equal);	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
623	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  equalValue);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  equalValue);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  -  equalValue);	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
624	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  /  value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  /  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  /  value);	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
625	[BUG]  [BUGGY]  return  equalise(valueNull,  op,  valueNull);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  op,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  op,  valueNull);	  return    equalise(valueNull,    op);    	non-compiled	[CE]  ';'  expected	15	None	replace
626	[BUG]  [BUGGY]  return  equalise(valueNull,  op,  valueUndefined);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  op,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  op,  valueUndefined);	  return    equalise(valueNull,    op);    	non-compiled	[CE]  ';'  expected	15	None	replace
627	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	167	None	replace
628	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLastChild(),  true));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLastChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLastChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	167	None	replace
629	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	167	None	replace
630	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	167	None	replace
631	[BUG]  [BUGGY]  Node  value  =  value.getNext();  return(valueNull  &&  valueNull);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getNext();  return(valueNull  &&  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getNext();  return(valueNull  &&  valueNull);	  Node    value    =    value.getNext();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	98	None	replace
632	[BUG]  [BUGGY]  Node  value  =  this.value.getNext();  return(valueNull  ||  valueNull);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getNext();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getNext();  return(valueNull  ||  valueNull);	  Node    value    =    value.getNext();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	98	None	replace
633	[BUG]  [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||  equal);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getNext();  return(valueNull  ||  equal);	  Node    value    =    value.getNext();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	98	None	replace
634	[BUG]  [BUGGY]  Node  value  =  op.getNext();  return(valueNull  ||  valueNull);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getNext();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getNext();  return(valueNull  ||  valueNull);	  Node    value    =    value.getNext();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	98	None	replace
635	[BUG]  [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||  op);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getNext();  return(valueNull  ||  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getNext();  return(valueNull  ||  op);	  Node    value    =    value.getNext();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	98	None	replace
636	[BUG]  [BUGGY]  if(valueNull)  {  return!valueNull;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return!valueNull;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return!valueNull;  }	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
637	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)return  false;  if(valueNull.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)return  false;  if(valueNull.getType()  ==  Token.FUNCTION)  {  return  false;  }	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
638	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull.getType()  ==  Token.FUNCTION  ||  valueNull.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)return  false;  if(valueNull.getType()  ==  Token.FUNCTION  ||  valueNull.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)return  false;  if(valueNull.getType()  ==  Token.FUNCTION  ||  valueNull.getType()  ==  Token.NAME)  {  return  false;  }	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
639	[BUG]  [BUGGY]  if(valueNull)return  false;  if(valueNull.getType()  ==  Token.NAME  ||  valueNull.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)return  false;  if(valueNull.getType()  ==  Token.NAME  ||  valueNull.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)return  false;  if(valueNull.getType()  ==  Token.NAME  ||  valueNull.getType()  ==  Token.FUNCTION)  {  return  false;  }	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
640	[BUG]  [BUGGY]  return!valueNull  ||  valueNull;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  ||  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  ||  valueNull;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
641	[BUG]  [BUGGY]  return  valueNull?  false  :  false;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  false;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  false;	  return    valueNull?    true    :    false;    	non-compiled	[CE]  ';'  expected	59	None	replace
642	[BUG]  [BUGGY]  return  valueNull? "true "  :  false;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "true "  :  false;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "true "  :  false;	  return    valueNull?    true    :    false;    	non-compiled	[CE]  ';'  expected	59	None	replace
643	[BUG]  [BUGGY]  return  valueNull?  null  :  false;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  false;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  false;	  return    valueNull?    true    :    false;    	non-compiled	[CE]  ';'  expected	59	None	replace
644	[BUG]  [BUGGY]  return  op?  true  :  false;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  true  :  false;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  true  :  false;	  return    valueNull?    true    :    false;    	non-compiled	[CE]  ';'  expected	59	None	replace
645	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
646	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  true));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
647	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
648	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
649	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
650	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
651	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	166	None	replace
652	[BUG]  [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	166	None	replace
653	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	166	None	replace
654	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	166	None	replace
655	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equal,  valueNull);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equal,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equal,  valueNull);	  return    ValueUtils.equalValue(value,    equal);    	non-compiled	[CE]  ';'  expected	43	None	replace
656	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equal)&&  valueNull;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equal)&&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equal)&&  valueNull;	  return    ValueUtils.equalValue(value,    equal);    	non-compiled	[CE]  ';'  expected	43	None	replace
657	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equal  -  valueNull);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equal  -  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equal  -  valueNull);	  return    ValueUtils.equalValue(value,    equal);    	non-compiled	[CE]  ';'  expected	43	None	replace
658	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  valueUndefined;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  valueUndefined;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	151	None	replace
659	[BUG]  [BUGGY]  return  op?  valueNull  :  valueUndefined;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  valueNull  :  valueUndefined;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	151	None	replace
660	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  ==  ';';  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  ==  ';';  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  ==  ';';	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
661	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op)!=  ';';  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op)!=  ';';  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op)!=  ';';  }	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
662	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  >=  ';';  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  >=  ';';  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  >=  ';';	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
663	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  >>  ';';  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  >>  ';';  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  >>  ';';	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
664	[BUG]  [BUGGY]  ReturnValueUtils.getValue(value,  op)!=  ';';  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ReturnValueUtils.getValue(value,  op)!=  ';';  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	ReturnValueUtils.getValue(value,  op)!=  ';';	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
665	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op)  ==  ';';  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op)  ==  ';';  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op)  ==  ';';  }	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
666	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getType());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getType());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getType());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getNext());    	non-compiled	[CE]  ';'  expected	38	None	replace
667	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getChildCount());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getChildCount());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getChildCount());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getNext());    	non-compiled	[CE]  ';'  expected	38	None	replace
668	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getParent());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getParent());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getParent());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getNext());    	non-compiled	[CE]  ';'  expected	38	None	replace
669	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueValue;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  valueValue;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  valueValue;	  return    valueNull?    valueUndefined    :    valueValue;    	non-compiled	[CE]  ';'  expected	36	None	replace
670	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  valueValue;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  valueValue;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  valueValue;	  return    valueNull?    valueUndefined    :    valueValue;    	non-compiled	[CE]  ';'  expected	36	None	replace
671	[BUG]  [BUGGY]  return  valueNull  -  valueNull;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  -  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  -  valueNull;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	57	None	replace
672	[BUG]  [BUGGY]  return  valueNull  ||  equal;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  equal;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  equal;	  return    valueNull    ||    valueNull;    	non-compiled	[CE]  ';'  expected	57	None	replace
673	[BUG]  [BUGGY]  return  this.valueNull  &&  this.valueUndefined  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  &&  this.valueUndefined  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  &&  this.valueUndefined  +  1;	  return    this.valueNull    &&    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	145	None	replace
674	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  i);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  i);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  i);	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
675	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  srcValue);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  srcValue);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  srcValue);	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
676	[BUG]  [BUGGY]  Node  value  =  value.removeFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.removeFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.removeFirstChild();	  Node    value    =    value.getLastChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
677	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  false  :  this.valueNull  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  valueNull)?  false  :  this.valueNull  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  valueNull)?  false  :  this.valueNull  +  1;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
678	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getName();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getName();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getName();	  return    valueNull?    valueNull    :    value.getLocalPart();    	non-compiled	[CE]  ';'  expected	152	None	replace
679	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getLocalPart()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getLocalPart()  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getLocalPart()  +  1;	  return    valueNull?    valueNull    :    value.getLocalPart();    	non-compiled	[CE]  ';'  expected	152	None	replace
680	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getName());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getName());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getName());	  return    equalise(valueNull,    value.getLocalPart());    	non-compiled	[CE]  ';'  expected	102	None	replace
681	[BUG]  [BUGGY]  return  valueNull  ||  equalizer.getValue()!=  null;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  equalizer.getValue()!=  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  equalizer.getValue()!=  null;	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
682	[BUG]  [BUGGY]  return  valueNull  ||  equalizer.getValue()  ==  null;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  ||  equalizer.getValue()  ==  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  ||  equalizer.getValue()  ==  null;	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
683	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	104	None	replace
684	[BUG]  [BUGGY]  return  equalise(value,  valueNull  -  value);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull  -  value);	  return    equalise(value,    valueNull);    	non-compiled	[CE]  ';'  expected	32	None	replace
685	[BUG]  [BUGGY]  return  equalise(value,  valueNull  -  valueUndefined);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull  -  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull  -  valueUndefined);	  return    equalise(value,    valueNull);    	non-compiled	[CE]  ';'  expected	32	None	replace
686	[BUG]  [BUGGY]  Node  value  =  node.getNext();  return(valueNull  ||  valueNull);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  node.getNext();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  node.getNext();  return(valueNull  ||  valueNull);	  Node    value    =    value.getNext();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	98	None	replace
687	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  value)&&!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  value)&&!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  value)&&!NodeUtil.isLiteralValue(value.getLastChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	140	None	replace
688	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isEquivalentValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isEquivalentValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isEquivalentValue(value.getFirstChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	140	None	replace
689	[BUG]  [BUGGY]  return  equalizer.valueUndefined  +  valueNull;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.valueUndefined  +  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.valueUndefined  +  valueNull;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
690	[BUG]  [BUGGY]  return  equalise(value,  null);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  null);	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
691	[BUG]  [BUGGY]  return  equalise(value,  valuesNull);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valuesNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valuesNull);	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
692	[BUG]  [BUGGY]  return  equalize(value,  valueNull);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalize(value,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalize(value,  valueNull);	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
693	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.toString(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.toString(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  value  :  Integer.toString(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
694	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.toString(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.toString(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.toString(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
695	[BUG]  [BUGGY]  return  this.valueNull  ||  valueUndefined;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  ||  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  ||  valueUndefined;	  return    this.valueNull    ||    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	146	None	replace
696	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  value;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull  -  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull  -  value;	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
697	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  valueNull  -  value);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  valueNull  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  valueNull  -  value);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
698	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull  /  value);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull  /  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull  /  value);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
699	[BUG]  [BUGGY]  return  equal?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  equal);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
700	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&  value.getType()  ==  Token.FUNCTION;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
701	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.NUMBER;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&  value.getType()  ==  Token.NUMBER;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
702	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&  value.getType()!=  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&  value.getType()!=  Token.FUNCTION;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
703	[BUG]  [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&  value.getType()  ==  Token.GETELEM;	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
704	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getNext(),  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getNext(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getNext(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false);    	non-compiled	[CE]  ';'  expected	136	None	replace
705	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
706	[BUG]  [BUGGY]  return!valueNull?  valueNull  :  this.value;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull?  valueNull  :  this.value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull?  valueNull  :  this.value;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
707	[BUG]  [BUGGY]  return(valueNull?  valueNull  :  this.value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull?  valueNull  :  this.value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull?  valueNull  :  this.value);	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
708	[BUG]  [BUGGY]  return  this.valueNull?  valueNull  :  this.value  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  valueNull  :  this.value  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  valueNull  :  this.value  +  1;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
709	[BUG]  [BUGGY]  return  equalizer  null?   "null "  :  equalizer;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  null?   "null "  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  null?   "null "  :  equalizer;	  return    valueNull?   "null   "    :    equalizer;    	non-compiled	[CE]  ';'  expected	162	None	replace
710	[BUG]  [BUGGY]  return  equalizer  null?   "null "  :  valueNull;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  null?   "null "  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  null?   "null "  :  valueNull;	  return    valueNull?   "null   "    :    equalizer;    	non-compiled	[CE]  ';'  expected	162	None	replace
711	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.isScalarValue(value.getFirstChild()):  ValueUtils.isScalarValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.isScalarValue(value.getFirstChild()):  ValueUtils.isScalarValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.isScalarValue(value.getFirstChild()):  ValueUtils.isScalarValue(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtils.isScalarValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	41	None	replace
712	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isSubtype(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isSubtype(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isSubtype(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	132	None	replace
713	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  value));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  value));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  value));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
714	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  valueNull));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  valueNull));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  valueNull));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
715	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  false));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  false));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
716	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  ValueNull  :  equalizer;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  ValueNull  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  ValueNull  :  equalizer;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
717	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  valueNull  :  equalizer  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  valueNull  :  equalizer  +  1;	  return    equalizer.equals(valueNull)?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	161	None	replace
718	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalValue)-  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalValue)-  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalValue)-  valueNull;	  return    ValueUtils.equal(value,    equalValue);    	non-compiled	[CE]  ';'  expected	171	None	replace
719	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)+  1  +  valueNull;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)+  1  +  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)+  1  +  valueNull;	  return    ValueUtils.getValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
720	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)>  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)>  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)>  1;	  return    ValueUtils.getValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
721	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  value)&&!Double.isNaN(value);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  value)&&!Double.isNaN(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  value)&&!Double.isNaN(value);	  return    ValueUtils.equalValue(value,    op)&&!Double.isNaN(value);    	non-compiled	[CE]  ';'  expected	141	None	replace
722	[BUG]  [BUGGY]  return  value  -  value.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value  -  value.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value  -  value.getFirstChild().getNext();	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
723	[BUG]  [BUGGY]  return  valueUndefined  -  value.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined  -  value.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined  -  value.getFirstChild().getNext();	  return    op    -    value.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	116	None	replace
724	[BUG]  [BUGGY]  return  equalise(value,  valueNull.getType());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull.getType());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull.getType());	  return    equalise(valueNull,    value.getType());    	non-compiled	[CE]  ';'  expected	100	None	replace
725	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  -1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  -1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  -1);	  return    ValueUtils.getValue(value,    op,    0);    	non-compiled	[CE]  ';'  expected	86	None	replace
726	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalizer?  valueNull  :  equalizer);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalizer?  valueNull  :  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalizer?  valueNull  :  equalizer);	  return    ValueUtils.equal(value,    equalizer);    	non-compiled	[CE]  ';'  expected	78	None	replace
727	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalizer)&&  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalizer)&&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalizer)&&  valueNull;	  return    ValueUtils.equal(value,    equalizer);    	non-compiled	[CE]  ';'  expected	78	None	replace
728	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  equal);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  equal);	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
729	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  equality);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  equality);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  equality);	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
730	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  equivalent);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  equivalent);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  equivalent);	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
731	[BUG]  [BUGGY]  return  valueNull?  false  :  value.booleanValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.booleanValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.booleanValue();	  return    valueNull?    false    :    value;    	non-compiled	[CE]  ';'  expected	4	None	replace
732	[BUG]  [BUGGY]  return  valueNull?  false  :  value.getFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.getFirstChild();	  return    valueNull?    false    :    value;    	non-compiled	[CE]  ';'  expected	4	None	replace
733	[BUG]  [BUGGY]  return  valueNull?  false  :  value.getValue();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  value.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  value.getValue();	  return    valueNull?    false    :    value;    	non-compiled	[CE]  ';'  expected	4	None	replace
734	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getString());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
735	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getLastChild().getString());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getLastChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getLastChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
736	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
737	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalizer)+  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalizer)+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalizer)+  1;	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
738	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalizer)&&  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalizer)&&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalizer)&&  valueNull;	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
739	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getNext(),  false));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getNext(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getNext(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false));    	non-compiled	[CE]  ';'  expected	137	None	replace
740	[BUG]  [BUGGY]  return  equalizer  ||  valueNull  &&  value.getLastChild().getString().endsWith( "__ "));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull  &&  value.getLastChild().getString().endsWith( "__ "));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull  &&  value.getLastChild().getString().endsWith( "__ "));	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
741	[BUG]  [BUGGY]  return  equalizer  ||  valueNull  &&  value.getLastChild().getString().endsWith( "- "));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull  &&  value.getLastChild().getString().endsWith( "- "));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull  &&  value.getLastChild().getString().endsWith( "- "));	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
742	[BUG]  [BUGGY]  return  equalizer  ||  valueNull  &&  value.getLastChild().getString().length()  ==  0;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  valueNull  &&  value.getLastChild().getString().length()  ==  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  valueNull  &&  value.getLastChild().getString().length()  ==  0;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
743	[BUG]  [BUGGY]  valueNull  =  ValueUtils.equalValue(value,  valueNull);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  valueNull  =  ValueUtils.equalValue(value,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	valueNull  =  ValueUtils.equalValue(value,  valueNull);	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
744	[BUG]  [BUGGY]  ValueUtils.equalValue(value,  valueNull);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ValueUtils.equalValue(value,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	ValueUtils.equalValue(value,  valueNull);	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
745	[BUG]  [BUGGY]  changed(value,  op)  {  return  ValueUtils.equalValue(value,  op);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  changed(value,  op)  {  return  ValueUtils.equalValue(value,  op);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	changed(value,  op)  {  return  ValueUtils.equalValue(value,  op);  }	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
746	[BUG]  [BUGGY]  changed(value,  op)  {  return  ValueUtils.equalValue(value,  valueNull);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  changed(value,  op)  {  return  ValueUtils.equalValue(value,  valueNull);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	changed(value,  op)  {  return  ValueUtils.equalValue(value,  valueNull);  }	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
747	[BUG]  [BUGGY]  ValueUtils.equalValue(value,  op);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ValueUtils.equalValue(value,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	ValueUtils.equalValue(value,  op);	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
748	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  rval);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  rval);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  rval);	  return    ValueUtils.equal(value,    equivalent);    	non-compiled	[CE]  ';'  expected	82	None	replace
749	[BUG]  [BUGGY]  return  valueNull?  this.valueNull  :  this.value  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  this.valueNull  :  this.value  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  this.valueNull  :  this.value  +  1;	  return    valueNull?    this.valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	147	None	replace
750	[BUG]  [BUGGY]  return  valueNull?  this.valueNull  :  this.valueUndefined;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  this.valueNull  :  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  this.valueNull  :  this.valueUndefined;	  return    valueNull?    this.valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	147	None	replace
751	[BUG]  [BUGGY]  return!valueNull?  valueNull  :  null;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull?  valueNull  :  null;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull?  valueNull  :  null;	  return    this.valueNull?    valueNull    :    null;    	non-compiled	[CE]  ';'  expected	28	None	replace
752	[BUG]  [BUGGY]  return  true?  false  :  valueUndefined;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  true?  false  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  true?  false  :  valueUndefined;	  return    op?    false    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	3	None	replace
753	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull,  valueNull);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  valueNull,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull,  valueNull);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
754	[BUG]  [BUGGY]  return  ValueUtils.equal(valueUndefined,  valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueUndefined,  valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueUndefined,  valueNull,  valueUndefined);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
755	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)?  valueNull  :  value;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)?  valueNull  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)?  valueNull  :  value;	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
756	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)?  false  :  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)?  false  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)?  false  :  valueNull;	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
757	[BUG]  [BUGGY]  return  valueNull?   "null "  :  value;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?   "null "  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?   "null "  :  value;	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
758	[BUG]  [BUGGY]  return  opNull?   "null "  :  value;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  opNull?   "null "  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  opNull?   "null "  :  value;	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
759	[BUG]  [BUGGY]  return  valueNull?   "null "  :  value.getValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?   "null "  :  value.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?   "null "  :  value.getValue();	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
760	[BUG]  [BUGGY]  return  opNull?   "null "  :  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  opNull?   "null "  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  opNull?   "null "  :  valueNull;	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
761	[BUG]  [BUGGY]  return!nequivalent;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!nequivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!nequivalent;	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
762	[BUG]  [BUGGY]  return!super.equivalent;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!super.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!super.equivalent;	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
763	[BUG]  [BUGGY]  return!requivalent;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!requivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!requivalent;	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
764	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
765	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
766	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  Double.NaN;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  Double.NaN;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  Double.NaN;	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
767	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  negNum;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  negNum;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  negNum;	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
768	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  false;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  false;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  false;	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
769	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
770	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getValue());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getValue());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getValue());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
771	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocale());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocale());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLocale());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
772	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  ==  Token.NUMBER  +  1;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
773	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER  ||  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.NUMBER  ||  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  ==  Token.NUMBER  ||  valueNull;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
774	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.NUMBER;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  >=  Token.NUMBER;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
775	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.STRING;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  >=  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
776	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getNext());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getNext());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	61	None	replace
777	[BUG]  [BUGGY]  return  valueNull?  NULL  :  value.getType();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  NULL  :  value.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  NULL  :  value.getType();	  return    valueNull?    null    :    value.getType();    	non-compiled	[CE]  ';'  expected	58	None	replace
778	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op).restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op).restrictByNotNullOrUndefined();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op).restrictByNotNullOrUndefined();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
779	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op).booleanValue(0);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op).booleanValue(0);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op).booleanValue(0);	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
780	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op).compareTo(valueNull);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op).compareTo(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op).compareTo(valueNull);	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
781	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
782	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR));  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_ID_INVALID_GETELEM_INDEX_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
783	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR,  valueNull));  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR,  valueNull));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  op,  INVALID_GETELEM_INDEX_ERROR,  valueNull));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
784	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_NUMBER_ERROR,  valueNull));  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_NUMBER_ERROR,  valueNull));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_NUMBER_ERROR,  valueNull));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
785	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  equalizer.value;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  equalizer.value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  equalizer.value;	  return    equalizer?    valueNull    :    equalizer;    	non-compiled	[CE]  ';'  expected	125	None	replace
786	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  valueNull);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull,  valueNull);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
787	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  rval,  valueUndefined);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  rval,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  rval,  valueUndefined);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
788	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  valueUndefined  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull,  valueUndefined  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull,  valueUndefined  -  1);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
789	[BUG]  [BUGGY]  return  equalizer  &&  valueNull.startsWith(value);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull.startsWith(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull.startsWith(value);	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
790	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  equalizer  :  value;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  equalizer  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  equalizer  :  value;	  return    equalizer.equals(valueNull)?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	163	None	replace
791	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)?  value  :  equalizer;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)?  value  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)?  value  :  equalizer;	  return    equalizer.equals(valueNull)?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	163	None	replace
792	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isShortValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isShortValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isShortValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
793	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.getValue(value.getLastChild()):  ValueUtils.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.getValue(value.getLastChild()):  ValueUtils.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.getValue(value.getLastChild()):  ValueUtils.getValue(value.getFirstChild());	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	50	None	replace
794	[BUG]  [BUGGY]  return  valueNull?  ValueUtils.getValue(value.getLastChild()):  ValueUtils.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtils.getValue(value.getLastChild()):  ValueUtils.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtils.getValue(value.getLastChild()):  ValueUtils.getValue(value.getLastChild());	  return    valueNull?    valueNull    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	50	None	replace
795	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getType());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getType());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getType());	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
796	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getNext());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getNext());	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
797	[BUG]  [BUGGY]  return  equalise(valueNull  -  value.getQualifiedName());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull  -  value.getQualifiedName());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull  -  value.getQualifiedName());	  return    equalise(valueNull    -    value.getFirstChild());    	non-compiled	[CE]  ';'  expected	101	None	replace
798	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  valueValue.cloneTree();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  valueValue.cloneTree();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  valueValue.cloneTree();	  return    valueNull?    valueUndefined    :    valueValue;    	non-compiled	[CE]  ';'  expected	36	None	replace
799	[BUG]  [BUGGY]  return  valueNull?  valueValueUndefined  :  value;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueValueUndefined  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueValueUndefined  :  value;	  return    valueNull?    valueUndefined    :    valueValue;    	non-compiled	[CE]  ';'  expected	36	None	replace
800	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  valueValue.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  valueValue.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  valueValue.getFirstChild();	  return    valueNull?    valueUndefined    :    valueValue;    	non-compiled	[CE]  ';'  expected	36	None	replace
801	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  valueValue);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  valueValue);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  valueValue);	  return    ValueUtils.equal(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	106	None	replace
802	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtils.getValue(value.getLastChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	134	None	replace
803	[BUG]  [BUGGY]  return  op  ==  null?  valueNull  :  op;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  ==  null?  valueNull  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  ==  null?  valueNull  :  op;	  return    op    >    0?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	113	None	replace
804	[BUG]  [BUGGY]  return  equalizer  :  ValueUtils.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  :  ValueUtils.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  :  ValueUtils.getValue(value.getFirstChild());	  return    valueNull?    equalizer    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	48	None	replace
805	[BUG]  [BUGGY]  return  equalizer  &&  ValueUtils.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  ValueUtils.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  ValueUtils.getValue(value.getLastChild());	  return    valueNull?    equalizer    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	48	None	replace
806	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  value)+  0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  value)+  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  value)+  0;	  return    ValueUtils.equalValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
807	[BUG]  [BUGGY]  return  equalizer  :  ValueUtil.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  :  ValueUtil.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  :  ValueUtil.getValue(value.getFirstChild());	  return    valueNull?    equalizer    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
808	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  this.valueUndefined  :  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  valueNull)?  this.valueUndefined  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  valueNull)?  this.valueUndefined  :  valueNull;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
809	[BUG]  [BUGGY]  return  this.valueUndefined  -  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined  -  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined  -  valueNull;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
810	[BUG]  [BUGGY]  return(valueNull  ||  valueNull)?  0  :  this.valueUndefined;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  valueNull)?  0  :  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  valueNull)?  0  :  this.valueUndefined;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
811	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  lv,  valueNull);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  lv,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  lv,  valueNull);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
812	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  rval,  valueNull);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  rval,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  rval,  valueNull);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
813	[BUG]  [BUGGY]  aughtExceptionHandler(valueNull,  value.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  aughtExceptionHandler(valueNull,  value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	aughtExceptionHandler(valueNull,  value.getLastChild());	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
814	[BUG]  [BUGGY]  return  valueNull?  0  :  value.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  0  :  value.getFirstChild().getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  0  :  value.getFirstChild().getNext();	  return    op    >    0?    value.getFirstChild().getNext()    :    op;    	non-compiled	[CE]  ';'  expected	170	None	replace
815	[BUG]  [BUGGY]  return  equal?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  equal);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueNull  :  ValueUtil.getValue(value.getLastChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	138	None	replace
816	[BUG]  [BUGGY]  return  ValueUtils.equalValue(valueNull,  valueNull  -  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(valueNull,  valueNull  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(valueNull,  valueNull  -  1);	  return    ValueUtils.equalValue(value,    valueNull    -    1);    	non-compiled	[CE]  ';'  expected	94	None	replace
817	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getChildCount();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getChildCount();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getChildCount();	  return    valueNull?    valueNull    :    value.getValue();    	non-compiled	[CE]  ';'  expected	150	None	replace
818	[BUG]  [BUGGY]  return  valueNull?  0  :  valueUndefined;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  0  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  0  :  valueUndefined;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
819	[BUG]  [BUGGY]  return  valueNull?  0  :  value.getLastChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  0  :  value.getLastChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  0  :  value.getLastChild();	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
820	[BUG]  [BUGGY]  return  valueNull?  0  :  value.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  0  :  value.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  0  :  value.getFirstChild();	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
821	[BUG]  [BUGGY]  return  valueNull?  0  :  value.getType();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  0  :  value.getType();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  0  :  value.getType();	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
822	[BUG]  [BUGGY]  return  opNull?  0  :  value;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  opNull?  0  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  opNull?  0  :  value;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
823	[BUG]  [BUGGY]  return  valueNull?  false  :  valueUndefined  +  3;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueUndefined  +  3;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueUndefined  +  3;	  return    valueNull?    false    :    valueUndefined    +    1;    	non-compiled	[CE]  ';'  expected	108	None	replace
824	[BUG]  [BUGGY]  return  valueNull?  false  :  valueUndefined  +  4;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueUndefined  +  4;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueUndefined  +  4;	  return    valueNull?    false    :    valueUndefined    +    1;    	non-compiled	[CE]  ';'  expected	108	None	replace
825	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  >=  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
826	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  valueUndefined  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  valueUndefined  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  valueUndefined  +  1;	  return    valueNull?    valueNull    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	151	None	replace
827	[BUG]  [BUGGY]  Node  value  =  node.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  node.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  node.getFirstChild();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
828	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull  -  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  this.valueNull  -  1);	  return    ValueUtils.equalValue(value,    this.valueNull);    	non-compiled	[CE]  ';'  expected	157	None	replace
829	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull,  value);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  this.valueNull,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  this.valueNull,  value);	  return    ValueUtils.equalValue(value,    this.valueNull);    	non-compiled	[CE]  ';'  expected	157	None	replace
830	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.mayHaveSideEffects(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.mayHaveSideEffects(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)&&!NodeUtil.mayHaveSideEffects(value.getLastChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	119	None	replace
831	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild(),  false);	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	119	None	replace
832	[BUG]  [BUGGY]  return  ValueUtils.EMPTY_STRING?  valueNull  :  ValueUtils.EMPTY_STRING;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.EMPTY_STRING?  valueNull  :  ValueUtils.EMPTY_STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.EMPTY_STRING?  valueNull  :  ValueUtils.EMPTY_STRING;	  return    valueNull?    valueUndefined    :    ValueUtils.EMPTY_STRING;    	non-compiled	[CE]  ';'  expected	89	None	replace
833	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.EMPTY_STRING  ||  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.EMPTY_STRING  ||  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.EMPTY_STRING  ||  valueNull;	  return    valueNull?    valueUndefined    :    ValueUtils.EMPTY_STRING;    	non-compiled	[CE]  ';'  expected	89	None	replace
834	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)||  equalizer.equals(valueNull);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)||  equalizer.equals(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)||  equalizer.equals(valueNull);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
835	[BUG]  [BUGGY]  return  valueNull.equals(value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull.equals(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull.equals(value);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
836	[BUG]  [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(value);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equals(valueNull)&&  equalizer.equals(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equals(valueNull)&&  equalizer.equals(value);	  return    equalizer.equals(valueNull);    	non-compiled	[CE]  ';'  expected	52	None	replace
837	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  value)-  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  value)-  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  value)-  1;	  return    ValueUtils.equalValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	67	None	replace
838	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)-  1  +  valueNull;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)-  1  +  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)-  1  +  valueNull;	  return    ValueUtils.equalValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	67	None	replace
839	[BUG]  [BUGGY]  Return  ValueUtils.equalValue(value,  op,  valueNull);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Return  ValueUtils.equalValue(value,  op,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Return  ValueUtils.equalValue(value,  op,  valueNull);	  return    ValueUtils.equalValue(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	46	None	replace
840	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  value);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  value);	  return    ValueUtils.equalValue(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	46	None	replace
841	[BUG]  [BUGGY]  return  ValueUtils.equal(valueNull,  valueUndefined,  op);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(valueNull,  valueUndefined,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(valueNull,  valueUndefined,  op);	  return    ValueUtils.equal(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	81	None	replace
842	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  value;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  -  value;	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
843	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  value)+  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull  -  value)+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull  -  value)+  1;	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
844	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull;	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
845	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  equal);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull,  equal);	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
846	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)&&  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)&&  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)&&  valueNull;	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
847	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  valueNull);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull,  valueNull);	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
848	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  valueNull  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  valueNull  +  1;	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
849	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  value)/  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  value)/  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  value)/  2;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
850	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2  +  equal;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)/  2  +  equal;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)/  2  +  equal;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
851	[BUG]  [BUGGY]  return  valueNull?  value  :  op;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  value  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  value  :  op;	  return    valueNull?    op    :    op;    	non-compiled	[CE]  ';'  expected	115	None	replace
852	[BUG]  [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(valueUndefined;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalise(valueUndefined):  equalise(valueUndefined;	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
853	[BUG]  [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(value);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalise(valueUndefined):  equalise(value);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
854	[BUG]  [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(valueNull);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalise(valueUndefined):  equalise(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalise(valueUndefined):  equalise(valueNull);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
855	[BUG]  [BUGGY]  return  equalise(valueNull?  valueUndefined  :  valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull?  valueUndefined  :  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull?  valueUndefined  :  valueNull);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
856	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)!=  0;';  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)!=  0;';  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)!=  0;';	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
857	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  ';';  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  ';';  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  ';';	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
858	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isNegativeValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isNegativeValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isNegativeValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isEquivalentValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	133	None	replace
859	[BUG]  [BUGGY]  return  valueNull? "null "  :  op  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  op  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  op  +  1;	  return    op    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
860	[BUG]  [BUGGY]  Node  value  =  value.getNext()  -  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getNext()  -  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getNext()  -  1;	  Node    value    =    value.getNext();    	non-compiled	[CE]  ';'  expected	71	None	replace
861	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isNegatedValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isNegatedValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isNegatedValue(value.getFirstChild());	  return    valueNull?    valueNull    :    ValueUtils.isScalarValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	39	None	replace
862	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	24	None	replace
863	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getFirstChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getFirstChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	24	None	replace
864	[BUG]  [BUGGY]  Node  value  =  item.getFirstChild();  break;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  item.getFirstChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  item.getFirstChild();  break;	  Node    value    =    value.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	73	None	replace
865	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getLastChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  valueNull  :  Integer.parseInt(value.getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild());    	non-compiled	[CE]  ';'  expected	20	None	replace
866	[BUG]  [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()!=  Token.FUNCTION?  value  :  Integer.parseInt(value.getFirstChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild());    	non-compiled	[CE]  ';'  expected	20	None	replace
867	[BUG]  [BUGGY]  return  valueNull?  ValueUtil.getValue(value.getLastChild()):  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtil.getValue(value.getLastChild()):  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtil.getValue(value.getLastChild()):  ValueUtil.getValue(value.getLastChild());	  return    valueUndefined?    valueNull    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
868	[BUG]  [BUGGY]  return  valueNull?  ValueUtil.getValue(value.getLastChild()):  ValueUtil.getValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  ValueUtil.getValue(value.getLastChild()):  ValueUtil.getValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  ValueUtil.getValue(value.getLastChild()):  ValueUtil.getValue(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
869	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getNext());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getNext());	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	47	None	replace
870	[BUG]  [BUGGY]  return  ValueUtils.equalValue(valueNull,  0);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(valueNull,  0);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(valueNull,  0);	  return    ValueUtils.equalValue(value,    0);    	non-compiled	[CE]  ';'  expected	92	None	replace
871	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  -1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  -1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  -1);	  return    ValueUtils.equalValue(value,    0);    	non-compiled	[CE]  ';'  expected	92	None	replace
872	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getLocale();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getLocale();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getLocale();	  return    valueNull?    valueUndefined    :    value.getValue();    	non-compiled	[CE]  ';'  expected	144	None	replace
873	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value,  value);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value,  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value,  value);	  return    valueNull?    valueUndefined    :    ValueUtils.equalValue(value);    	non-compiled	[CE]  ';'  expected	143	None	replace
874	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value;	  return    valueNull?    valueUndefined    :    ValueUtils.equalValue(value);    	non-compiled	[CE]  ';'  expected	143	None	replace
875	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Boolean.FALSE  :  Boolean.TRUE);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Boolean.FALSE  :  Boolean.TRUE);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Boolean.FALSE  :  Boolean.TRUE);	  return    equalise(valueNull,    valueUndefined?    Boolean.TRUE    :    Boolean.FALSE);    	non-compiled	[CE]  ';'  expected	33	None	replace
876	[BUG]  [BUGGY]  return  equalizer  >  valueNull?  equalizer  :  equalizer;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  >  valueNull?  equalizer  :  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  >  valueNull?  equalizer  :  equalizer;	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
877	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ROOT_LOCALE;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ROOT_LOCALE;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ROOT_LOCALE;	  return    valueNull?    valueUndefined    :    value;    	non-compiled	[CE]  ';'  expected	34	None	replace
878	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op  *  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op  *  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op  *  1);	  return    ValueUtils.equalValue(value,    op    +    1);    	non-compiled	[CE]  ';'  expected	90	None	replace
879	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equal)-  valueNull;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equal)-  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equal)-  valueNull;	  return    ValueUtils.equalValue(value,    equal);    	non-compiled	[CE]  ';'  expected	43	None	replace
880	[BUG]  [BUGGY]  return  equalizer.equivalent?  valueNull  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.equivalent?  valueNull  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.equivalent?  valueNull  :  equalizer.equivalent;	  return    equalizer.equivalent;    	non-compiled	[CE]  ';'  expected	54	None	replace
881	[BUG]  [BUGGY]  valueNull  |=  valueUndefined;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  valueNull  |=  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	valueNull  |=  valueUndefined;	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
882	[BUG]  [BUGGY]  valueNull  =  valueUndefined;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  valueNull  =  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	valueNull  =  valueUndefined;	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
883	[BUG]  [BUGGY]  valueNull  =!valueUndefined;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  valueNull  =!valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	valueNull  =!valueUndefined;	  if(valueNull)    {    return!valueUndefined;    }    	non-compiled	[CE]  ';'  expected	154	None	replace
884	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getNext());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getNext());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	118	None	replace
885	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getString());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isLiteralValue(value.getString());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	118	None	replace
886	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  false).booleanValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  false).booleanValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  false).booleanValue();	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
887	[BUG]  [BUGGY]  return  equalise(value,  valueNull)||  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull)||  equalise(valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull)||  equalise(valueNull,  valueUndefined);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
888	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM  ||  valueNull;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM  ||  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  ==  Token.GETELEM  ||  valueNull;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
889	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  ==  Token.GETELEM  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  ==  Token.GETELEM  +  1;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
890	[BUG]  [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.GETELEM;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  &&  value.getType()  >=  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  &&  value.getType()  >=  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
891	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isAssignmentOp(value.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isAssignmentOp(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!NodeUtil.isAssignmentOp(value.getFirstChild());	  return    ValueUtils.equalValue(value,    op)&&!NodeUtil.isLabelName(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	142	None	replace
892	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)  >=  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)  >=  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)  >=  1;	  return    ValueUtils.getValue(value,    op)    >=    0;    	non-compiled	[CE]  ';'  expected	160	None	replace
893	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  +  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull  +  1;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
894	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(valueNull  &  ROOT_LOCALE)!=  0;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull  ||(valueNull  &  ROOT_LOCALE)!=  0;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull  ||(valueNull  &  ROOT_LOCALE)!=  0;	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
895	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.parseInt(value.getFirstChild().getFirstChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
896	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.parseInt(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.parseInt(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.parseInt(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	23	None	replace
897	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  item;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  item;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  item;	  return    valueNull?    valueUndefined    :    value;    	non-compiled	[CE]  ';'  expected	34	None	replace
898	[BUG]  [BUGGY]  return(valueNull  ||  this.valueNull)?  false  :  valueNull;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return(valueNull  ||  this.valueNull)?  false  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return(valueNull  ||  this.valueNull)?  false  :  valueNull;	  return(valueNull    ||    valueNull)?    false    :    this.valueNull;    	non-compiled	[CE]  ';'  expected	25	None	replace
899	[BUG]  [BUGGY]  return  equalise(valueNull,  value.getParent());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  value.getParent());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  value.getParent());	  return    equalise(valueNull,    value.getType());    	non-compiled	[CE]  ';'  expected	100	None	replace
900	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLhs(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLhs(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isLhs(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	132	None	replace
901	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isLiteralValue(value.getFirstChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getFirstChild(),    false));    	non-compiled	[CE]  ';'  expected	137	None	replace
902	[BUG]  [BUGGY]  return  valueNull? "null "  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  equalizer.equivalent;	  return    equalizer.equivalent;    	non-compiled	[CE]  ';'  expected	54	None	replace
903	[BUG]  [BUGGY]  return  valueNull?  equalizer.negate()  :  equalizer.equivalent;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer.negate()  :  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer.negate()  :  equalizer.equivalent;	  return    equalizer.equivalent;    	non-compiled	[CE]  ';'  expected	54	None	replace
904	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalValues  -  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalValues  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalValues  -  1);	  return    ValueUtils.equalValue(value,    valueNull    -    1);    	non-compiled	[CE]  ';'  expected	94	None	replace
905	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalValue  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalValue  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalValue  -  1);	  return    ValueUtils.equalValue(value,    valueNull    -    1);    	non-compiled	[CE]  ';'  expected	94	None	replace
906	[BUG]  [BUGGY]  return  valueNull? "null "  :  ValueUtils.escapeHtml(value.getLastChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  ValueUtils.escapeHtml(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  ValueUtils.escapeHtml(value.getLastChild());	  return    valueUndefined?    valueNull    :    ValueUtils.escapeHtml(value.getLastChild());    	non-compiled	[CE]  ';'  expected	63	None	replace
907	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  this;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  this;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  this;	  return    valueNull?    valueUndefined    :    null;    	non-compiled	[CE]  ';'  expected	35	None	replace
908	[BUG]  [BUGGY]  if(valueNull  ||  valueNull)  {  return  ValueUtils.getValue(value,  op)!=  ';';  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull  ||  valueNull)  {  return  ValueUtils.getValue(value,  op)!=  ';';  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull  ||  valueNull)  {  return  ValueUtils.getValue(value,  op)!=  ';';  }	  return    ValueUtils.getValue(value,    op)!=    ';';    	non-compiled	[CE]  ';'  expected	159	None	replace
909	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value,  equal);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value,  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.equalValue(value,  equal);	  return    valueNull?    valueUndefined    :    ValueUtils.equalValue(value);    	non-compiled	[CE]  ';'  expected	143	None	replace
910	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	167	None	replace
911	[BUG]  [BUGGY]  return  this.valueNull?  valueNull  :  value;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  valueNull  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  valueNull  :  value;	  return    this.valueNull?    valueNull    :    null;    	non-compiled	[CE]  ';'  expected	28	None	replace
912	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  0xFFFF);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  0xFFFF);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  0xFFFF);	  return    ValueUtils.equalValue(value,    0);    	non-compiled	[CE]  ';'  expected	92	None	replace
913	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  null));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  null));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Double.NaN  :  equalise(valueNull,  null));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
914	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NE  :  equalise(valueNull,  valueUndefined));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.NE  :  equalise(valueNull,  valueUndefined));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Double.NE  :  equalise(valueNull,  valueUndefined));	  return    equalise(valueNull,    valueUndefined?    Double.NaN    :    equalise(valueNull,    valueUndefined));    	non-compiled	[CE]  ';'  expected	149	None	replace
915	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getString(),  equal);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getString(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getString(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getString());    	non-compiled	[CE]  ';'  expected	40	None	replace
916	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isEquivalentValue(value.getString());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isEquivalentValue(value.getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isEquivalentValue(value.getString());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getString());    	non-compiled	[CE]  ';'  expected	40	None	replace
917	[BUG]  [BUGGY]  return  equalise(valueNull,  op)&&  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  op)&&  equalise(valueNull,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  op)&&  equalise(valueNull,  valueUndefined);	  return    equalise(valueNull,    valueUndefined)||    equalise(valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	148	None	replace
918	[BUG]  [BUGGY]  return  valueNull?  Double.NaN  :  false;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  Double.NaN  :  false;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  Double.NaN  :  false;	  return    valueNull?    true    :    false;    	non-compiled	[CE]  ';'  expected	59	None	replace
919	[BUG]  [BUGGY]  return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  equal);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueUndefined  :  ValueUtils.getValue(value.getLastChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
920	[BUG]  [BUGGY]  return  equal?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  equal);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueNull  :  ValueUtils.getValue(value.getFirstChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	135	None	replace
921	[BUG]  [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	10	None	replace
922	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isScalarValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	37	None	replace
923	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getChildCount();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getChildCount();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getChildCount();	  return    valueNull?    valueUndefined    :    value.getValue();    	non-compiled	[CE]  ';'  expected	144	None	replace
924	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getString(),  true);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getString(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getString(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	166	None	replace
925	[BUG]  [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||!valueUndefined);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.getFirstChild();  return(valueNull  ||!valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.getFirstChild();  return(valueNull  ||!valueUndefined);	  Node    value    =    value.getFirstChild();    return(valueNull    ||!valueNull);    	non-compiled	[CE]  ';'  expected	155	None	replace
926	[BUG]  [BUGGY]  Node  value  =  op.getFirstChild();  return(valueNull  ||!valueNull);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  op.getFirstChild();  return(valueNull  ||!valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  op.getFirstChild();  return(valueNull  ||!valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||!valueNull);    	non-compiled	[CE]  ';'  expected	155	None	replace
927	[BUG]  [BUGGY]  return  valueNull?   "null "  :  equalizer.toString();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?   "null "  :  equalizer.toString();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?   "null "  :  equalizer.toString();	  return    valueNull?   "null   "    :    equalizer;    	non-compiled	[CE]  ';'  expected	162	None	replace
928	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op)&&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op)&&!NodeUtil.isLiteralValue(value.getFirstChild());	  return    ValueUtils.equal(value,    op);    	non-compiled	[CE]  ';'  expected	77	None	replace
929	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op)&&!Double.isNaN(value);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op)&&!Double.isNaN(value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op)&&!Double.isNaN(value);	  return    ValueUtils.equal(value,    op);    	non-compiled	[CE]  ';'  expected	77	None	replace
930	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op)&&!NodeUtil.isLhs(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op)&&!NodeUtil.isLhs(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op)&&!NodeUtil.isLhs(value.getFirstChild());	  return    ValueUtils.equal(value,    op);    	non-compiled	[CE]  ';'  expected	77	None	replace
931	[BUG]  [BUGGY]  return  valueNull? "null "  :  equalizer.valueUndefined;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  equalizer.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  equalizer.valueUndefined;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
932	[BUG]  [BUGGY]  return  equalizer.valueUndefined  &&  equalizer.valueNull;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer.valueUndefined  &&  equalizer.valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer.valueUndefined  &&  equalizer.valueNull;	  return    equalizer.valueUndefined;    	non-compiled	[CE]  ';'  expected	56	None	replace
933	[BUG]  [BUGGY]  return  valueNull?  value.getType()  <  Token.GETELEM  :  value.getType()  ==  Token.GETELEM;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  value.getType()  <  Token.GETELEM  :  value.getType()  ==  Token.GETELEM;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  value.getType()  <  Token.GETELEM  :  value.getType()  ==  Token.GETELEM;	  return    valueNull    &&    value.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  ';'  expected	129	None	replace
934	[BUG]  [BUGGY]  aughtExceptionHandler.equalValue(value,  valueNull);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  aughtExceptionHandler.equalValue(value,  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	aughtExceptionHandler.equalValue(value,  valueNull);	  if(valueNull)    {    return    ValueUtils.equalValue(value,    valueNull);    }    	non-compiled	[CE]  ';'  expected	44	None	replace
935	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getFirstChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	24	None	replace
936	[BUG]  [BUGGY]  Node  value  =  value.removeFirstChild();  break;  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.removeFirstChild();  break;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.removeFirstChild();  break;	  Node    value    =    value.getLastChild();    break;    	non-compiled	[CE]  ';'  expected	76	None	replace
937	[BUG]  [BUGGY]  return  equalizer  ||  equalizer.equals(valueNull);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  equalizer.equals(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  equalizer.equals(valueNull);	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
938	[BUG]  [BUGGY]  return  equalizer  ||  equalizer.equivalent;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  equalizer.equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  equalizer.equivalent;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
939	[BUG]  [BUGGY]  return  equalizer  ||  equalizer.negate(valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  equalizer.negate(valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  equalizer.negate(valueNull);	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
940	[BUG]  [BUGGY]  return  equalizer  ||  equalizer;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  ||  equalizer;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  ||  equalizer;	  return    equalizer    ||    valueNull;    	non-compiled	[CE]  ';'  expected	126	None	replace
941	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getFirstChild()!=  null);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getFirstChild()!=  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getFirstChild()!=  null);	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
942	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getFirstChild()  ==  null);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getFirstChild()  ==  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getFirstChild()  ==  null);	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
943	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NUMBER);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NUMBER);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.NUMBER);	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
944	[BUG]  [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getLocalPart()!=  null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getLocalPart()!=  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull  ||(value.getType()  ==  Token.FUNCTION  &&  value.getLocalPart()!=  null);	  return    equalizer    &&    valueNull;    	non-compiled	[CE]  ';'  expected	124	None	replace
945	[BUG]  [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  return  Double.parseDouble(value);  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  return  Double.parseDouble(value);  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return!valueUndefined;  }  else  {  return  Double.parseDouble(value);  }	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
946	[BUG]  [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return!valueUndefined;  }  else  {  throw  new  IllegalStateException( " ");  }	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
947	[BUG]  [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return!valueUndefined;  }  else  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return!valueUndefined;  }  else  {  return  false;  }	  return!valueUndefined;    	non-compiled	[CE]  ';'  expected	96	None	replace
948	[BUG]  [BUGGY]  return  equalise(value,  equivalent);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  equivalent);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  equivalent);	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
949	[BUG]  [BUGGY]  return  compareToUndefined(value,  equalise(valueUndefined));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  compareToUndefined(value,  equalise(valueUndefined));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  compareToUndefined(value,  equalise(valueUndefined));	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
950	[BUG]  [BUGGY]  return  compareToUndefined(value,  equalise(valueNull));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  compareToUndefined(value,  equalise(valueNull));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  compareToUndefined(value,  equalise(valueNull));	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
951	[BUG]  [BUGGY]  return  equalise(value,  equalizer);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  equalizer);	  return    equalise(value,    valueUndefined);    	non-compiled	[CE]  ';'  expected	30	None	replace
952	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equal  -  value);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equal  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equal  -  value);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
953	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equivalent  -  value);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equivalent  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equivalent  -  value);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
954	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalValue  -  value);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalValue  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalValue  -  value);	  return    ValueUtils.equal(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	107	None	replace
955	[BUG]  [BUGGY]  return  valueNull?   "null "  :  value.getName();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?   "null "  :  value.getName();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?   "null "  :  value.getName();	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
956	[BUG]  [BUGGY]  return  valueNull?   "null "  :  value.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?   "null "  :  value.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?   "null "  :  value.getFirstChild();	  return    valueNull?   "null   "    :    op;    	non-compiled	[CE]  ';'  expected	169	None	replace
957	[BUG]  [BUGGY]  return  this.valueNull?  valueUndefined  :  this.value;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull?  valueUndefined  :  this.value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull?  valueUndefined  :  this.value;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
958	[BUG]  [BUGGY]  return  op?  valueNull  :  this.value;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  valueNull  :  this.value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  valueNull  :  this.value;	  return    this.valueNull?    valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	123	None	replace
959	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  0);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  0);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  0);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
960	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  i);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  i);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  i);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
961	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  srcValue);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  srcValue);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  srcValue);	  return    ValueUtils.equalValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	65	None	replace
962	[BUG]  [BUGGY]  return  op  &&  this.valueUndefined;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  &&  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  &&  this.valueUndefined;	  return    this.valueNull    &&    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	145	None	replace
963	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isSquareValue(value.getLastChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isSquareValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isSquareValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isEquivalentValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	164	None	replace
964	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isValue(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isValue(value.getLastChild());	  return    valueNull?    valueUndefined    :    ValueUtil.isEquivalentValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	164	None	replace
965	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equivalent,  valueUndefined);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equivalent,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equivalent,  valueUndefined);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
966	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valueUndefined);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalizer,  valueUndefined);	  return    ValueUtils.equal(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	80	None	replace
967	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equal  -  value);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equal  -  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equal  -  value);	  return    ValueUtils.equalValue(value,    valueNull    -    value);    	non-compiled	[CE]  ';'  expected	93	None	replace
968	[BUG]  [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	103	None	replace
969	[BUG]  [BUGGY]  return  this.valueUndefined?  valueNull  :  valueUndefined;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined?  valueNull  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined?  valueNull  :  valueUndefined;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
970	[BUG]  [BUGGY]  return  valueNull? "null "  :  this.valueUndefined;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  this.valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  this.valueUndefined;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
971	[BUG]  [BUGGY]  return  this.valueUndefined?  valueNull  :  value;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined?  valueNull  :  value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined?  valueNull  :  value;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
972	[BUG]  [BUGGY]  return  this.valueUndefined  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueUndefined  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueUndefined  +  1;	  return    this.valueUndefined;    	non-compiled	[CE]  ';'  expected	26	None	replace
973	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isSquareValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isSquareValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isSquareValue(value.getFirstChild());	  return    valueNull?    valueUndefined    :    ValueUtils.isEquivalentValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	133	None	replace
974	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.NUMBER;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.NUMBER;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getType()  ==  Token.NUMBER;	  return    valueNull    &&    value.getType()    ==    Token.NUMBER;    	non-compiled	[CE]  ';'  expected	131	None	replace
975	[BUG]  [BUGGY]  return  equalizer  &&  valueNull.equals(value;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  valueNull.equals(value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  valueNull.equals(value;	  return    equalizer    &&    valueNull.equals(value);    	non-compiled	[CE]  ';'  expected	127	None	replace
976	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isEquivalentValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isEquivalentValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isEquivalentValue(value.getFirstChild());	  return    valueNull?    valueNull    :    ValueUtils.isScalarValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	39	None	replace
977	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isUndefinedValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isUndefinedValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isUndefinedValue(value.getFirstChild());	  return    valueNull?    valueNull    :    ValueUtils.isScalarValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	39	None	replace
978	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.isValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.isValue(value.getFirstChild());	  return    valueNull?    valueNull    :    ValueUtils.isScalarValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	39	None	replace
979	[BUG]  [BUGGY]  return  valueNull?  false  :  valueValue.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueValue.getFirstChild();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueValue.getFirstChild();	  return    valueNull?    false    :    valueValue;    	non-compiled	[CE]  ';'  expected	172	None	replace
980	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  return  valueNull;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  return  valueNull;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op,  false);  }  else  {  return  valueNull;  }	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
981	[BUG]  [BUGGY]  ReturnValueUtils.getValue(value,  op,  false);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  ReturnValueUtils.getValue(value,  op,  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	ReturnValueUtils.getValue(value,  op,  false);	  return    ValueUtils.getValue(value,    op,    false);    	non-compiled	[CE]  ';'  expected	85	None	replace
982	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op,  op);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op,  op);	  return    ValueUtils.equalValue(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	46	None	replace
983	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.POSITIVE_INFINITY  :  Double.NEGATING_A_NON_NUMBER_ERROR);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.POSITIVE_INFINITY  :  Double.NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Double.POSITIVE_INFINITY  :  Double.NEGATING_A_NON_NUMBER_ERROR);	  return    equalise(valueNull,    valueUndefined?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  ';'  expected	31	None	replace
984	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.POSITIVE_INFINITY  :  Double.NaN);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined?  Double.POSITIVE_INFINITY  :  Double.NaN);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined?  Double.POSITIVE_INFINITY  :  Double.NaN);	  return    equalise(valueNull,    valueUndefined?    Double.POSITIVE_INFINITY    :    Double.POSITIVE_INFINITY);    	non-compiled	[CE]  ';'  expected	31	None	replace
985	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isEquivalentValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isEquivalentValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined)&&!NodeUtil.isEquivalentValue(value.getFirstChild());	  return    equalise(valueNull,    valueUndefined)&&!NodeUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	118	None	replace
986	[BUG]  [BUGGY]  return  ValueUtils.compareValue(value,  op)-  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.compareValue(value,  op)-  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.compareValue(value,  op)-  1;	  return    ValueUtils.getValue(value,    op)-    1;    	non-compiled	[CE]  ';'  expected	112	None	replace
987	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  rval);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  rval);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalizer,  rval);	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
988	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  valuesNull);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  equalizer,  valuesNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  equalizer,  valuesNull);	  return    ValueUtils.equalValue(value,    equalizer);    	non-compiled	[CE]  ';'  expected	45	None	replace
989	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.toString(value.getFirstChild().getLastChild(),  valueNull);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.toString(value.getFirstChild().getLastChild(),  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  op  :  Integer.toString(value.getFirstChild().getLastChild(),  valueNull);	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
990	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.toString(value.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.toString(value.getFirstChild().getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.toString(value.getFirstChild().getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.toString(value.getFirstChild().getLastChild());    	non-compiled	[CE]  ';'  expected	21	None	replace
991	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  op));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  op));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  op));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
992	[BUG]  [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  valueNull));  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  valueNull));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  NON_GLOBAL_BITWISE_OPERAND,  valueNull));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
993	[BUG]  [BUGGY]  Context.report(JSError.make(value,  op,  NON_NUMBER_ERROR));  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Context.report(JSError.make(value,  op,  NON_NUMBER_ERROR));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Context.report(JSError.make(value,  op,  NON_NUMBER_ERROR));	  Context.reportCodeChange();    	non-compiled	[CE]  ';'  expected	74	None	replace
994	[BUG]  [BUGGY]  return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  equal);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  equal);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equal?  valueUndefined  :  ValueUtil.getValue(value.getLastChild(),  equal);	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    equal);    	non-compiled	[CE]  ';'  expected	138	None	replace
995	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  equalizer);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  equalizer);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  ValueUtils.getValue(value.getLastChild(),  equalizer);	  return    valueNull?    equalizer    :    ValueUtils.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	48	None	replace
996	[BUG]  [BUGGY]  Node  value  =  item.getNext();  return(valueNull  ||  valueNull);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  item.getNext();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  item.getNext();  return(valueNull  ||  valueNull);	  Node    value    =    value.getNext();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	98	None	replace
997	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getNext());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtils.escapeHtml(value.getNext());	  return    valueNull?    valueNull    :    ValueUtils.escapeHtml(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	64	None	replace
998	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  else  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  else  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  else  {  return  false;  }	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
999	[BUG]  [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)  {  return  ValueUtils.getValue(value,  op).booleanValue();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
1000	[BUG]  [BUGGY]  return  ValueUtils.compareValue(value,  op).booleanValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.compareValue(value,  op).booleanValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.compareValue(value,  op).booleanValue();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
1001	[BUG]  [BUGGY]  return  ValueUtils.isValue(value,  op).booleanValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.isValue(value,  op).booleanValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.isValue(value,  op).booleanValue();	  return    ValueUtils.getValue(value,    op).booleanValue();    	non-compiled	[CE]  ';'  expected	158	None	replace
1002	[BUG]  [BUGGY]  if(valueNull)return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull)return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull)return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
1003	[BUG]  [BUGGY]  if(valueNull  ||  equalizer  <=  0)  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  if(valueNull  ||  equalizer  <=  0)  {  return  false;  }  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	if(valueNull  ||  equalizer  <=  0)  {  return  false;  }	  if(valueNull)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
1004	[BUG]  [BUGGY]  return  valueUndefined?  false  :  op;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueUndefined?  false  :  op;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueUndefined?  false  :  op;	  return    op?    false    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	3	None	replace
1005	[BUG]  [BUGGY]  return  this.valueNull  -  valueValue;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  this.valueNull  -  valueValue;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull  -  valueValue;	  return    this.valueNull    -    valueNull;    	non-compiled	[CE]  ';'  expected	122	None	replace
1006	[BUG]  [BUGGY]  return  valueNull?  equalizer.getValue()  :  value.getValue();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer.getValue()  :  value.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer.getValue()  :  value.getValue();	  return    equalizer.getValue();    	non-compiled	[CE]  ';'  expected	55	None	replace
1007	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	139	None	replace
1008	[BUG]  [BUGGY]  return  equalise(value,  valueNull  -  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(value,  valueNull  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(value,  valueNull  -  1);	  return    equalise(value,    valueNull);    	non-compiled	[CE]  ';'  expected	32	None	replace
1009	[BUG]  [BUGGY]  return  valueNull?  null  :  value.getType()  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  value.getType()  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  value.getType()  +  1;	  return    valueNull?    null    :    value.getType();    	non-compiled	[CE]  ';'  expected	58	None	replace
1010	[BUG]  [BUGGY]  Node  value  =  this.value.getFirstChild();  return(valueNull  ||  valueNull);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  this.value.getFirstChild();  return(valueNull  ||  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  this.value.getFirstChild();  return(valueNull  ||  valueNull);	  Node    value    =    value.getFirstChild();    return(valueNull    ||    valueNull);    	non-compiled	[CE]  ';'  expected	97	None	replace
1011	[BUG]  [BUGGY]  return  ValueUtils.compareValue(value,  op)+  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.compareValue(value,  op)+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.compareValue(value,  op)+  1;	  return    ValueUtils.equalValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	66	None	replace
1012	[BUG]  [BUGGY]  Node  value  =  item.getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  item.getNext();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  item.getNext();	  Node    value    =    value.getNext();    	non-compiled	[CE]  ';'  expected	71	None	replace
1013	[BUG]  [BUGGY]  return  valueNull? "null "  :  ValueUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  ValueUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  ValueUtil.isLiteralValue(value.getLastChild());	  return    valueUndefined?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	8	None	replace
1014	[BUG]  [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	49	None	replace
1015	[BUG]  [BUGGY]  return  valueNull?  false  :  valueUndefined  *  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  false  :  valueUndefined  *  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueUndefined  *  1;	  return    valueNull?    false    :    valueUndefined    +    1;    	non-compiled	[CE]  ';'  expected	108	None	replace
1016	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  lv,  valueUndefined);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  lv,  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  lv,  valueUndefined);	  return    ValueUtils.equalValue(value,    valueNull,    valueUndefined);    	non-compiled	[CE]  ';'  expected	42	None	replace
1017	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op,  op);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op,  op);	  return    ValueUtils.equal(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	81	None	replace
1018	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  op,  null);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  op,  null);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  op,  null);	  return    ValueUtils.equal(value,    valueNull,    op);    	non-compiled	[CE]  ';'  expected	81	None	replace
1019	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getQualifiedName());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getQualifiedName());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getQualifiedName());	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
1020	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getString())+  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getString())+  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getString())+  1;	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getString());    	non-compiled	[CE]  ';'  expected	168	None	replace
1021	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(valueUndefined);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)&&!Double.isNaN(valueUndefined);	  return    ValueUtils.equalValue(value,    op)&&!Double.isNaN(value);    	non-compiled	[CE]  ';'  expected	141	None	replace
1022	[BUG]  [BUGGY]  Node  value  =  value.cloneTree();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Node  value  =  value.cloneTree();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Node  value  =  value.cloneTree();	  Node    value    =    value.getFirstChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
1023	[BUG]  [BUGGY]  return  valueNull?  valueValue  :  valueUndefined;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueValue  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueValue  :  valueUndefined;	  return    valueNull?    valueUndefined    :    valueValue;    	non-compiled	[CE]  ';'  expected	36	None	replace
1024	[BUG]  [BUGGY]  return  valueNull?  Double.NaN  :  valueUndefined;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  Double.NaN  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  Double.NaN  :  valueUndefined;	  return    valueNull?    true    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	1	None	replace
1025	[BUG]  [BUGGY]  return  valueNull?  null  :  valueUndefined;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  null  :  valueUndefined;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  null  :  valueUndefined;	  return    valueNull?    true    :    valueUndefined;    	non-compiled	[CE]  ';'  expected	1	None	replace
1026	[BUG]  [BUGGY]  return  op?  this.valueNull  :  this.value;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op?  this.valueNull  :  this.value;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op?  this.valueNull  :  this.value;	  return    valueNull?    this.valueNull    :    this.value;    	non-compiled	[CE]  ';'  expected	147	None	replace
1027	[BUG]  [BUGGY]  return  valueNull? "null "  :  ValueUtils.isScalarValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  ValueUtils.isScalarValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  ValueUtils.isScalarValue(value.getFirstChild());	  return    valueUndefined?    valueNull    :    ValueUtils.isScalarValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	41	None	replace
1028	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild()));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild()));	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
1029	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valuesNull);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalizer,  valuesNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalizer,  valuesNull);	  return    ValueUtils.equal(value,    equalizer);    	non-compiled	[CE]  ';'  expected	78	None	replace
1030	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isValue(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  ValueUtil.isValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  ValueUtil.isValue(value.getLastChild());	  return    valueNull?    valueNull    :    ValueUtil.isLiteralValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	6	None	replace
1031	[BUG]  [BUGGY]  return  equalise(valueNull?  Double.NaN  :  equalise(valueUndefined);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull?  Double.NaN  :  equalise(valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull?  Double.NaN  :  equalise(valueUndefined);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
1032	[BUG]  [BUGGY]  return  equalise(valueNull?  valueUndefined  :  equalise(valueUndefined));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull?  valueUndefined  :  equalise(valueUndefined));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull?  valueUndefined  :  equalise(valueUndefined));	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
1033	[BUG]  [BUGGY]  return  equalise(valueNull? "null "  :  valueUndefined);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalise(valueNull? "null "  :  valueUndefined);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull? "null "  :  valueUndefined);	  return    equalise(valueUndefined);    	non-compiled	[CE]  ';'  expected	14	None	replace
1034	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  value.getString();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  value.getString();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  value.getString();	  return    valueNull?    valueNull    :    value.getValue();    	non-compiled	[CE]  ';'  expected	150	None	replace
1035	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getFirstChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	104	None	replace
1036	[BUG]  [BUGGY]  return  ValueUtils.compareValue(value,  op);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.compareValue(value,  op);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.compareValue(value,  op);	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
1037	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  this.value);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  this.value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  this.value);	  return    ValueUtils.equalValue(value,    equivalent);    	non-compiled	[CE]  ';'  expected	156	None	replace
1038	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  equalizer.negate();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  equalizer.negate();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  equalizer.negate();	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
1039	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  equalizer.getValue();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  equalizer.getValue();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  equalizer.getValue();	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
1040	[BUG]  [BUGGY]  return  valueNull?  equalizer  :  equalizer.toString();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  equalizer  :  equalizer.toString();  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  equalizer  :  equalizer.toString();	  return    valueNull?    equalizer    :    equalizer;    	non-compiled	[CE]  ';'  expected	53	None	replace
1041	[BUG]  [BUGGY]  return  equalizer  &&  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer  &&  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer  &&  ValueUtil.getValue(value.getLastChild());	  return    valueNull?    equalizer    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
1042	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true));	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
1043	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  i);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  i);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  i);	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
1044	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op,  ';');  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op,  ';');  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op,  ';');	  return    ValueUtils.getValue(value,    op,    valueNull);    	non-compiled	[CE]  ';'  expected	83	None	replace
1045	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)/  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  valueNull)/  2;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull)/  2;	  return    ValueUtils.equalValue(value,    op)/    2;    	non-compiled	[CE]  ';'  expected	69	None	replace
1046	[BUG]  [BUGGY]  return  valueNull? "null "  :  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull? "null "  :  ValueUtil.getValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull? "null "  :  ValueUtil.getValue(value.getLastChild());	  return    valueUndefined?    valueNull    :    ValueUtil.getValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
1047	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.STRING;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getType()  ==  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
1048	[BUG]  [BUGGY]  return  valueNull  -  value.getType()  ==  Token.STRING;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull  -  value.getType()  ==  Token.STRING;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull  -  value.getType()  ==  Token.STRING;	  return    valueNull    &&    value.getType()    ==    Token.STRING;    	non-compiled	[CE]  ';'  expected	130	None	replace
1049	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  equalValue  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equal(value,  equalValue  -  1);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  equalValue  -  1);	  return    ValueUtils.equal(value,    equalValue);    	non-compiled	[CE]  ';'  expected	171	None	replace
1050	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild());	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
1051	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getLastChild());	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
1052	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild()));	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
1053	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&!NodeUtil.isLiteralValue(value.getFirstChild(),  false));	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
1054	[BUG]  [BUGGY]  return!valueNull  &&!NodeUtil.isExpressionNode(value.getFirstChild());  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return!valueNull  &&!NodeUtil.isExpressionNode(value.getFirstChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return!valueNull  &&!NodeUtil.isExpressionNode(value.getFirstChild());	  return!valueNull;    	non-compiled	[CE]  ';'  expected	95	None	replace
1055	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)?  valueNull  :  value);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)?  valueNull  :  value);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)?  valueNull  :  value);	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
1056	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)?  Double.NaN  :  valueNull);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)?  Double.NaN  :  valueNull);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)?  Double.NaN  :  valueNull);	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
1057	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op)?  Double.NaN  :  valueNull;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.equalValue(value,  op)?  Double.NaN  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op)?  Double.NaN  :  valueNull;	  return    ValueUtils.equalValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	68	None	replace
1058	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  false));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  false));  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLhsValue(value.getLastChild(),  false));	  return    valueNull?    valueUndefined    :    ValueUtil.isLhsValue(value.getLastChild());    	non-compiled	[CE]  ';'  expected	165	None	replace
1059	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getNext());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getNext());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getNext());	  return    valueNull?    valueUndefined    :    ValueUtil.getValue(value.getFirstChild());    	non-compiled	[CE]  ';'  expected	9	None	replace
1060	[BUG]  [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtil.isLiteralValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	109	None	replace
1061	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getLastChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getLastChild());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  equal  :  Integer.parseInt(value.getLastChild());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild());    	non-compiled	[CE]  ';'  expected	20	None	replace
1062	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  equivalent;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  equivalent;	  return    valueNull?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	114	None	replace
1063	[BUG]  [BUGGY]  return  valueNull?  valueNull  :  op  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueNull  :  op  +  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueNull  :  op  +  1;	  return    valueNull?    valueNull    :    op;    	non-compiled	[CE]  ';'  expected	114	None	replace
1064	[BUG]  [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  Return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	Return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getFirstChild(),  true);	  return    valueNull?    valueUndefined    :    ValueUtils.getValue(value.getLastChild(),    true);    	non-compiled	[CE]  ';'  expected	134	None	replace
1065	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op)*  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op)*  1;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op)*  1;	  return    ValueUtils.getValue(value,    op)+    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
1066	[BUG]  [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.parseInt(value.getLastChild().getString());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.parseInt(value.getLastChild().getString());  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  value.getType()  ==  Token.FUNCTION?  this  :  Integer.parseInt(value.getLastChild().getString());	  return    value.getType()    ==    Token.FUNCTION?    op    :    Integer.parseInt(value.getLastChild().getString());    	non-compiled	[CE]  ';'  expected	22	None	replace
1067	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  valueNull?  valueUndefined  :  value.getType()  ==  Token.FUNCTION;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  value.getType()  ==  Token.FUNCTION;	  return    valueNull    &&    value.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	60	None	replace
1068	[BUG]  [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  equalizer?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer?  valueNull  :  ValueUtils.escapeHtml(value.getLastChild(),  false);	  return    valueNull?    valueUndefined    :    ValueUtils.escapeHtml(value.getLastChild(),    false);    	non-compiled	[CE]  ';'  expected	99	None	replace
1069	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op),  equivalent;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  ValueUtils.getValue(value,  op),  equivalent;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op),  equivalent;	  return    ValueUtils.getValue(value,    op),    valueNull);    	non-compiled	[CE]  ';'  expected	84	None	replace
1070	[BUG]  [BUGGY]  return  op  >  0?  0  :  valueNull;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:      [BUGGY]  return  op  >  0?  0  :  valueNull;  [BUGGY]      case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException(     "unexpected.     ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op  >  0?  0  :  valueNull;	  return    valueNull?    0    :    op;    	non-compiled	[CE]  ';'  expected	117	None	replace
