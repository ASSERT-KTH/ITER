bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  valueNull;  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull;  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull;	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
2	[BUG]  [BUGGY]  return  op;  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  op;  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  op;	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
3	[BUG]  [BUGGY]  return  equalise(valueNull,  valueUndefined);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  equalise(valueNull,  valueUndefined);  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull,  valueUndefined);	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
4	[BUG]  [BUGGY]  return  this.valueNull;  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  this.valueNull;  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  this.valueNull;	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
5	[BUG]  [BUGGY]  return  valueNull?  false  :  valueUndefined;  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull?  false  :  valueUndefined;  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  false  :  valueUndefined;	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
6	[BUG]  [BUGGY]  return  equalizer;  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  equalizer;  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalizer;	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
7	[BUG]  [BUGGY]  return  equalise(valueNull);  [CE]  ';'  expected  [FE]                AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  equalise(valueNull);  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  equalise(valueNull);	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
8	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                  AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]    [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	  	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
9	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLastChild());  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLastChild());  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.escapeHtml(value.getLastChild());	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
10	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLastChild());  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.getValue(value.getLastChild());	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
11	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getLastChild());  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getLastChild());  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtil.isLiteralValue(value.getLastChild());	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
12	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLastChild());  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLastChild());  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.getValue(value.getLastChild());	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
13	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild());  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild());  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  ValueUtils.isScalarValue(value.getFirstChild());	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
14	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull);  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  ValueUtils.equalValue(value,  valueNull);  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  valueNull);	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
15	[BUG]  [BUGGY]  return  ValueUtils.equalValue(value,  op);  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  ValueUtils.equalValue(value,  op);  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equalValue(value,  op);	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
16	[BUG]  [BUGGY]  return  ValueUtils.getValue(value,  op);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  ValueUtils.getValue(value,  op);  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.getValue(value,  op);	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
17	[BUG]  [BUGGY]  return  valueNull?  valueUndefined  :  valueNull;  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  valueNull?  valueUndefined  :  valueNull;  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  valueNull?  valueUndefined  :  valueNull;	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
18	[BUG]  [BUGGY]  return  ValueUtils.equal(value,  valueNull);  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  &&  NodeUtil.isLiteralValue(value.getFirstChild(),  false)));  boolean  valueNull  =  (Token.NULL  ==  value.getType());  boolean  equivalent  =  valueUndefined  ||  valueNull;  switch  (op)  {  case  Token.EQ:  return  equivalent;  case  Token.NE:  return  !equivalent;  case  Token.SHEQ:  [BUGGY]  return  ValueUtils.equal(value,  valueNull);  [BUGGY]  case  Token.SHNE:  return  !valueUndefined;  case  Token.LT:  case  Token.GT:  case  Token.LE:  case  Token.GE:  return  false;  default:  throw  new  IllegalStateException( "unexpected. ");  }  [CLASS]  PeepholeFoldConstants  [METHOD]  compareToUndefined  [RETURN_TYPE]  boolean  Node  value  int  op  [VARIABLES]  Locale  ROOT_LOCALE  boolean  equivalent  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  int  op  Node  value  	projects/Closure74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.47140452079103173	1135	1135	3	replace	return  ValueUtils.equal(value,  valueNull);	return  valueUndefined;  	non-compiled	[CE]  ';'  expected	79	None	replace
