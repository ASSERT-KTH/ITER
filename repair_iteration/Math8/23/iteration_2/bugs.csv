bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  rng.setValue(probs,  probabilities);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  rng.setValue(probs,  probabilities);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	rng.setValue(probs,  probabilities);	      rng.setValue(probs);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
2	[BUG]  [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  }  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  }  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  }	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probabilities[i]    =    sample.getValue();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  }  [CE]  illegal  start  of  expression  [FE]              ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  }  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  }	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probabilities[i]    =    sample.getValue();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  return  new  Double(singleton.getValue(),  probabilities);  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  return  new  Double(singleton.getValue(),  probabilities);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	return  new  Double(singleton.getValue(),  probabilities);	  return    new    Double(singleton.getValue());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  return  new  Double(singleton.getValue()  +  1);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  return  new  Double(singleton.getValue()  +  1);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	return  new  Double(singleton.getValue()  +  1);	  return    new    Double(singleton.getValue());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    randomGenerator.setValue(rng);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(i),  probs);  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(i),  probs);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(i),  probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    randomGenerator.setValue(rng);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  rng.setValue(probs[0]);  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  rng.setValue(probs[0]);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	rng.setValue(probs[0]);	      rng.setValue(probs[i]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  rng.setValue(probs[1]);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  rng.setValue(probs[1]);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	rng.setValue(probs[1]);	      rng.setValue(probs[i]);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  return  new  Double(singletons.size()  -  1);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  return  new  Double(singletons.size()  -  1);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	return  new  Double(singletons.size()  -  1);	  return    new    Double(singletons.size());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  return  new  Double(probs.size());  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  return  new  Double(probs.size());  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	return  new  Double(probs.size());	  return    new    Double(singletons.size());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs[]  =  sample.getValue();  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  Pair  <  T,  Double>  probs[]  =  sample.getValue();  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	Pair  <  T,  Double>  probs[]  =  sample.getValue();	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getValue();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs).getValue());  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs).getValue());  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs).getValue());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i).getValue());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  rng.addValue(probs,  probabilities);  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  rng.addValue(probs,  probabilities);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	rng.addValue(probs,  probabilities);	      rng.addValue(probs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  rng.addValue(probs,  probability);  [CE]  illegal  start  of  expression  [FE]              ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  rng.addValue(probs,  probability);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	rng.addValue(probs,  probability);	      rng.addValue(probs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  randomGenerator.setValue(probs);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  randomGenerator.setValue(probs);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  randomGenerator.setValue(probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    randomGenerator.setValue(rng);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  randomGenerator.addValue(probs);  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  randomGenerator.addValue(probs);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  randomGenerator.addValue(probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    randomGenerator.addValue(rng);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  return  new  Double(singletons.size()  +  1);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  return  new  Double(singletons.size()  +  1);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	return  new  Double(singletons.size()  +  1);	  return    new    Double(singletons.size());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  rng.addValue(probs,  probabilitys);  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  rng.addValue(probs,  probabilitys);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	rng.addValue(probs,  probabilitys);	      rng.addValue(probs);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
22	[BUG]  [BUGGY]  return  new  Double(singleton.getKey());  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  return  new  Double(singleton.getKey());  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	return  new  Double(singleton.getKey());	  return    new    Double(singleton.getValue());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  return  new  Double(singleton.getValue(),  probs);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  return  new  Double(singleton.getValue(),  probs);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	return  new  Double(singleton.getValue(),  probs);	  return    new    Double(singleton.getValue());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(i),  probs);  randomGenerator.setValue(rng);  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(i),  probs);  randomGenerator.setValue(rng);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(i),  probs);  randomGenerator.setValue(rng);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    randomGenerator.setValue(rng);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	Pair  <  T,  Double>  sample  =  samples.get(i);  probabilities[i]  =  sample.getValue();	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probabilities[i]    =    sample.getValue();    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  }  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  }  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  }	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getValue();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  }  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  }  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  }	      if(probs!=    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(0).getValue());  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(0).getValue());  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(0).getValue());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i).getValue());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
